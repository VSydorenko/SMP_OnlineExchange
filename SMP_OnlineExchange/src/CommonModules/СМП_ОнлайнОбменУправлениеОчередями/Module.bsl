////////////////////////////////////////////////////////////////////////////////
// СМП_ОнлайнОбменУправлениеОчередями: работа с сообщениями онлайн-обменов данными.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДобавлениеВОчередь

// Регистрирует объект в очереди обработки данных.
//
// Параметры:
//   УчетнаяЗаписьОбмена - СправочникСсылка.СМП_УчетныеЗаписиОбменов - учетная запись обмена для которой регистрируется сообщение.
//   ОбъектСсылка - ДокументССылка, СправочникСсылка - ссылка на объект, который регистрируется в очереди.
//
Процедура ДобавитьСообщениеВОчередьОбработки(УчетнаяЗаписьОбмена, ОбъектСсылка) Экспорт
	
	уидПользователяИБ = СМП_ОнлайнОбменПовтИсп.ПолучитьИдентификаторТекущегоПользователяИБ();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);
	МенеджерЗаписи = ПолучитьМенеджерСообщения("СМП_ОчередьОбработкиДанных", ИдентификаторСообщения);
	МенеджерЗаписи.УчетнаяЗаписьОбмена = УчетнаяЗаписьОбмена;
	МенеджерЗаписи.ИдентификаторПользователяИБ = уидПользователяИБ;
	МенеджерЗаписи.Данные = ЗначениеВСтрокуВнутр(ОбъектСсылка);
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СформироватьОтправитьИсходящиеСообщенияВФоне(УчетнаяЗаписьОбмена, уидПользователяИБ);
	
КонецПроцедуры //ДобавитьСообщениеВОчередьОбработки

// Регистрирует объект для отправки в очереди исходящих сообщений.
//
// Параметры:
//   УчетнаяЗаписьОбмена - СправочникСсылка.СМП_УчетныеЗаписиОбменов - учетная запись обмена для которой регистрируется сообщение.
//   Сообщение - ДокументССылка, СправочникСсылка - ссылка на объект, который регистрируется в очереди.
//
Процедура ДобавитьСообщениеВОчередьИсходящих(уидПользователяИБ, УчетнаяЗаписьОбмена, Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	МенеджерЗаписи = ПолучитьМенеджерСообщения("СМП_ОчередьИсходящихСообщений", УникальныйИдентификатор);
	МенеджерЗаписи.УчетнаязаписьОбмена = УчетнаяЗаписьОбмена;
	МенеджерЗаписи.ИдентификаторПользователяИБ = уидПользователяИБ;
	МенеджерЗаписи.Данные = Сообщение;
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Регистрирует полученные данные в очереди входящих сообщений.
//
// Параметры:
//   УчетнаяЗаписьОбмена - СправочникСсылка.СМП_УчетныеЗаписиОбменов - учетная запись обмена для которой регистрируется сообщение.
//   Сообщение - Строка - входящие данные в формате JSON.
//
// Возвращаемое значение:
//   Строка - Строковое представление уникального идентификатора сообщения.
//
Функция ДобавитьСообщениеВОчередьВходящих(УчетнаяЗаписьОбмена, Сообщение) Экспорт
	
	ИдентификаторПользователяИБ = СМП_ОнлайнОбменПовтИсп.ПолучитьИдентификаторТекущегоПользователяИБ();
	
	УстановитьПривилегированныйРежим(Истина);
	
	УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	МенеджерЗаписи = ПолучитьМенеджерСообщения("СМП_ОчередьВходящихСообщений", УникальныйИдентификатор);
	МенеджерЗаписи.ИдентификаторПользователяИБ = ИдентификаторПользователяИБ;
	МенеджерЗаписи.УчетнаяЗаписьОбмена = УчетнаяЗаписьОбмена;
	МенеджерЗаписи.Данные = Сообщение;
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбработатьВходящиеСообщенияВФоне(УчетнаяЗаписьОбмена, ИдентификаторПользователяИБ);
	
	Возврат УникальныйИдентификатор;
	
КонецФункции

// .
//
// Параметры:
//   ИдентификаторСообщения - Строка - Строковое представление уникального идентификатора удаляемого сообщения.
//   Очередь - Строка - имя очереди из которой удаляется сообщение ("исход","вход", "").
//
Процедура УдалитьСообщениеИзОчереди(ИдентификаторСообщения, Очередь = "") Экспорт
	
	НЗ = НаборЗаписейПоИмениОчереди(Очередь);
	НЗ.Отбор.УникальныйИдентификатор.Установить(ИдентификаторСообщения);
	НЗ.Записать();
	
КонецПроцедуры //УдалитьСообщениеИзОчереди

#КонецОбласти

#Область ОбработкаОчередей

// Выполняет обработку сообщения в очереди исходящих.
//
// Параметры:
//   УчетнаязаписьОбмена - СправочникСсылка.СМП_УчетныеЗаписиОбменов - учетная запись обмена в рамках которой отправляется сообщение.
//   ИдентификаторСообщения - Строка - уникальный идентификатор сообщения в очереди исходящих.
//
Процедура ОтправитьСообщение(УчетнаязаписьОбмена, ИдентификаторСообщения) Экспорт
	
	УстановитьСтатусВОбработке(ИдентификаторСообщения, "Исход");
	Данные = ПолучитьИсходящееСообщениеПоИдентификатору(ИдентификаторСообщения);
	ДанныеСсылка = ЗначениеИзСтрокиВнутр(Данные);
	СМП_ОнлайнОбменСобытия.ОтправитьСообщение(УчетнаязаписьОбмена, ДанныеСсылка);
	УстановитьСтатусОбработано(ИдентификаторСообщения, "Исход");
	
КонецПроцедуры //ОбработатьИсходящееСообщение

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДобавлениеВОчередь_Служебное

Функция ПолучитьМенеджерСообщения(ИмяОчереди, УникальныйИдентификатор = Неопределено, ТаймШтамп = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если УникальныйИдентификатор = Неопределено Тогда
		УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Если ТаймШтамп = Неопределено Тогда
		ТаймШтамп = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений[ИмяОчереди].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УникальныйИдентификатор = УникальныйИдентификатор;
	МенеджерЗаписи.ДатаДобавления          = ТекущаяДатаСеанса();
	МенеджерЗаписи.ТаймШтамп               = ТаймШтамп;
	МенеджерЗаписи.Статус                  = Перечисления.СМП_СтатусыОбработкиСообщений.Новое;
	
	Возврат МенеджерЗаписи;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

#КонецОбласти

#Область ОбновлениеСтатусов

Функция УстановитьСтатусНовое(УникальныйИдентификатор, Очередь = "") Экспорт
	
	ОбновитьСтатусСообщения(Очередь, УникальныйИдентификатор, Перечисления.СМП_СтатусыОбработкиСообщений.Новое);
	
КонецФункции

Функция УстановитьСтатусВОбработке(УникальныйИдентификатор, Очередь = "") Экспорт
	
	ОбновитьСтатусСообщения(Очередь, УникальныйИдентификатор, Перечисления.СМП_СтатусыОбработкиСообщений.ВОбработке);
	
КонецФункции

Функция УстановитьСтатусДоставлено(УникальныйИдентификатор, Очередь = "") Экспорт
	
	ОбновитьСтатусСообщения(Очередь, УникальныйИдентификатор, Перечисления.СМП_СтатусыОбработкиСообщений.Доставлено);
	
КонецФункции

Функция УстановитьСтатусОтправлено(УникальныйИдентификатор, Очередь = "") Экспорт
	
	ОбновитьСтатусСообщения(Очередь, УникальныйИдентификатор, Перечисления.СМП_СтатусыОбработкиСообщений.Отправлено);
	
КонецФункции

Функция УстановитьСтатусОбработано(УникальныйИдентификатор, Очередь = "") Экспорт
	
	ОбновитьСтатусСообщения(Очередь, УникальныйИдентификатор, Перечисления.СМП_СтатусыОбработкиСообщений.Обработано);
	
КонецФункции

Функция УстановитьСтатусОшибкаОбработки(УникальныйИдентификатор, Очередь = "", СообщениеОбОшибке) Экспорт
	
	ЗаписатьОшибку(Очередь, УникальныйИдентификатор, Перечисления.СМП_СтатусыОбработкиСообщений.ОшибкаОбработки, СообщениеОбОшибке);
	
КонецФункции

Функция УстановитьСтатусОшибкаДоставки(УникальныйИдентификатор, Очередь = "", СообщениеОбОшибке)
	
	ЗаписатьОшибку(Очередь, УникальныйИдентификатор, Перечисления.СМП_СтатусыОбработкиСообщений.ОшибкаДоставки, СообщениеОбОшибке);
	
КонецФункции

Функция УстановитьСтатусОшибкаОтправки(УникальныйИдентификатор, Очередь = "", СообщениеОбОшибке)
	
	ЗаписатьОшибку(Очередь, УникальныйИдентификатор, Перечисления.СМП_СтатусыОбработкиСообщений.ОшибкаОтправки, СообщениеОбОшибке);
	
КонецФункции

Функция ОбновитьСтатусСообщения(Очередь, УникальныйИдентификатор, Статус)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = НаборЗаписейПоИмениОчереди(Очередь);
	
	НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(УникальныйИдентификатор);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() Тогда
		Запись = НаборЗаписей[0];
		Запись.Статус = Статус;
		Если НЕ Запись.Статус = Перечисления.СМП_СтатусыОбработкиСообщений.Новое Тогда
			Запись.ДатаОбработки = ТекущаяДатаСеанса();
		КонецЕсли;
		Запись.СообщениеОбОшибке = "";
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ЗаписатьОшибку(Очередь, УникальныйИдентификатор, Статус, СообщениеОбОшибке)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = НаборЗаписейПоИмениОчереди(Очередь);
	
	НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(УникальныйИдентификатор);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() Тогда
		
		Запись = НаборЗаписей[0];
		Запись.Статус = Статус;
		Запись.СообщениеОбОшибке = СообщениеОбОшибке;
		Запись.ДатаОбработки = ТекущаяДатаСеанса();
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

#КонецОбласти

#Область ОбработкаДанных

Функция НаборЗаписейПоИмениОчереди(Очередь)
	
	Если Очередь = "" Тогда
		НаборЗаписей = РегистрыСведений.СМП_ОчередьОбработкиДанных.СоздатьНаборЗаписей();
	ИначеЕсли Найти(НРег(Очередь), "исход") Тогда
		НаборЗаписей = РегистрыСведений.СМП_ОчередьИсходящихСообщений.СоздатьНаборЗаписей();
	ИначеЕсли Найти(НРег(Очередь), "вход") Тогда
		НаборЗаписей = РегистрыСведений.СМП_ОчередьВходящихСообщений.СоздатьНаборЗаписей();
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции

Функция ПолучитьИсходящееСообщениеПоИдентификатору(УникальныйИдентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СМП_ОчередьИсходящихСообщений.Данные КАК Сообщение
	|ИЗ
	|	РегистрСведений.СМП_ОчередьИсходящихСообщений КАК СМП_ОчередьИсходящихСообщений
	|ГДЕ
	|	СМП_ОчередьИсходящихСообщений.УникальныйИдентификатор = &УникальныйИдентификатор";
	Запрос.УстановитьПараметр("УникальныйИдентификатор",УникальныйИдентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сообщение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВходящееСообщениеПоИдентификатору(УникальныйИдентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СМП_ОчередьВходящихСообщений.Данные КАК Сообщение
	|ИЗ
	|	РегистрСведений.СМП_ОчередьВходящихСообщений КАК СМП_ОчередьВходящихСообщений
	|ГДЕ
	|	СМП_ОчередьВходящихСообщений.УникальныйИдентификатор = &УникальныйИдентификатор";
	Запрос.УстановитьПараметр("УникальныйИдентификатор",УникальныйИдентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сообщение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// .
//
// Параметры:
//   УчетнаяЗаписьОбмена - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   уидПользователяИБ - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СформироватьОтправитьИсходящиеСообщенияВФоне(УчетнаяЗаписьОбмена, уидПользователяИБ) 
	
	МассивАктивных = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Состояние", СостояниеФоновогоЗадания.Активно));
	
	МассивФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ, Состояние, ИмяМетода", уидПользователяИБ, СостояниеФоновогоЗадания.Активно,
		"СМП_ОнлайнОбмен.СформироватьОтправитьИсходящиеСообщения"));
	Если МассивФЗ.Количество() = 0 Тогда
		
		ИмяОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьОбмена, "Наименование");
		ИмяФЗ = СтрШаблон("Обмен ""%1"": формирование и отправка исходящих сообщений", ИмяОбмена);
		
		мПараметры = Новый Массив(5);
		мПараметры.Установить(0,уидПользователяИБ);
		мПараметры.Установить(1, УчетнаяЗаписьОбмена);
		мПараметры.Установить(2, Неопределено); // уид конкретного сообщения
		мПараметры.Установить(3, Перечисления.СМП_СтатусыОбработкиСообщений.Новое);
		мПараметры.Установить(4, Ложь);
		
		ФЗ = ФоновыеЗадания.Выполнить("СМП_ОнлайнОбмен.СформироватьОтправитьИсходящиеСообщения", мПараметры, уидПользователяИБ, ИмяФЗ);
		
	КонецЕсли;
	
КонецПроцедуры //СформироватьОтправитьИсходящиеСообщенияВФоне

// .
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбработатьВходящиеСообщенияВФоне(УчетнаяЗаписьОбмена, уидПользователяИБ) Экспорт
	
	МассивФЗ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ, Состояние, ИмяМетода", уидПользователяИБ, СостояниеФоновогоЗадания.Активно, 
		"СМП_ОнлайнОбмен.ОбработатьВходящиеСообщения"));
	
	Если МассивФЗ.Количество() = 0 Тогда
		
		мПараметры = Новый Массив(5);
		мПараметры.Установить(0, уидПользователяИБ);
		мПараметры.Установить(1, УчетнаяЗаписьОбмена);
		мПараметры.Установить(2, Неопределено); // уид конкретного сообщения
		мПараметры.Установить(3, Перечисления.СМП_СтатусыОбработкиСообщений.Новое);
		мПараметры.Установить(4, Ложь);
		
		ИмяОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьОбмена, "Наименование");
		ИмяФЗ = СтрШаблон("Обмен ""%1"": обработка входящих сообщений", ИмяОбмена);
		
		ФЗ = ФоновыеЗадания.Выполнить("СМП_ОнлайнОбмен.ОбработатьВходящиеСообщения", мПараметры, уидПользователяИБ, ИмяФЗ);
		
	КонецЕсли;
	
КонецПроцедуры //ОбработатьВходящиеСообщенияВФоне

#КонецОбласти

#КонецОбласти
