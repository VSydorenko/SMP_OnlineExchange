
#Область ОписаниеПеременных

&НаКлиенте
Перем ТекДанныеОбъектыКВыгрузке;

&НаКлиенте
Перем ТекДанныеСписокПКО;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьОбъектыКВыгрузкеНаФорме();
	КоличествоВыгружаемых = Объект.ОбъектыКВыгрузке.Количество();
	УстановитьОтборСписокПКО();
	УстановитьВидимость();
	НастроитьОформлениеИдентификаторБазы(Элементы.ИдентификаторОбмена, Объект.НастройкаОбмена);
	
	Если НЕ Объект.Ссылка.Пустая() И Объект.НастройкаОбмена = Перечисления.СМП_НастройкиОбменов.ДляПолучения Тогда
		ЗаполнитьДеревоДанныхНаФорме();
	КонецЕсли;
	
	//// Обработчик подсистемы запрета редактирования реквизитов объектов
	//ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	//// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Редактор кода
	// to do: доработать для веб-клиента
	#Если ВебКлиент Тогда
		
	#Иначе
		
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьРедакторКода", ЭтотОбъект);
		НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
		
		//ЗагрузитьРедакторКода(КаталогВременныхФайлов(), Неопределено);
		ОбновитьНаличиеОбработчиковАлгоритмов();
		
	#КонецЕсли
	
	Если Объект.НастройкаОбмена = ПредопределенноеЗначение("Перечисление.СМП_НастройкиОбменов.ДляПолучения") Тогда
		ОбновитьТекущийАктивныйОбработчик();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьПравилаКонвертации" Тогда
		
		//Объект.ОписаниеВыгружаемыхДанных = ПолучитьОписаниеДанныхИсточника(Объект.Ссылка);
		ЗаполнитьОписаниеВыгружаемыхДанныхДерево();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Редактор кода
	Если Объект.НастройкаОбмена = ПредопределенноеЗначение("Перечисление.СМП_НастройкиОбменов.ДляПолучения") Тогда
		Объект.АлгоритмПередПолучениемИзмененныхОбъектов = Элементы.АлгоритмПередПолучениемИзмененныхОбъектовРедактор.Документ.defaultView.editor.getValue();
		Объект.АлгоритмПередКонвертациейОбъекта = Элементы.АлгоритмПередКонвертациейОбъектаРедактор.Документ.defaultView.editor.getValue();
		Объект.АлгоритмПередЗагрузкойДанных = Элементы.АлгоритмПередЗагрузкойДанныхРедактор.Документ.defaultView.editor.getValue();
		Объект.АлгоритмПослеЗагрузкиПараметров = Элементы.АлгоритмПослеЗагрузкиПараметровРедактор.Документ.defaultView.editor.getValue();
		Объект.АлгоритмПередЗагрузкойОбъекта = Элементы.АлгоритмПередЗагрузкойОбъектаРедактор.Документ.defaultView.editor.getValue();
		Объект.АлгоритмПриПолученииИнформацииОбУдалении = Элементы.АлгоритмПриПолученииИнформацииОбУдаленииРедактор.Документ.defaultView.editor.getValue();
		Объект.АлгоритмПослеЗагрузкиОбъекта = Элементы.АлгоритмПослеЗагрузкиОбъектаРедактор.Документ.defaultView.editor.getValue();
		Объект.АлгоритмПослеЗагрузкиДанных = Элементы.АлгоритмПослеЗагрузкиДанныхРедактор.Документ.defaultView.editor.getValue();
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьОбъектыКВыгрузке(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьОтборСписокПКО();
	
	//// Обработчик подсистемы запрета редактирования реквизитов объектов
	//ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	//// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НастройкаОбменаПриИзменении(Элемент)
	
	УстановитьВидимость();
	НастроитьОформлениеИдентификаторБазы(Элементы.ИдентификаторОбмена, Объект.НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодключенияПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ФайлКаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Заголовок = "Выберите каталог для обмена данными";
	ДиалогВыбора.Каталог = ?(ПустаяСтрока(Объект.ФайлКаталогОбмена), КаталогДокументов(), Объект.ФайлКаталогОбмена);
	Обещание = Ждать ДиалогВыбора.ВыбратьАсинх();
	
	Если Обещание <> Неопределено Тогда
		Объект.ФайлКаталогОбмена = Обещание[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВыбранныеПриИзменении(Элемент)
	
	Если ТолькоВыбранные Тогда
		Элементы.ОбъектыКВыгрузкеНаФорме.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Пометка", Истина));
	Иначе
		Элементы.ОбъектыКВыгрузкеНаФорме.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура СтраницыАлгоритмыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьТекущийАктивныйОбработчик();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ОбъектыКВыгрузкеНаФорме

&НаКлиенте
Процедура ОбъектыКВыгрузкеНаФормеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ОбъектыКВыгрузкеНаФорме.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено И Поле.Имя = "ОбъектыКВыгрузкеНаФормеСиноним" Тогда
		ОткрытьФорму(ТекДанные.ИмяОбъекта + ".ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКВыгрузкеНаФормеПриАктивизацииСтроки(Элемент)
	
	ТекДанныеОбъектыКВыгрузке = Элементы.ОбъектыКВыгрузкеНаФорме.ТекущиеДанные;
	
	АдресСхемы = Неопределено;
	Если ТекДанныеОбъектыКВыгрузке.Пометка И КоллекцияСКД.Свойство(ТекДанныеОбъектыКВыгрузке.Имяобъекта, АдресСхемы) Тогда
		ИнициализироватьКомпоновщик(АдресСхемы);
	Иначе
		КомпоновщикОтборов.Настройки.Отбор.Элементы.Очистить();
	КонецЕсли;
	
	УстановитьДоступностьКомпоновщикаНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКВыгрузкеНаФормеПометкаПриИзменении(Элемент)
	
	Если ТекДанныеОбъектыКВыгрузке.Пометка Тогда
		
		// Инициализация новой схемы СКД и компоновщика настроек
		СоздатьСКДНаКлиенте();
		АдресСхемы = Неопределено;
		КоллекцияСКД.Свойство(ТекДанныеОбъектыКВыгрузке.ИмяОбъекта, АдресСхемы);
		Если ЭтоАдресВременногоХранилища(АдресСхемы) Тогда
			ИнициализироватьКомпоновщик(АдресСхемы);
		КонецЕсли;
		
		КоличествоВыгружаемых = КоличествоВыгружаемых + 1;
		
	Иначе
		
		КомпоновщикОтборов.Настройки.Отбор.Элементы.Очистить();
		КоллекцияСКД.Удалить(ТекДанныеОбъектыКВыгрузке.ИмяОбъекта);
		
		КоличествоВыгружаемых = КоличествоВыгружаемых - 1;
		
	КонецЕсли;

	УстановитьДоступностьКомпоновщикаНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_КомпоновщикОтборовНастройкиОтбор

&НаКлиенте
Процедура КомпоновщикОтборовНастройкиОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьОтборыСКД(ТекДанныеОбъектыКВыгрузке.ИмяОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтборовНастройкиОтборПослеУдаления(Элемент)
	
	ОбновитьОтборыСКД(ТекДанныеОбъектыКВыгрузке.ИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокПКО

&НаКлиенте
Процедура СписокПКОПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СписокПКО.ТекущиеДанные <> Неопределено Тогда
		ТекДанныеСписокПКО = Элементы.СписокПКО.ТекущиеДанные;
		ТекущееПКО = Элементы.СписокПКО.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	УстановитьОтборыЗависимыхПравил();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПКОПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.Источник.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не указана конфигурация-источник!",,"Источник", "Объект", Отказ);
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Отказ = Истина;
		ТекстВопроса = "Перед началом добавления правил конвертации объектов учетную запись обмена данными нужно записать. Продолжить?";
		РежимВопроса = РежимДиалогаВопрос.ДаНет;
		ОписаниеОповещения = Новый ОписаниеОповещения("СписокПКОПередНачаломДобавленияЗавершение", 
		ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимВопроса);
		
	ИначеЕсли НЕ Группа Тогда
		
		Отказ = Истина;
		мПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец, КонфигурацияИсточник", Объект.Ссылка, Объект.Источник));
		ОткрытьФорму("Справочник.ПравилаКонвертацииОбъектов.Форма.ФормаЭлемента", 
		мПараметрыФормы, 
		Элементы.СписокПКО,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения вопроса.
//
&НаКлиенте
Процедура СписокПКОПередНачаломДобавленияЗавершение(РезультатВпроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВпроса = КодВозвратаДиалога.Да Тогда
		Если ЭтотОбъект.Записать() Тогда
			мПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец, КонфигурацияИсточник", Объект.Ссылка, Объект.Источник));
			ОткрытьФорму("Справочник.ПравилаКонвертацииОбъектов.Форма.ФормаЭлемента", 
			мПараметрыФормы, 
			Элементы.СписокПКО,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //СписокПКОПередНачаломДобавленияЗавершение

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокПКС

 &НаКлиенте
Процедура СписокПКСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ТекущееПКО.Пустая() Тогда
		Отказ = Истина;
		ПредупреждениеАсинх("Отсутствуют правила конвертации объектов!");
	ИначеЕсли ТекДанныеСписокПКО.ЭтоГруппа Тогда
		Отказ = Истина;
		ПредупреждениеАсинх("Группа не может быть владельцем правил!");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокПКЗ

&НаКлиенте
Процедура СписокПКЗПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ТекущееПКО.Пустая() Тогда
		Отказ = Истина;
		ПредупреждениеАсинх("Отсутствуют правила конвертации объектов!");
	ИначеЕсли ТекДанныеСписокПКО.ЭтоГруппа Тогда
		Отказ = Истина;
		ПредупреждениеАсинх("Группа не может быть владельцем правил!");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ПроверитьПодключение(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ТекстВопроса = "Нужно сохранить учетную запись перед проверкой подключения. Продолжить?";
		РежимВопроса = РежимДиалогаВопрос.ДаНет;
		Результат = Ждать ВопросАсинх(ТекстВопроса, РежимВопроса);
		Если Результат = КодВозвратаДиалога.Да Тогда
			ЭтотОбъект.Записать();
			ВыполнитьПроверкуПодключения();
		КонецЕсли;
	Иначе
		ВыполнитьПроверкуПодключения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОписаниеКонфигурации(Команда)
	
	СтруктураПараметров = Новый Структура("парКонфигурация", Объект.Источник);
	ОткрытьФорму("Обработка.ЗагрузкаСтруктурыКонфигурации.Форма", СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеКонфигурации(Команда)
	Сообщить("Этот функционал в процессе разработки");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторКода(Команда)
	
	ТекстОбработчика = Элементы[ТекущийАктивныйОбработчик + "Редактор"].Документ.defaultView.editor.getValue();
	мПараметры = Новый Структура("ТекстОбработчика", ТекстОбработчика);
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияРедактораКода", ЭтотОбъект);
	ОткрытьФорму("Обработка.СМП_РедакторКода.Форма", мПараметры, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик оповещения.
//
&НаКлиенте
Процедура ПослеЗакрытияРедактораКода(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Элементы[ТекущийАктивныйОбработчик + "Редактор"].Документ.defaultView.editor.setValue(РезультатЗакрытия);
	 
	Если РезультатЗакрытия <> Объект[ТекущийАктивныйОбработчик] Тогда
		Объект[ТекущийАктивныйОбработчик] = РезультатЗакрытия;
		Модифицированность = Истина;
		ОбновитьНаличиеОбработчиковАлгоритмов();
	КонецЕсли;
	
КонецПроцедуры //ПослеЗакрытияРедактораКода

&НаКлиенте
Асинх Процедура ОписаниеВыгружаемыхДанных(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		
		ТекстВопроса = "Нужно сохранить учетную запись перед получением описания данных. Продолжить?";
		РежимВопроса = РежимДиалогаВопрос.ДаНет;
		Результат = Ждать ВопросАсинх(ТекстВопроса, РежимВопроса);
		Если Результат = КодВозвратаДиалога.Да Тогда
			ЭтотОбъект.Записать();
			ПолучитьОписаниеВыгружаемыхДанных();
		КонецЕсли;
	Иначе
		ПолучитьОписаниеВыгружаемыхДанных();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры

// Выполняет установку видимости элементов формы.
//
&НаСервере
Процедура УстановитьВидимость()
	
	ЭтоОтправка   = (Объект.НастройкаОбмена = ПредопределенноеЗначение("Перечисление.СМП_НастройкиОбменов.ДляОтправки"));
	ЭтоПолучение  = (Объект.НастройкаОбмена = ПредопределенноеЗначение("Перечисление.СМП_НастройкиОбменов.ДляПолучения"));
	ЭтоФайл 	  = (Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.СМП_ВидыТранспортовОбмена.Файл"));
	ЭтоХттпСервис = (Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.СМП_ВидыТранспортовОбмена.ХттпСервис"));
	ЭтоКом 		  = (Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.СМП_ВидыТранспортовОбмена.Ком"));
	
	// Отправка
	Элементы.ДатаНачалаВыгрузкиДокументов.Видимость = ЭтоОтправка;
	Элементы.ГруппаНастройкиДляОтправки.Видимость = ЭтоОтправка;
	Элементы.ПроверитьПодключение.Видимость = ЭтоОтправка;
	Элементы.СтраницаОбъектыКВыгрузке.Видимость = ЭтоОтправка;
	Элементы.ПолучитьОписаниеВыгружаемыхДанных.Видимость = ЭтоОтправка;
	
	Элементы.ФайлКаталогОбмена.Видимость = ЭтоФайл;
	Элементы.ХттпСервисАдресПодключения.Видимость = ЭтоХттпСервис;
	Элементы.КомИмяСервера1СПредприятия.Видимость = ЭтоКом;
	Элементы.КомИмяИнформационнойБазыНаСервере1СПредприятия.Видимость = ЭтоКом;
	Элементы.ИмяПользователя.Видимость = ЭтоХттпСервис Или ЭтоКом;
	Элементы.ПарольПользователя.Видимость = ЭтоХттпСервис Или ЭтоКом;
	
	// Получение
	Элементы.ГруппаНастройкиДляПолучения.Видимость = ЭтоПолучение;
	Элементы.СтраницаНастройкиЗагрузки.Видимость = ЭтоПолучение;
	Элементы.СтраницаОбработчикиСобытий.Видимость = ЭтоПолучение;
	
	Элементы.ГруппаОтправитель.Видимость = ЭтоОтправка;
	Элементы.ГруппаПолучатель.Видимость = ЭтоПолучение;
	
КонецПроцедуры //УстановитьВидимость

// Устанавливает доступность таблицы компоновщика настроек КД на форме.
//
&НаКлиенте
Процедура УстановитьДоступностьКомпоновщикаНастроек()
	
	Элементы.КомпоновщикОтборовНастройкиОтбор.ТолькоПросмотр = НЕ ТекДанныеОбъектыКВыгрузке.Пометка;
	
КонецПроцедуры //УстановитьДоступностьКомпоновщикаНастроек

// Заполняет таблицу объектов к выгрузке на форме при создании на сервере.
//
&НаСервере
Процедура ЗаполнитьОбъектыКВыгрузкеНаФорме() 
	
	Картинка = БиблиотекаКартинок.ДокументОбъект;
	тзДок = ОбъектыКВыгрузкеНаФорме.Выгрузить();
	тзДок.Очистить();
	мдДокументы = Метаданные.Документы;
	
	Для Каждого мдДок Из мдДокументы Цикл
		НоваяСтрока = тзДок.Добавить();
		НоваяСтрока.Картинка = Картинка;
		НоваяСтрока.ПолноеИмяОбъекта = мдДок.ПолноеИмя();
		НоваяСтрока.Синоним = мдДок.Представление();
		НоваяСтрока.ИмяОбъекта = СтрЗаменить(НоваяСтрока.ПолноеИмяОбъекта, ".", "");
	КонецЦикла;
	
	Если Объект.ОбъектыКВыгрузке.Количество() > 0 Тогда
		
		СпрОбъект = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.СМП_УчетныеЗаписиОбменов"));
		СпрОбъект.ПолучитьСКДИзТабЧасти(тзДок, КоллекцияСКД, ЭтотОбъект.УникальныйИдентификатор);
		
	КонецЕсли;
	
	тзДок.Сортировать("Синоним");
	ОбъектыКВыгрузкеНаФорме.Загрузить(тзДок);
	
КонецПроцедуры //ЗаполнитьОбъектыКВыгрузкеНаФорме

// Заполняет таблицу объектов к выгрузке перед записью элемента спр..
//
// Параметры:
//   ТекущийОбъект - СправочникОбъект.СМП_УчетныеЗаписиОбменов - элемент в котором обновляется список объектов к выгрузке.
//
&НаСервере
Процедура ОбновитьОбъектыКВыгрузке(ТекущийОбъект) 
	
	тзОбъекты = ОбъектыКВыгрузкеНаФорме.Выгрузить(Новый Структура("Пометка", Истина));
	Если тзОбъекты.Количество() > 0 Тогда
		ТекущийОбъект.ОбъектыКВыгрузке.Загрузить(тзОбъекты);
		ТекущийОбъект.ПоместитьСКДВТабЧасть(КоллекцияСКД);
	Иначе
		ТекущийОбъект.ОбъектыКВыгрузке.Очистить();
	КонецЕсли;
	
КонецПроцедуры //ОбновитьОбъектыКВыгрузке

// Выполняет установку отбора для ПКО.
//
&НаСервере
Процедура УстановитьОтборСписокПКО() 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	СписокПКО, 
	"Владелец", 
	Объект.Ссылка, 
	ВидСравненияКомпоновкиДанных.Равно,
	, 
	Истина, 
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры //УстановитьОтборПКО

// Выполняет установку отборов ПКС, ПКЗ.
//
&НаКлиенте
Процедура УстановитьОтборыЗависимыхПравил() 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	СписокПКС, 
	"Владелец", 
	ТекущееПКО, 
	ВидСравненияКомпоновкиДанных.Равно,
	, 
	Истина, 
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	СписокПКЗ, 
	"Владелец", 
	ТекущееПКО, 
	ВидСравненияКомпоновкиДанных.Равно,
	, 
	Истина, 
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры //УстановитьОтборыЗависимыхПравил

// Выполняет настройку оформления реквизита "ИдентификаторБазы".
//
// Параметры:
//   элИдентификаторБазы - ПолеФормы - оформляемое поле.
//   НастройкаОбмена - ПеречислениеСсылка.СМП_НастройкиОбменов - значение настройки обмена (выгрузка/загрузка).
//
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОформлениеИдентификаторБазы(элИдентификаторБазы, НастройкаОбмена) 
	
	
	Если НастройкаОбмена = ПредопределенноеЗначение("Перечисление.СМП_НастройкиОбменов.ДляОтправки") Тогда
		
		элИдентификаторБазы.Заголовок = "ID обмена-получателя";
		
	ИначеЕсли НастройкаОбмена = ПредопределенноеЗначение("Перечисление.СМП_НастройкиОбменов.ДляПолучения") Тогда
		
		элИдентификаторБазы.Заголовок = "ID текущего обмена";
		
	КонецЕсли;
	
	
КонецПроцедуры //НастроитьОформлениеИдентификаторБазы

// Выполняет проверку подключения.
//
// Параметры:
// нет.
//
&НаКлиенте
Процедура ВыполнитьПроверкуПодключения() 
	
	Если Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.СМП_ВидыТранспортовОбмена.Файл") Тогда
		
		Если ПустаяСтрока(Объект.ФайлКаталогОбмена) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю("Укажите путь к каталогу обмена!",, "ФайлКаталогОбмена", "Объект");
			Возврат;
			
		Иначе
			
			Попытка
				АдресКаталога = Объект.ФайлКаталогОбмена + "\" + Строка(Новый УникальныйИдентификатор);
				СоздатьКаталог(АдресКаталога);
				УдалитьФайлы(АдресКаталога);
				ОбщегоНазначенияКлиент.СообщитьПользователю("Каталог доступен для записи",, "ФайлКаталогОбмена", "Объект");
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.СМП_ВидыТранспортовОбмена.ХттпСервис") Тогда
		
		Если ПустаяСтрока(Объект.ХттпСервисАдресПодключения) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Укажите адрес подключения к базе-приемнику",, "ХттпСервисАдресПодключения", "Объект");
			Возврат;
		ИначеЕсли ПустаяСтрока(Объект.ИмяПользователя) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Укажите имя пользователя",, "ИмяПользователя", "Объект");
			Возврат;
		//ИначеЕсли ПустаяСтрока(Объект.ПарольПользователя) Тогда
		//	ОбщегоНазначенияКлиент.СообщитьПользователю("Укажите пароль пользователя",, "ПарольПользователя", "Объект");
		//	Возврат;
		Иначе
			ПараметрыФункции = Новый Структура("АдресПодключения, ИдентификаторОбмена, ИмяПользователя, ПарольПользователя", 
				Объект.ХттпСервисАдресПодключения, 
				Объект.ИдентификаторОбмена,
				Объект.ИмяПользователя,
				Объект.ПарольПользователя);
			ДлительнаяОперация = ЗапуститьПроверкуПодключенияВФоне(ЭтотОбъект.УникальныйИдентификатор, ПараметрыФункции);
			
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
			ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
			ПараметрыОжидания.ВыводитьСообщения = Истина;
			ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
			ПараметрыОжидания.ТекстСообщения = "Проверка подключения к базе-приемнику...";
			ПараметрыОжидания.ОповещениеПользователя.Текст = "Выполнена проверка подключения";
			ПараметрыОжидания.ОповещениеПользователя.Пояснение = нСтр("ru='Завершено.'; uk='Завершено.'");
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьПроверкуПодключенияЗавершение", ЭтотОбъект);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ВыполнитьПроверкуПодключения

// Обработчик оповещения.
//
// Параметры:
//   Результат - Структура - результат выполнения фонового задания.
//   ДополнительныеПараметры - Произвольный - параметры указанные при создании оповещения.
//
&НаКлиенте
Процедура ВыполнитьПроверкуПодключенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(нСтр("ru='Фоновое задание отменено.'; uk='Фонове завдання відмінене.'"));
	Иначе
		Если Результат.Статус = "Ошибка" Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки + Символы.ПС + Результат.ПодробноеПредставлениеОшибки); 
		ИначеЕсли Результат.Статус = "Выполнено" Тогда 
			Для Каждого Сообщение Из Результат.Сообщения Цикл
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ВыполнитьПроверкуПодключенияЗавершение

// Возвращает информацию по выполненю фонового задания.
//
// Параметры:
//   ИдентификаторФормы - УникальныйИдентификатор - УИД формы для возврата результата выполнения фонового задания
//   ПараметрыФункции - Структура:
//						* АдресПодключения - Строка - Адрес публикации базы-приемника
//						* ИдентификаторОбмена - Строка - идентификатор учетной записи обмена данными в базе-приемнике
//
// Возвращаемое значение:
//   Структура - см. ДлительныеОперации.ВыполнитьФункцию().
//
&НаСервереБезКонтекста
Функция ЗапуститьПроверкуПодключенияВФоне(ИдентификаторФормы, ПараметрыФункции) 
	
	мПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	мПараметрыВыполнения.НаименованиеФоновогоЗадания = "Онлайн обмен данными: проверка подключения по адресу " + ПараметрыФункции.АдресПодключения;
	мПараметрыВыполнения.ЗапуститьВФоне = Истина;
	мПараметрыВыполнения.КлючФоновогоЗадания = ИдентификаторФормы;
	
	Результат = ДлительныеОперации.ВыполнитьФункцию(мПараметрыВыполнения, 
	"СМП_СобытияОтправкиДанных.ПолучитьРезультатПроверкиПодключенияПоХТТП", ПараметрыФункции);
	
	Возврат Результат;
	
КонецФункции // ЗапуститьПроверкуПодключенияВФоне

// Возвращает описание правил конвертации в формате JSON.
//
// Параметры:
//   УчетнаяЗаписьОбмена - СправочникСсылка.СМП_УчетныеЗаписиОбменов - ссылка на учетную запись 
//   по которой нужно сформировать описание правил конвертации для использования на стороне базы-отправителя.
//
// Возвращаемое значение:
//   Строка - строка с описанием правил конвертации в формате JSON
//
&НаСервереБезКонтекста
Функция ПолучитьОписаниеДанныхИсточника(УчетнаяЗаписьОбмена) 
	
	ОписаниеПравил = Справочники.СМП_УчетныеЗаписиОбменов.СформироватьОписаниеВыгружаемыхДанных(УчетнаяЗаписьОбмена); 
	Возврат ОписаниеПравил;
	
КонецФункции // ПолучитьОписаниеДанныхИсточника

// выполняет запуск фонового задания для получения описания выгружаемых данных базы-источника.
//
// Параметры:
//   нет.
//
&НаКлиенте
Процедура ПолучитьОписаниеВыгружаемыхДанных() 
	
	Если ПустаяСтрока(Объект.ИдентификаторОбмена) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			"Укажите идентификатор учетной записи базы-приемника",, "ИдентификаторОбмена", "Объект");
		Возврат;
		
	Иначе
		
		ПараметрыФункции = Новый Структура("АдресПодключения, ИдентификаторОбмена, ИмяПользователя, ПарольПользователя", 
				Объект.ХттпСервисАдресПодключения, 
				Объект.ИдентификаторОбмена,
				Объект.ИмяПользователя,
				Объект.ПарольПользователя);
		ДлительнаяОперация = ЗапуститьПолучениеОписанияВыгружаемыхДанных(ЭтотОбъект.УникальныйИдентификатор, ПараметрыФункции);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
		ПараметрыОжидания.ТекстСообщения = "Получение описания выгружаемых данных...";
		ПараметрыОжидания.ОповещениеПользователя.Текст = "Получено описание выгружаемых данных";
		ПараметрыОжидания.ОповещениеПользователя.Пояснение = нСтр("ru='Завершено.'; uk='Завершено.'");
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьОписаниеВыгружаемыхДанныхЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры //ПолучитьОписаниеВыгружаемыхДанных

// Возвращает информацию по выполненю фонового задания.
//
// Параметры:
//   ИдентификаторФормы - УникальныйИдентификатор - УИД формы для возврата результата выполнения фонового задания
//   ПараметрыФункции - Структура:
//						* АдресПодключения - Строка - Адрес публикации базы-приемника
//						* ИдентификаторОбмена - Строка - идентификатор учетной записи обмена данными в базе-приемнике
//
// Возвращаемое значение:
//   Структура - см. ДлительныеОперации.ВыполнитьФункцию().
//
&НаСервереБезКонтекста
Функция ЗапуститьПолучениеОписанияВыгружаемыхДанных(ИдентификаторФормы, ПараметрыФункции) 
	
	мПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	мПараметрыВыполнения.НаименованиеФоновогоЗадания = 
		"Онлайн обмен данными: получение описания выгружаемых данных согласно правил конвертации базы-источника: " + ПараметрыФункции.АдресПодключения;
	мПараметрыВыполнения.ЗапуститьВФоне = Истина;
	мПараметрыВыполнения.КлючФоновогоЗадания = ИдентификаторФормы;
	
	Результат = ДлительныеОперации.ВыполнитьФункцию(мПараметрыВыполнения, 
	"СМП_СобытияОтправкиДанных.ПолучитьОписаниеВыгружаемыхДанныхИзПриемника", ПараметрыФункции);
	
	Возврат Результат;
	
КонецФункции // ЗапуститьПроверкуПодключенияВФоне

// Обработчик оповещения.
//
// Параметры:
//   Результат - Структура - результат выполнения фонового задания.
//   ДополнительныеПараметры - Произвольный - параметры указанные при создании оповещения.
//
&НаКлиенте
Процедура ПолучитьОписаниеВыгружаемыхДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(нСтр("ru='Фоновое задание отменено.'; uk='Фонове завдання відмінене.'"));
	Иначе
		Если Результат.Статус = "Ошибка" Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки + Символы.ПС + Результат.ПодробноеПредставлениеОшибки); 
		ИначеЕсли Результат.Статус = "Выполнено" Тогда 
			Для Каждого Сообщение Из Результат.Сообщения Цикл
				Сообщение.Сообщить();
			КонецЦикла;
			
			СтрокаОписание = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			Объект.ОписаниеВыгружаемыхДанных = СтрокаОписание;
			ЗаполнитьОписаниеВыгружаемыхОбъектовОтправитель();
			Модифицированность = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПолучитьОписаниеВыгружаемыхДанныхЗавершение

// .
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьОписаниеВыгружаемыхОбъектовОтправитель() 
	
	Если ПустаяСтрока(Объект.ОписаниеВыгружаемыхДанных) Тогда
		Возврат;
	КонецЕсли;
	
	сРезультатЧтения = Неопределено;
	
	ЧтениеДж = Новый ЧтениеJSON;
	ЧтениеДж.УстановитьСтроку(Объект.ОписаниеВыгружаемыхДанных);
	
	Попытка
		сРезультатЧтения = ПрочитатьJSON(ЧтениеДж, Истина);
		ЧтениеДж.Закрыть();
	Исключение
	    Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если сРезультатЧтения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОписаниеВыгружаемыхОбъектов.Очистить();
	
	Для Каждого ДанныеИсточника Из сРезультатЧтения Цикл
		
		сОписанияПравил = ДанныеИсточника.Значение;
		
		СтрокаОписание = Объект.ОписаниеВыгружаемыхОбъектов.Добавить();
		СтрокаОписание.ТипОбъекта = ДанныеИсточника.Ключ;
		
		ИменаПравил = сОписанияПравил["_ИменаПравил"];
		МассивИмен = СтрРазделить(ИменаПравил, ",", Ложь);
		
		Если МассивИмен.Количество() = 1 Тогда
			СтрокаОписание.ИмяПравилаПоУмолчанию = ИменаПравил;
		Иначе
			СтрокаОписание.НесколькоПравил = Истина;
			СтрокаОписание.ИменаПравил = ИменаПравил;
		КонецЕсли;
		
		сОписанияПравил.Удалить("_ИменаПравил");
		
		ЗаписьДж = Новый ЗаписьJSON;
		ЗаписьДж.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьДж, сОписанияПравил);
		СтрОписание = ЗаписьДж.Закрыть();
		
		СтрокаОписание.ОписаниеПравил = СтрОписание;
		
	КонецЦикла;
	
	Объект.ОписаниеВыгружаемыхОбъектов.Сортировать("ТипОбъекта");
	
КонецПроцедуры //ЗаполнитьОписаниеВыгружаемыхОбъектовОтправитель

// .
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьОписаниеВыгружаемыхДанныхДерево() 
	
	Если Объект.НастройкаОбмена = Перечисления.СМП_НастройкиОбменов.ДляПолучения Тогда
		
		Объект.ОписаниеВыгружаемыхДанных = Справочники.СМП_УчетныеЗаписиОбменов.ОписаниеВыгружаемыхДанныхДерево(Объект.Ссылка);
		ЗаполнитьДеревоДанныхНаФорме();
		
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьОписаниеВыгружаемыхДанныхДерево

// .
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьДеревоДанныхНаФорме() 
	
	Если ПустаяСтрока(Объект.ОписаниеВыгружаемыхДанных) Тогда
		Возврат;
	КонецЕсли;
	
	сОписанияРезультат = Неопределено;
	
	ЧтениеДж = Новый ЧтениеJSON;
	ЧтениеДж.УстановитьСтроку(Объект.ОписаниеВыгружаемыхДанных);
	
	Попытка
		сОписанияРезультат = ПрочитатьJSON(ЧтениеДж, Истина);
		ЧтениеДж.Закрыть();
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	ДеревоОписаний = РеквизитФормыВЗначение("ОписаниеВыгружаемыхДанныхДерево", Тип("ДеревоЗначений"));
	ДеревоОписаний.Строки.Очистить();
	
	Для Каждого сДанныеОбъекта Из сОписанияРезультат Цикл
		
		СтрокаТипИсточника = ДеревоОписаний.Строки.Добавить();
		СтрокаТипИсточника.Наименование = сДанныеОбъекта.Ключ;
		
		сОписанияПравил = сДанныеОбъекта.Значение;
		ИменаПравил = сОписанияПравил["_ИменаПравил"];
		МассивИмен = СтрРазделить(ИменаПравил, ",", Ложь);
		
		Для Каждого ИмяПравила Из МассивИмен Цикл
			
			сДанныеПравила = сОписанияПравил[ИмяПравила];
			
			СтрокаПравило = СтрокаТипИсточника.Строки.Добавить();
			СтрокаПравило.Наименование = ИмяПравила;
			
			СтрокаСвойстваПоиска = СтрокаПравило.Строки.Добавить();
			СтрокаСвойстваПоиска.Наименование = "_СвойстваПоиска";
			
			сСвойстваПоиска = сДанныеПравила["_СвойстваПоиска"];
			Для Каждого свПоиск Из сСвойстваПоиска Цикл
				стрПоиск = СтрокаСвойстваПоиска.Строки.Добавить();
				стрПоиск.Наименование = свПоиск.Ключ;
				стрПоиск.СвойствоИмяПКО = свПоиск.Значение;
			КонецЦикла;
			
			СтрокаСвойства = СтрокаПравило.Строки.Добавить();
			СтрокаСвойства.Наименование = "_Свойства";
			
			сСвойства = сДанныеПравила["_Свойства"];
			Для Каждого св Из сСвойства Цикл
				стрСвойство = СтрокаСвойства.Строки.Добавить();
				стрСвойство.Наименование = св.Ключ;
				стрСвойство.СвойствоИмяПКО = св.Значение;
			КонецЦикла;
			
			СтрокаТабЧасти = СтрокаПравило.Строки.Добавить();
			СтрокаТабЧасти.Наименование = "_ТабличныеЧасти";
			
			сТабЧасти = сДанныеПравила["_ТабличныеЧасти"]; 
			Для Каждого сДанныеТЧ Из сТабЧасти Цикл
				
				стрТЧ = СтрокаТабЧасти.Строки.Добавить();
				стрТЧ.Наименование = сДанныеТЧ.Ключ;
				
				сСвойстваТЧ = сДанныеТЧ.Значение;
				Для Каждого РеквизитТЧ Из сСвойстваТЧ Цикл
					
					стрРеквизитТЧ = стрТЧ.Строки.Добавить();
					стрРеквизитТЧ.Наименование = РеквизитТЧ.Ключ;
					стрРеквизитТЧ.СвойствоИмяПКО = РеквизитТЧ.Значение;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоОписаний, "ОписаниеВыгружаемыхДанныхДерево");
	
КонецПроцедуры //ЗаполнитьДеревоДанныхНаФорме


#Область РАБОТА_С_ОТБОРАМИ_СКД

// Запускает создание СКД для документа.
//
// Параметры:
//   ИмяДокумента - Строка - имя документа, как оно задано в конфигураторе.
//
&НаКлиенте
Асинх Процедура СоздатьСКДНаКлиенте() 
	
	Если ТекДанныеОбъектыКВыгрузке <> Неопределено Тогда
		РезультатСоздания = Ждать СоздатьСКД();
		Сообщить(РезультатСоздания);
	КонецЕсли;
	
КонецПроцедуры //СоздатьСКДНаКлиенте

// Возвращает имя документа для которого создана СКД.
//
// Параметры:
//   ИмяДокумента - Строка - имя документа, как оно задано в конфигураторе.
//
// Возвращаемое значение:
//   Строка - Имя документа для которого создана СКД
//
&НаКлиенте
Асинх Функция СоздатьСКД() 
	
	СоздатьСКДДляВыгрузкиДокумента(ТекДанныеОбъектыКВыгрузке.ПолноеИмяОбъекта, ТекДанныеОбъектыКВыгрузке.ИмяОбъекта);
	ТекстСообщения = СтрШаблон("Созданы настройки для документа ""%1""", ТекДанныеОбъектыКВыгрузке.Синоним);
	Возврат ТекстСообщения;
	
КонецФункции // СоздатьСКДАсинх

// Создает СКД для отбора документов при выгрузке.
//
// Параметры:
//   ИмяДокумента - Строка - имя документа, как оно задано в конфигураторе.
//
&НаСервере
Процедура СоздатьСКДДляВыгрузкиДокумента(ПолноеИмяОбъекта, ИмяСКД) 
	
	СКД = Справочники.СМП_УчетныеЗаписиОбменов.ПолучитьСКД(ПолноеИмяОбъекта);
	//ИнициализироватьКомпоновщик(СКД);
	АдресСхемы = ПоместитьВоВременноеХранилище(СКД, ЭтотОбъект.УникальныйИдентификатор);
	КоллекцияСКД.Вставить(ИмяСКД, АдресСхемы);
	
КонецПроцедуры //СоздатьСКДДляВыгрузкиДокумента

// Выполняет инициализацию компоновщика настроек компоновки данных для выбранного или выделенного документа.
//
// Параметры:
//   ИсточникНастроек - СхемаКомпоновкиДанных, АдресВременногоХранилища - источник настроек для компоновщика.
//
&НаСервере
Процедура ИнициализироватьКомпоновщик(ИсточникНастроек)
	
	Если ТипЗнч(ИсточникНастроек) = Тип("СхемаКомпоновкиДанных") Тогда
		НастройкиКомпоновкиДанных = ИсточникНастроек.НастройкиПоУмолчанию;
	ИначеЕсли ЭтоАдресВременногоХранилища(ИсточникНастроек) Тогда
		НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(ИсточникНастроек).НастройкиПоУмолчанию;
	КонецЕсли;
	
	КомпоновщикОтборов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ИсточникНастроек));
	КомпоновщикОтборов.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	КомпоновщикОтборов.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры //ИнициализироватьКомпоновщик

// Обновляет список отборов в СКД для выбранного документа.
//
// Параметры:
//   ИмяДокумента - Строка - имя документа вида "ДокументАвансовыйОтчет", используется как ключ в структуре "КоллекцияСКД".
//
&НаКлиенте
Процедура ОбновитьОтборыСКД(ИмяДокумента) 
	
	АдресСхемыКД = Неопределено;
	Если КоллекцияСКД.Свойство(ИмяДокумента, АдресСхемыКД) Тогда
		
		Если ЭтоАдресВременногоХранилища(АдресСхемыКД) Тогда
			ПерезаполнитьОтборыСКДНаСервере(ИмяДокумента, АдресСхемыКД);
		Иначе
			Сообщить("Неверный адрес временного хранилища схемы КД");
		КонецЕсли;
	Иначе
		
		Сообщить("В коллекции отсутствует СКД для документа " + ИмяДокумента);
		
	КонецЕсли;
	
КонецПроцедуры //ОбновитьОтборыСКД

// Перезаполняет отборы СКД для конкретного документа.
//
// Параметры:
//   ИмяДокумента - Строка - имя документа вида "ДокументАвансовыйОтчет", используется как ключ в структуре "КоллекцияСКД".
//   АдресСхемыКД - Строка - адрес временного хранилища СКД.
//
&НаСервере
Процедура ПерезаполнитьОтборыСКДНаСервере(ИмяДокумента, АдресСхемыКД) 
	
	СКД = ПолучитьИзВременногоХранилища(АдресСхемыКД);
	Если СКД = Неопределено Тогда
		Сообщить("Не удалось обновить значения отборов: для документа " + ИмяДокумента + " отсутствует СКД во временном хранилище");
		Возврат;
	КонецЕсли;
	
	ОтборыКД = СКД.НастройкиПоУмолчанию.Отбор.Элементы;
	ОтборыКД.Очистить();
	
	ОтборыКомпоновщик = КомпоновщикОтборов.Настройки.Отбор.Элементы;
	
	Если ОтборыКомпоновщик.Количество() > 0 Тогда
		ЗаполнитьКоллекциюОтборов(ОтборыКД, ОтборыКомпоновщик);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СКД, АдресСхемыКД);
	
КонецПроцедуры //ПерезаполнитьОтборыСКДНаСервере

// Заполняет коллекцию отборов КД.
//
// Параметры:
//   КоллекцияПриемник - КоллекцияЭлементовОтбораКомпоновкиДанных - 
//   КоллекцияИсточник - КоллекцияЭлементовОтбораКомпоновкиДанных -  
//
&НаСервере
Процедура ЗаполнитьКоллекциюОтборов(КоллекцияПриемник, КоллекцияИсточник) 
	
	ТипЭлемент = Тип("ЭлементОтбораКомпоновкиДанных");
	ТипГруппа = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
	
	Для Каждого ЭлементИсточник Из КоллекцияИсточник Цикл
		
		Если ТипЗнч(ЭлементИсточник) = ТипГруппа Тогда
			ЭлементПриемник = КоллекцияПриемник.Добавить(ТипГруппа);
			ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
			ЗаполнитьКоллекциюОтборов(ЭлементПриемник.Элементы, ЭлементИсточник.Элементы);
		Иначе
			ЭлементПриемник = КоллекцияПриемник.Добавить(ТипЭлемент);
			ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьКоллекциюОтборов

#КонецОбласти

#Область РЕДАКТОР_КОДА

&НаКлиенте
Процедура ЗагрузитьРедакторКода(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	
	ДанныеПолей = Новый Соответствие;
	ДанныеПолей.Вставить("АлгоритмПередПолучениемИзмененныхОбъектовРедактор", Объект.АлгоритмПередПолучениемИзмененныхОбъектов);
	ДанныеПолей.Вставить("АлгоритмПередКонвертациейОбъектаРедактор", Объект.АлгоритмПередКонвертациейОбъекта);
	ДанныеПолей.Вставить("АлгоритмПередЗагрузкойДанныхРедактор", Объект.АлгоритмПередЗагрузкойДанных);
	ДанныеПолей.Вставить("АлгоритмПослеЗагрузкиПараметровРедактор", Объект.АлгоритмПослеЗагрузкиПараметров);
	ДанныеПолей.Вставить("АлгоритмПередЗагрузкойОбъектаРедактор", Объект.АлгоритмПередЗагрузкойОбъекта);
	ДанныеПолей.Вставить("АлгоритмПриПолученииИнформацииОбУдаленииРедактор", Объект.АлгоритмПриПолученииИнформацииОбУдалении);
	ДанныеПолей.Вставить("АлгоритмПослеЗагрузкиОбъектаРедактор", Объект.АлгоритмПослеЗагрузкиОбъекта);
	ДанныеПолей.Вставить("АлгоритмПослеЗагрузкиДанныхРедактор", Объект.АлгоритмПослеЗагрузкиДанных);
	СМП_РедакторКодаКлиент.ЗагрузитьРедактор(ЭтотОбъект, ДанныеПолей, ИмяКаталогаВременныхФайлов);
	
	Для Каждого кзДанныеПоля Из данныеПолей Цикл
		ЭтотОбъект.ОбновитьОтображениеДанных(Элементы[кзДанныеПоля.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаличиеОбработчиковАлгоритмов()

	Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПередПолучениемИзмененныхОбъектов)
			Или ЗначениеЗаполнено(Объект.АлгоритмПередКонвертациейОбъекта)
			Или ЗначениеЗаполнено(Объект.АлгоритмПередЗагрузкойДанных)
			Или ЗначениеЗаполнено(Объект.АлгоритмПослеЗагрузкиПараметров)
			Или ЗначениеЗаполнено(Объект.АлгоритмПередЗагрузкойОбъекта)
			Или ЗначениеЗаполнено(Объект.АлгоритмПриПолученииИнформацииОбУдалении)
			Или ЗначениеЗаполнено(Объект.АлгоритмПослеЗагрузкиОбъекта)
			Или ЗначениеЗаполнено(Объект.АлгоритмПослеЗагрузкиДанных)
		Тогда
		Элементы.СтраницаОбработчикиСобытий.Картинка = Картинка;
	Иначе
		Элементы.СтраницаОбработчикиСобытий.Картинка = Новый Картинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПередПолучениемИзмененныхОбъектов) Тогда
		Элементы.СтраницаАлгоритмПередПолучениемИзмененныхОбъектов.Картинка = Картинка;
	Иначе
		Элементы.СтраницаАлгоритмПередПолучениемИзмененныхОбъектов.Картинка = Новый Картинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПередКонвертациейОбъекта) Тогда
		Элементы.СтраницаАлгоритмПередКонвертациейОбъекта.Картинка = Картинка;
	Иначе
		Элементы.СтраницаАлгоритмПередКонвертациейОбъекта.Картинка = Новый Картинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПередЗагрузкойДанных) Тогда
		Элементы.СтраницаАлгоритмПередЗагрузкойДанных.Картинка = Картинка;
	Иначе
		Элементы.СтраницаАлгоритмПередЗагрузкойДанных.Картинка = Новый Картинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПослеЗагрузкиПараметров) Тогда
		Элементы.СтраницаАлгоритмПослеЗагрузкиПараметров.Картинка = Картинка;
	Иначе
		Элементы.СтраницаАлгоритмПослеЗагрузкиПараметров.Картинка = Новый Картинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПередЗагрузкойОбъекта) Тогда
		Элементы.СтраницаАлгоритмПередЗагрузкойОбъекта.Картинка = Картинка;
	Иначе
		Элементы.СтраницаАлгоритмПередЗагрузкойОбъекта.Картинка = Новый Картинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПриПолученииИнформацииОбУдалении) Тогда
		Элементы.СтраницаАлгоритмПриПолученииИнформацииОбУдалении.Картинка = Картинка;
	Иначе
		Элементы.СтраницаАлгоритмПриПолученииИнформацииОбУдалении.Картинка = Новый Картинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПослеЗагрузкиОбъекта) Тогда
		Элементы.СтраницаАлгоритмПослеЗагрузкиОбъекта.Картинка = Картинка;
	Иначе
		Элементы.СтраницаАлгоритмПослеЗагрузкиОбъекта.Картинка = Новый Картинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПослеЗагрузкиДанных) Тогда
		Элементы.СтраницаАлгоритмПослеЗагрузкиДанных.Картинка = Картинка;
	Иначе
		Элементы.СтраницаАлгоритмПослеЗагрузкиДанных.Картинка = Новый Картинка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущийАктивныйОбработчик() 
	
	ИмяТекВкладки = Элементы.СтраницыАлгоритмы.ТекущаяСтраница.Имя;
	ТекущийАктивныйОбработчик = СтрЗаменить(ИмяТекВкладки, "Страница", "");
	
КонецПроцедуры //ОбновитьТекущийАктивныйОбработчик


&НаКлиенте
Процедура АлгоритмПередПолучениемИзмененныхОбъектовРедакторДокументСформирован(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПередПолучениемИзмененныхОбъектовРедакторПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнициализацияФормы

Если КоллекцияСКД = Неопределено Тогда
	КоллекцияСКД = Новый Структура;
КонецЕсли;

#КонецОбласти