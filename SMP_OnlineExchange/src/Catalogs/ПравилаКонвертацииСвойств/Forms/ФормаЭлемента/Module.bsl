
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтруктураПолей = Новый Структура("ОбъектИсточник, ОбъектПриемник, УчетнаяЗаписьОбменаДанными", "Источник", "Приемник", "Владелец");
	РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Владелец, СтруктураПолей);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыВладельца);
	
	Если Не Объект.Родитель.Пустая() Тогда
		РеквизитыРодителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Родитель, "Источник, Приемник");
		ОбъектПриемникТабЧасть = РеквизитыРодителя.Приемник;
		ОтборРодитель = Новый ПараметрВыбора("Отбор.Родитель", РеквизитыРодителя.Источник);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ОтборРодитель);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Источник.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Редактор кода
	#Если ВебКлиент Тогда
		
	#Иначе
		НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ЗагрузитьРедакторКода", ЭтотОбъект));
	#КонецЕсли
	
	ОбновитьТекущийАктивныйОбработчик();
	ОбновитьНаличиеОбработчиковАлгоритмов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Редактор кода
	Объект.АлгоритмПередВыгрузкойСвойства = Элементы.АлгоритмПередВыгрузкойСвойстваРедактор.Документ.defaultView.editor.getValue();
	Объект.АлгоритмПриВыгрузкеСвойства = Элементы.АлгоритмПриВыгрузкеСвойстваРедактор.Документ.defaultView.editor.getValue();
	Объект.АлгоритмПослеВыгрузкиСвойства = Элементы.АлгоритмПослеВыгрузкиСвойстваРедактор.Документ.defaultView.editor.getValue();
	Объект.АлгоритмПередЗагрузкойСвойства = Элементы.АлгоритмПередЗагрузкойСвойстваРедактор.Документ.defaultView.editor.getValue();
	Объект.АлгоритмПриЗагрузкеСвойства = Элементы.АлгоритмПриЗагрузкеСвойстваРедактор.Документ.defaultView.editor.getValue();
	Объект.АлгоритмПослеЗагрузкиСвойства = Элементы.АлгоритмПослеЗагрузкиСвойстваРедактор.Документ.defaultView.editor.getValue();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ЗаписьПравилаКонвертации");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФорм

&НаКлиенте
Процедура ПриемникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ОбъектПриемник) Тогда
		Оповещение = Новый ОписаниеОповещения("ПриемникНачалоВыбораЗавершение", ЭтотОбъект);
		мПараметрыФормы = Новый Структура("ВидОбъектаОбмена, ИмяРодительскогоОбъекта, ИмяТабличнойчастиОбъекта",
		ПредопределенноеЗначение("Перечисление.СМП_ВидыОбъектовОбмена.СвойствоОбъекта"), ОбъектПриемник, ОбъектПриемникТабЧасть);
		ОткрытьФорму("ОбщаяФорма.СМП_ФормаВыбораПриемника", мПараметрыФормы, Элемент,,,, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения.
//
&НаКлиенте
Процедура ПриемникНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		Объект.Приемник = РезультатЗакрытия.Имя;
		Объект.ИмяПриемника = РезультатЗакрытия.Имя;
		Объект.ВидПриемника = ПолучитьВидПриемника(РезультатЗакрытия.Вид);
		МассивТипов = СтрРазделить(РезультатЗакрытия.Тип, ",", Ложь);
		Если МассивТипов.Количество() = 1 Тогда
			Объект.ТипПриемника = МассивТипов[0];
		КонецЕсли;
		
		Если НЕ Модифицированность Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПриемникНачалоВыбораЗавершение

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура СтраницыАлгоритмыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьТекущийАктивныйОбработчик();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьРедакторКода(Команда)
	
	ТекстОбработчика = Элементы[ТекущийАктивныйОбработчик + "Редактор"].Документ.defaultView.editor.getValue();
	мПараметры = Новый Структура("ТекстОбработчика", ТекстОбработчика);
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияРедактораКода", ЭтотОбъект);
	ОткрытьФорму("Обработка.СМП_РедакторКода.Форма", мПараметры, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик оповещения.
//
&НаКлиенте
Процедура ПослеЗакрытияРедактораКода(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Элементы[ТекущийАктивныйОбработчик + "Редактор"].Документ.defaultView.editor.setValue(РезультатЗакрытия);
	
	Если РезультатЗакрытия <> Объект[ТекущийАктивныйОбработчик] Тогда
		Объект[ТекущийАктивныйОбработчик] = РезультатЗакрытия;
		Модифицированность = Истина;
		ОбновитьНаличиеОбработчиковАлгоритмов();
	КонецЕсли;
	
КонецПроцедуры //ПослеЗакрытияРедактораКода

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Редактор кода
&НаКлиенте
Процедура ЗагрузитьРедакторКода(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	
	ДанныеПолей = Новый Соответствие;
	ДанныеПолей.Вставить("АлгоритмПередВыгрузкойСвойстваРедактор", Объект.АлгоритмПередВыгрузкойСвойства);
	ДанныеПолей.Вставить("АлгоритмПриВыгрузкеСвойстваРедактор", Объект.АлгоритмПриВыгрузкеСвойства);
	ДанныеПолей.Вставить("АлгоритмПослеВыгрузкиСвойстваРедактор", Объект.АлгоритмПослеВыгрузкиСвойства);
	ДанныеПолей.Вставить("АлгоритмПередЗагрузкойСвойстваРедактор", Объект.АлгоритмПередЗагрузкойСвойства);
	ДанныеПолей.Вставить("АлгоритмПриЗагрузкеСвойстваРедактор", Объект.АлгоритмПриЗагрузкеСвойства);
	ДанныеПолей.Вставить("АлгоритмПослеЗагрузкиСвойстваРедактор", Объект.АлгоритмПослеЗагрузкиСвойства);
	СМП_РедакторКодаКлиент.ЗагрузитьРедактор(ЭтотОбъект, ДанныеПолей, ИмяКаталогаВременныхФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаличиеОбработчиковАлгоритмов()

	Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
	ПустаяКартинка = Новый Картинка;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПередВыгрузкойСвойства)
		ИЛИ ЗначениеЗаполнено(Объект.АлгоритмПриВыгрузкеСвойства)
		ИЛИ ЗначениеЗаполнено(Объект.АлгоритмПослеВыгрузкиСвойства)
		ИЛИ ЗначениеЗаполнено(Объект.АлгоритмПередЗагрузкойСвойства) 
		ИЛИ ЗначениеЗаполнено(Объект.АлгоритмПриЗагрузкеСвойства) 
		ИЛИ ЗначениеЗаполнено(Объект.АлгоритмПослеЗагрузкиСвойства)
		Тогда
		Элементы.СтраницаОбработчикиСобытий.Картинка = Картинка;
	Иначе
		Элементы.СтраницаОбработчикиСобытий.Картинка = ПустаяКартинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПередВыгрузкойСвойства) Тогда
		Элементы.СтраницаАлгоритмПередВыгрузкойСвойства.Картинка = Картинка;
	Иначе
		Элементы.СтраницаАлгоритмПередВыгрузкойСвойства.Картинка = ПустаяКартинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПриВыгрузкеСвойства) Тогда
		Элементы.СтраницаАлгоритмПриВыгрузкеСвойства.Картинка = Картинка;
	Иначе
		Элементы.СтраницаАлгоритмПриВыгрузкеСвойства.Картинка = ПустаяКартинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПослеВыгрузкиСвойства) Тогда
		Элементы.СтраницаАлгоритмПослеВыгрузкиСвойства.Картинка = Картинка;
	Иначе
		Элементы.СтраницаАлгоритмПослеВыгрузкиСвойства.Картинка = ПустаяКартинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПередЗагрузкойСвойства) Тогда
		Элементы.СтраницаАлгоритмПередЗагрузкойСвойства.Картинка = Картинка;
	Иначе
		Элементы.СтраницаАлгоритмПередЗагрузкойСвойства.Картинка = ПустаяКартинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПриЗагрузкеСвойства) Тогда
		Элементы.СтраницаАлгоритмПриЗагрузкеСвойства.Картинка = Картинка;
	Иначе
		Элементы.СтраницаАлгоритмПриЗагрузкеСвойства.Картинка = ПустаяКартинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПослеЗагрузкиСвойства) Тогда
		Элементы.СтраницаАлгоритмПослеЗагрузкиСвойства.Картинка = Картинка;
	Иначе
		Элементы.СтраницаАлгоритмПослеЗагрузкиСвойства.Картинка = ПустаяКартинка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущийАктивныйОбработчик() 
	
	ИмяТекВкладки = Элементы.СтраницыАлгоритмы.ТекущаяСтраница.Имя;
	ТекущийАктивныйОбработчик = СтрЗаменить(ИмяТекВкладки, "Страница", "");
	
КонецПроцедуры //ОбновитьТекущийАктивныйОбработчик

// Возвращает строковое представление для ВидПриемника.
//
// Параметры:
//   ВидПриемника - ПеречислениеСсылка.ВидыСвойств
// Возвращаемое значение:
//   Строка
//
&НаСервереБезКонтекста
Функция ПолучитьВидПриемника(ВидПриемника) 
	
	Возврат XMLСтрока(ВидПриемника);
	
КонецФункции // ПолучитьВидПриемника

#КонецОбласти
