#Область ПеременныеМодуля
Перем КодОтвета;
Перем ЗаголовкиОтвета;
Перем ТелоОтвета;
Перем ФорматТелаОтвета;
Перем ТелоЗапроса;

Перем ВозвращаемыеДанные Экспорт;

Перем Метод Экспорт;
Перем ВходящиеДанные Экспорт;
Перем ПараметрыЗапроса;
Перем ЗаголовкиЗапроса;
Перем ПараметрыУРЛ;
#КонецОбласти

#Область ОсновныеПроцедуры
Функция ВыполнитьОбработку(СервисЗапрос, Метод) Экспорт
	
	Попытка
		ПроверитьИспользуемыйМетод(Метод);	
		КонвертацияДанныхЗапроса(СервисЗапрос);
		
		ИДПриложения = Неопределено;	
		Если ПараметрыЗапроса.Свойство("appid", ИДПриложения) Тогда
			Обработка = леПодключаемыеОбработчики.ПодключитьОбработку("Обработка"+ИДПриложения);
			Если Обработка = Неопределено Тогда
				КодОтвета = 501;
				ВозвращаемыеДанные = "appid передан не верно или не реализована обработка приложения";
			Иначе
				ПродолжитьВыполнениеОбработки(Обработка);
				ПроверитьРезультатВыполненияОбработки(Обработка);
			КонецЕсли;			
		Иначе
			ВозвращаемыеДанные = ИнструкциКСервису();
		КонецЕсли;		
	Исключение
		КодОтвета = 500;
		ВозвращаемыеДанные = ОписаниеОшибки();
		леЛоггирование.СообщитьОбОшибке(ВозвращаемыеДанные);
	КонецПопытки;
	
	Ответ = ЗавершитьВыполнениеПриложения();
	ВозвращаемыеДанные = Ответ;
	
	Возврат Ответ;
	
КонецФункции

Функция ПроверитьИспользуемыйМетод(Метод)
	
	Если НЕ КодОтвета = 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Метод) Тогда
		КодОтвета = 501;
		ВозвращаемыеДанные = "Метод не реализован";
		леЛоггирование.СообщитьОбОшибке(ВозвращаемыеДанные);
	КонецЕсли;
	
КонецФункции

Функция КонвертацияДанныхЗапроса(СервисЗапрос) Экспорт	
	
	Если НЕ КодОтвета = 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого Параметр Из СервисЗапрос.ПараметрыЗапроса Цикл
		ПараметрыЗапроса.Вставить(Параметр.Ключ, Параметр.Значение);	
	КонецЦикла;
	
	Для Каждого Параметр Из СервисЗапрос.Заголовки Цикл
		Ключ = Параметр.Ключ;
		Ключ = СтрЗаменить(Ключ, "-", "_");
		ЗаголовкиЗапроса.Вставить(Ключ, Параметр.Значение);	
	КонецЦикла;
		
	Для Каждого Параметр Из СервисЗапрос.ПараметрыURL Цикл
		Если ЗначениеЗаполнено(Параметр.Значение) Тогда
			ПараметрыУРЛ.Вставить(Параметр.Ключ, Параметр.Значение);	
		КонецЕсли;
	КонецЦикла;
	
	ТелоЗапроса = СервисЗапрос.ПолучитьТелоКакСтроку();
	Контент = Неопределено;
	//Если ЗаголовкиЗапроса.Свойство("Content_Type", Контент) Тогда
	//	Если НРег(Контент) = "application/json" Тогда
	//		ТелоЗапроса = РаскодироватьСтроку(ТелоЗапроса, СпособКодированияСтроки.КодировкаURL);		
	//		ВходящиеДанные = леРаботаСJSON.ДанныеИзJSON(ТелоЗапроса);
	//	Иначе			
	//		КодОтвета = 415;
	//		ВозвращаемыеДанные = "Неподдерживаемый Content-Type. Сервис может работать только с application/json";
	//		леЛоггирование.СообщитьОбОшибке(ВозвращаемыеДанные);
	//    КонецЕсли;
	//Иначе		
	//	КодОтвета = 415;
	//	ВозвращаемыеДанные = "Неподдерживаемый Content-Type. Сервис может работать только с application/json";
	//	леЛоггирование.СообщитьОбОшибке(ВозвращаемыеДанные);
	//КонецЕсли;
	
	Акцепт = Неопределено;
	Если ЗаголовкиЗапроса.Свойство("Accept", Акцепт) Тогда
		
	КонецЕсли;
	
	Язык = Неопределено;
	Если ЗаголовкиЗапроса.Свойство("Accept_Language", Язык) Тогда
		//КодОтвета = 406;
		//ВозвращаемыеДанные = "Accept-Language не применяется";
	КонецЕсли;
	
	Кодировка = Неопределено;
	Если ЗаголовкиЗапроса.Свойство("Accept_Charset", Кодировка) Тогда
		
	КонецЕсли;
	
	Шифрование = Неопределено;
	Если ЗаголовкиЗапроса.Свойство("Accept_Encoding", Шифрование) Тогда
		
	КонецЕсли;
	
КонецФункции
	
Функция ПродолжитьВыполнениеОбработки(Обработка)
	
	Если НЕ КодОтвета = 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Обработка.ВходящиеДанные    = ВходящиеДанные;
	Обработка.ПараметрыЗапроса  = ПараметрыЗапроса;
	Обработка.ЗаголовкиЗапроса  = ЗаголовкиЗапроса;
	Обработка.ПараметрыУРЛ      = ПараметрыУРЛ;
	Обработка.ДанныеТела        = ТелоЗапроса;
	
	ВозвращаемыеДанные = Обработка.ВыполнитьОбработку();
	
КонецФункции

Функция ПроверитьРезультатВыполненияОбработки(Обработка)
	
	Если НЕ КодОтвета = 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВозвращаемыеДанные = Неопределено Тогда		
	КонецЕсли;
	
	Если НЕ Обработка.ОбработкаВыполненаУспешно Тогда
		ОписаниеОшибки = Обработка.ОписаниеОшибки;
		Если ОписаниеОшибки = "" Тогда
			ОписаниеОшибки = "Описание ошибки не указано";
		КонецЕсли;
		ВозвращаемыеДанные = ОписаниеОшибки;
		КодОтвета = 500;
	КонецЕсли;
	
КонецФункции

Функция ЗавершитьВыполнениеПриложения()	
	
	Ответ = Новый HTTPСервисОтвет(КодОтвета, , ЗаголовкиОтвета);
	
	леРаботаСJSON = Обработки.леJSONКонвертер4.Создать();
	Если ФорматТелаОтвета = "JSON" Тогда
		ТелоОтвета = леРаботаСJSON.ЗаписатьJSON_Расширенная(ВозвращаемыеДанныеСтруктурой());
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета, КодировкаТекста.UTF8);
	Иначе
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета, КодировкаТекста.UTF8);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область Служебные
Функция ПолучитьДатуИзЧисла(Число)	
	
	Возврат дата(1970,1,1,1,0,0) + Число;
	
КонецФункции

Функция ВозвращаемыеДанныеСтруктурой()
	
	Структура = Новый Структура("action, data");
	Структура.action = "no action";
	Структура.data = ВозвращаемыеДанные;
	Возврат Структура;
	
КонецФункции
#КонецОбласти

#Область Инструкции
Функция ИнструкциКСервису()
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(Новый Структура("Параметр1","appid="));
	ПараметрыЗапроса.Добавить(Новый Структура("Параметр2","action="));
	
	Возврат Новый Структура("ПараметрыЗапроса", ПараметрыЗапроса);
	
КонецФункции
#КонецОбласти

#Область Инициализация
КодОтвета = 200;
ЗаголовкиОтвета = Новый Соответствие;
ЗаголовкиОтвета.Вставить("Charset", "utf-8");
ЗаголовкиОтвета.Вставить("Content-type", "text/JSON");

ТекстОноРаботает = "Что-то уже работает!";
ТелоОтвета = "{""data"":"+ТекстОноРаботает+"}";

ФорматТелаОтвета = "JSON";

ВозвращаемыеДанные = ТекстОноРаботает;

ПараметрыУРЛ     = Новый Структура;
ПараметрыЗапроса = Новый Структура;
ЗаголовкиЗапроса = Новый Структура;
#КонецОбласти