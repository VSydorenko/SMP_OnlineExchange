////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Обработчик события "ПриЗаписи" документов для механизма онлайн-обмена.
//
// Параметры:
//   Источник - ДокументОбъект - источник события.
//   Отказ - Булево - флаг отказа от выполнения обработчика.
//
Процедура СМП_ОнлайнОбменРегистрацияДокументаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьРегистрациюДокументаВОчереди(Источник, Отказ);
	
КонецПроцедуры

// Выполняет отправку сообщения.
//
// Параметры:
//   УчетнаязаписьОбмена - СправочникСсылка.СМП_УчетныеЗаписиОбменов - учетная запись обмена для которой обрабатывается сообщение.
//   ДанныеСсылка - ДокументСсылка, СправочникСсылка - ссылочные данные для отправки
//
Процедура ОтправитьСообщение(УчетнаяЗаписьОбмена, ДанныеСсылка) Экспорт
	
	ПакетДанных = СМП_ОнлайнОбмен.ДанныеПоСсылкеВJSON(ДанныеСсылка, Истина);
	НастройкиТранспорта = СМП_ОнлайнОбменПовтИсп.ПолучитьНастройкиТранспортаОбменаДанными(УчетнаяЗаписьОбмена);
	
	Если НастройкиТранспорта.ВидТранспорта = Перечисления.СМП_ВидыТранспортовОбмена.ХттпСервис Тогда
		СМП_СобытияОтправкиДанных.ОтправитьСообщениеЧерезХТТП(ПакетДанных, НастройкиТранспорта);
	ИначеЕсли НастройкиТранспорта.ВидТранспорта = Перечисления.СМП_ВидыТранспортовОбмена.Ком Тогда
		СМП_СобытияОтправкиДанных.ОтправитьСообщениеЧерезКОМ(ПакетДанных, НастройкиТранспорта);
	ИначеЕсли НастройкиТранспорта.ВидТранспорта = Перечисления.СМП_ВидыТранспортовОбмена.Файл Тогда
		СМП_СобытияОтправкиДанных.ОтправитьСообщениеЧерезФайл(ПакетДанных, НастройкиТранспорта);
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры //ОтправитьСообщение

// Выполняет обработку входящего сообщения.
//
// Параметры:
//   УчетнаязаписьОбмена - СправочникСсылка.СМП_УчетныеЗаписиОбменов - учетная запись обмена для которой обрабатывается сообщение.
//   Сообщение - Строка - данные для обработки в формате JSON
//
Процедура ОбработатьВходящееСообщение(УчетнаяЗаписьОбмена, Сообщение) Экспорт
	
	//Путь = "D:\_РобочіФайлиПрограмістів\Y.Holovatyi\LiteExchange\СМП_ОнлайнОбменКонвертацияОбъектов.epf";
	//ЗащитаОД = Новый ОписаниеЗащитыОтОпасныхДействий;
	//ЗащитаОД.ПредупреждатьОбОпасныхДействиях = Ложь;
	//ОбработкаОбъект = ВнешниеОбработки.Создать(Путь, Ложь, ЗащитаОД);
	//ОбработкаОбъект.мУчетнаяЗаписьОбмена = УчетнаяЗаписьОбмена;
	//ОбработкаОбъект.мСтрокаJSON = Сообщение;
	//ОбработкаОбъект.ВыполнитьЗагрузку();
	
	ОбработкаОбъект = Обработки.СМП_ОнлайнОбменКонвертацияОбъектов.Создать();
	ОбработкаОбъект.мУчетнаяЗаписьОбмена = УчетнаяЗаписьОбмена;
	ОбработкаОбъект.мСтрокаJSON = Сообщение;
	ОбработкаОбъект.ВыполнитьЗагрузку();
	
КонецПроцедуры //ОбработатьВходящееСообщение


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет проверку и регистрацию документа в очереди для всех учетных записей онлайн-обменов.
//
// Параметры:
//   Объект - ДокументОбъект - регистрируемый документ.
//   Отказ - Булево - признак возникновения ошибки во время регистрации объекта в очереди:
//    если во время регистрации объекта возникнут ошибки, то этот флаг будет установлен в значение Истина.
//
Процедура ВыполнитьРегистрациюДокументаВОчереди(Объект, Отказ) 
	
	// Получение таблицы Схем компоновок данных для существующих обменов.
	ТаблицаПРД = СМП_ОнлайнОбменПовтИсп.ПолучитьТаблицуПравилРегистрацииДокументов();
	Если ТаблицаПРД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДокумента = Объект.Метаданные().ПолноеИмя();
	ПравилаПоДокументу = ТаблицаПРД.Скопировать(Новый Структура("ИмяДокумента", ИмяДокумента));
	Если ПравилаПоДокументу.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Выполнение проверки по всем подходящим СКД
	// Регистрация документа в очереди к выгрузке по каждому обмену
	Для Каждого СтрокаПравило Из ПравилаПоДокументу Цикл
		
		Если УсловияОтбораУдовлетворены(Объект, СтрокаПравило) Тогда
			
			СМП_ОнлайнОбменУправлениеОчередями.ДобавитьСообщениеВОчередьИсходящих(СтрокаПравило.УчетнаяЗапись, Объект.Ссылка);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ВыполнитьРегистрациюДокументаВОчереди

// Проверяет документ перед регистрацией на предмет соответствия условиям отбора.
//
// Параметры:
//   Объект - ДокументОбъект - документ для проверки.
//   СтрокаПравило - СтрокаТаблицыЗначений - см. СМП_ОнлайнОбменПовтИсп.ИнициализироватьТаблицуПРД()
//
// Возвращаемое значение:
//   Булево - признак удовлетворения условий отбора документом.
//
Функция УсловияОтбораУдовлетворены(Объект, СтрокаПравило) 
	
	РезультатПроверки = Ложь;
	
	Если Объект.Дата <  СтрокаПравило.ДатаНачалаВыгрузкиДокументов Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьОбъектПоУсловиямОтбора(СтрокаПравило.СхемаКД, Объект.Ссылка);
	
	Возврат РезультатПроверки;
	
КонецФункции // УсловияОтбораУдовлетворены

// Проверяет документ на предмет удовлетворения условий отбора заданных в Схеме КД.
//
// Параметры:
//   СхемаКД - СхемаКомпоновкиДанных - СКД с условиями отбора для конкретного типа документа.
//   ОбъектСсылка - ДокументСсылка - ссылка на проверяемый документ.
//
// Возвращаемое значение:
//   Булево - признак удовлетворения условий отбора схемы КД.
//
Функция ПроверитьОбъектПоУсловиямОтбора(СхемаКД, ОбъектСсылка) 
	
	НастройкиКД = СхемаКД.НастройкиПоУмолчанию;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКД);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	НастройкиРезультат = КомпоновщикНастроек.ПолучитьНастройки();
	НастройкиРезультат.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрСсылка", ОбъектСсылка);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКД, НастройкиРезультат,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
	
	Возврат ТаблицаРезультат.Количество() > 0;
	
КонецФункции // ПроверитьОбъектПоУсловиямОтбора

#КонецОбласти