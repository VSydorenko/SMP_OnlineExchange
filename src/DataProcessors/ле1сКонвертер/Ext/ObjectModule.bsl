Перем ВходящиеДанные Экспорт;

Перем Менеджеры;

Функция ВыполнитьОбработку() Экспорт
	МассивОбъектов = леРаботаСJSON.ДанныеИзJSON(ВходящиеДанные);
	ВосстановитьОбъект1сИзМассивОбъектов(МассивОбъектов);
КонецФункции

Функция ВосстановитьОбъект1сИзМассивОбъектов(МассивОбъектов) Экспорт
	Если Не ТипЗнч(МассивОбъектов) = Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ОбъектСтруктура Из МассивОбъектов Цикл
		ВосстановитьОбъект1сИзСтруктуры(ОбъектСтруктура);
	КонецЦикла;
КонецФункции

Функция ВосстановитьОбъект1сИзСтруктуры(ОбъектСтруктура, ТолькоСсылка = Ложь) Экспорт // должна быть рекурсивной функцией
	
	// проверки
	Если Не ТипЗнч(ОбъектСтруктура) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// инициализация типов и менеджеров
	Тип = ОбъектСтруктура.Тип;
	КоллекцияТипа     = СтрРазделить(Тип, ".")[0];
	ТипОбъекта        = ПолучитьТипОбъктаПоСтроке(Тип);
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеОбъекта = ПолучитьМетаданныеПоТипу(ТипОбъекта);
	
	ЭтоСсылка  = ЭтоДанныеСсылочногоТипа(КоллекцияТипа);
	ЭтоРегистр = ЭтоРегистр(КоллекцияТипа);
	
	Если ЭтоРегистр Тогда
		Объект1с = ПолучитьРегистр(ОбъектСтруктура, КоллекцияТипа, ТипОбъекта, МетаданныеОбъекта);
	ИначеЕсли ЭтоСсылка Тогда
		Объект1с = ПолучитьСсылку(ОбъектСтруктура, КоллекцияТипа, ТипОбъекта, МетаданныеОбъекта, ТолькоСсылка);
		Если ТолькоСсылка Тогда
			Возврат Объект1с;
		КонецЕсли;
	Иначе
		Если ОбъектСтруктура.Свойство("Значение") Тогда
			Если Лев(ОбъектСтруктура.Значение, 1) = "{" Тогда // платформенное значение
				Возврат ЗначениеИзСтрокиВнутр(ОбъектСтруктура.Значение);
			Иначе
				Возврат ОбъектСтруктура.Значение;
			КонецЕсли;
		ИначеЕсли ОбъектСтруктура.Свойство("Представление") Тогда //todo обратная совместимость
			Возврат ОбъектСтруктура.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
	
	Тип = ОбъектСтруктура.Тип;
	
	Если Найти(Тип, "ПланВидовХарактеристик") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если Найти(Тип, "ПланСчетовСсылка") Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ИмяТипа = СтрРазделить(Тип,".")[1];
	Если Найти(Тип, "СправочникСсылка") Тогда
		Если ОбъектСтруктура.Свойство("ИмяПредопределенныхДанных") 
			и ЗначениеЗаполнено(ОбъектСтруктура.ИмяПредопределенныхДанных)
		Тогда
			Попытка // не всегда предопределенный элемент есть в данных БД
				Возврат Справочники[ИмяТипа][ОбъектСтруктура.ИмяПредопределенныхДанных];
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;
		
	Ссылка = НайтиПоРеквизитамИзСтруктуры(ОбъектСтруктура, ИмяТипа);
	//Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ВходящиеДанные.Ссылка));
	Попытка
		Если Не Ссылка = Неопределено Тогда
			Объект1с = Ссылка.ПолучитьОбъект();
		КонецЕсли;
	Исключение
		
	КонецПопытки;
	
	Если Объект1с = Неопределено Тогда
		Если Найти(Тип, "СправочникСсылка") Тогда
			Если ОбъектСтруктура.СтандартныеРеквизиты.Свойство("ЭтоГруппа")
				и ОбъектСтруктура.СтандартныеРеквизиты.ЭтоГруппа Тогда
				Объект1с = Справочники[ИмяТипа].СоздатьГруппу();
			Иначе
				Объект1с = Справочники[ИмяТипа].СоздатьЭлемент();
			КонецЕсли;
		ИначеЕсли Найти(Тип, "ДокументСсылка") Тогда
			// todo
			Попытка
				Объект1с = Документы[ИмяТипа].СоздатьДокумент();
			Исключение
			КонецПопытки;
		ИначеЕсли Найти(Тип, "ПланСчетовСсылка") Тогда
			Объект1с = ПланыСчетов[ИмяТипа].СоздатьСчет();
		Иначе
			Возврат Неопределено;
		КонецЕсли;		
		//Объект1с.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;
		
	Если ОбъектСтруктура.Свойство("Реквизиты") Тогда
		ЗаполнитьСсылки(ОбъектСтруктура.Реквизиты);	
		ЗаполнитьЗначенияСвойств(Объект1с, ОбъектСтруктура.Реквизиты);
	КонецЕсли;
	
	Если ОбъектСтруктура.Свойство("СтандартныеРеквизиты") Тогда
		ЗаполнитьСсылки(ОбъектСтруктура.СтандартныеРеквизиты);	
		Попытка
			ЗаполнитьЗначенияСвойств(Объект1с, ОбъектСтруктура.СтандартныеРеквизиты);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			леЛоггирование.СообщитьОбОшибке(ОписаниеОшибки);
			ВызватьИсключение ОписаниеОшибки;
		КонецПопытки;
	КонецЕсли;
		
	Если Найти(Тип, "СправочникСсылка") Тогда
		Если ОбъектСтруктура.СтандартныеРеквизиты.Свойство("ЭтоГруппа")
			и ОбъектСтруктура.СтандартныеРеквизиты.ЭтоГруппа Тогда			
		Иначе
			Попытка
				ЗаполнитьЗначенияСвойств(Объект1с, ОбъектСтруктура.Реквизиты);
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		ЗаполнитьЗначенияСвойств(Объект1с, ОбъектСтруктура.Реквизиты);
	КонецЕсли;
	
	Объект1с.ОбменДанными.Загрузка = Истина;
	Объект1с.Записать();
	Объект1с.ОбменДанными.Загрузка = Ложь;
	
	Если ОбъектСтруктура.Свойство("ТЧ") Тогда
		Для Каждого ТЧ Из ОбъектСтруктура.ТЧ Цикл
			Попытка
				Объект1с[ТЧ.Ключ].Очистить();
				Для Каждого Строка Из ТЧ.Значение Цикл
					ЗаполнитьСсылки(Строка);	
					НоваяСтрока = Объект1с[ТЧ.Ключ].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЦикла;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Объект1с.ДополнительныеСвойства.Вставить("НеЗапускатьОбмен", Истина);

	ТипВхДанных = Неопределено;
	
	Если Найти(Тип, "СправочникСсылка") Тогда
		Мета = Объект1с.Ссылка.Метаданные();
		Если ОбъектСтруктура.Свойство("Код") и Мета.ДлинаКода > 0 Тогда
			Объект1с.Код = ОбъектСтруктура.Код;
		КонецЕсли;
		Если ОбъектСтруктура.Свойство("Наименование") и Мета.ДлинаНаименования > 0 Тогда
			Объект1с.Наименование = ОбъектСтруктура.Наименование;
		КонецЕсли;
		Если ОбъектСтруктура.Свойство("Владелец") и Мета.Владельцы.Количество() Тогда
			Если ЗначениеЗаполнено(ОбъектСтруктура.Владелец) Тогда
				ДанныеТипа = СтрРазделить(ОбъектСтруктура.Владелец.Тип, ".");
				Объект1с.Владелец = НайтиПоРеквизитамИзСтруктуры(ОбъектСтруктура.Владелец, ДанныеТипа[1]);
			Иначе
				Объект1с.Владелец = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если ОбъектСтруктура.Свойство("Родитель") и Мета.Иерархический Тогда
			Если ЗначениеЗаполнено(Объект1с.Родитель) Тогда
				ДанныеТипа = СтрРазделить(ОбъектСтруктура.Родитель.Тип, ".");
				Объект1с.Родитель = НайтиПоРеквизитамИзСтруктуры(ОбъектСтруктура.Родитель, ДанныеТипа[1]);
			Иначе
				Объект1с.Родитель = Неопределено;
			КонецЕсли;
		КонецЕсли;
		ТипВхДанных = "Справочник";
	ИначеЕсли Найти(Тип, "ДокументСсылка") Тогда		
		ДокументПроведен  = Объект1с.Проведен;
		Объект1с.Дата     = ОбъектСтруктура.СтандартныеРеквизиты.Дата;
		Объект1с.Проведен = ОбъектСтруктура.СтандартныеРеквизиты.Проведен;
		Объект1с.Номер    = ОбъектСтруктура.СтандартныеРеквизиты.Номер;
		Объект1с.ПометкаУдаления = ОбъектСтруктура.СтандартныеРеквизиты.ПометкаУдаления;
		ТипВхДанных = "Документ";	
	КонецЕсли;	
	
	//Если ТипВхДанных = "Документ" И Объект1с.Проведен Тогда
	//	Объект1с.Записать(РежимЗаписиДокумента.Проведение);
	//Иначе
	Объект1с.ДополнительныеСвойства.Вставить("ЗаписьВходящихДанных", Истина);
	Если ТипВхДанных = "Документ" Тогда		
		Если Объект1с.Проведен Тогда			
			Объект1с.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			Если ДокументПроведен Тогда
				Объект1с.Записать(РежимЗаписиДокумента.ОтменаПроведения);	
			Иначе
				Объект1с.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;	
		КонецЕсли;
		//Если Объект1с.Проведен Тогда
		//	Объект1с.Проведен = Ложь;
		//	Попытка
		//		Объект1с.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//	Исключение
		//		Объект1с.ОбменДанными.Загрузка = Истина;
		//		Объект1с.Записать(РежимЗаписиДокумента.Запись);
		//	КонецПопытки;
		//Иначе
		//	Объект1с.ОбменДанными.Загрузка = Истина;
		//	Объект1с.Записать(РежимЗаписиДокумента.Запись);
		//КонецЕсли;
	Иначе
		Объект1с.ОбменДанными.Загрузка = Истина;
		Объект1с.Записать();
	КонецЕсли;	
КонецФункции

Функция ПолучитьРегистр(ОбъектСтруктура, КоллекцияТипа, ТипОбъекта, МетаданныеОбъекта)
	МенеджерОбъекта   = МенеджерОбъета(КоллекцияТипа, МетаданныеОбъекта);
	Если МенеджерОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Объект1с = МенеджерОбъекта.СоздатьНаборЗаписей();
	
	Для Каждого Элемент Из ОбъектСтруктура.Отбор Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда			
			Значение = ВосстановитьОбъект1сИзСтруктуры(Элемент.Значение, Истина);
		Иначе
			Значение = Элемент.Значение;
			Если Сред(Значение, "11", 1) = "T" Тогда
				Значение = леРаботаСJSON.ДатаИзJSON(Значение);
			КонецЕсли;
		КонецЕсли;
					
		Объект1с.Отбор[Элемент.Имя].Установить(Значение);
	КонецЦикла;
	
	Объект1с.Прочитать();
	Объект1с.Очистить();
	
	Для Каждого Запись Из ОбъектСтруктура.НаборЗаписей Цикл
		НоваяСтрока = Объект1с.Добавить();
		ЗаполнитьСсылки(Запись);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
		
		Если Найти(КоллекцияТипа, "Бухгалтерии") Тогда
			ЗаполнитьСубконто(НоваяСтрока, Запись);	
		ИначеЕсли Найти(КоллекцияТипа, "Накопления") Тогда
			//Если Запись.Свойство("ВидДвижения") Тогда
			//	
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Объект1с.ОбменДанными.Загрузка = Истина;
		Объект1с.Записать();
	Исключение
		леЛоггирование.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Объект1с;
КонецФункции

Функция ЗаполнитьСубконто(НоваяСтрока, Запись)
	Если ЗначениеЗаполнено(Запись.СубконтоДТ1) Тогда
		НоваяСтрока.СубконтоДТ.Вставить(Запись.ВидСубконтоДт1, Запись.СубконтоДТ1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Запись.СубконтоДТ2) Тогда
		НоваяСтрока.СубконтоДТ.Вставить(Запись.ВидСубконтоДт2, Запись.СубконтоДТ2);
	КонецЕсли;
	Если ЗначениеЗаполнено(Запись.СубконтоДТ3) Тогда
		НоваяСтрока.СубконтоДТ.Вставить(Запись.ВидСубконтоДт3, Запись.СубконтоДТ3);
	КонецЕсли;
	Если ЗначениеЗаполнено(Запись.СубконтоКТ1) Тогда
		НоваяСтрока.СубконтоКТ.Вставить(Запись.ВидСубконтоКт1, Запись.СубконтоКТ1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Запись.СубконтоКТ2) Тогда
		НоваяСтрока.СубконтоКТ.Вставить(Запись.ВидСубконтоКт2, Запись.СубконтоКТ2);
	КонецЕсли;
	Если ЗначениеЗаполнено(Запись.СубконтоКТ3) Тогда
		НоваяСтрока.СубконтоКТ.Вставить(Запись.ВидСубконтоКт3, Запись.СубконтоКТ3);
	КонецЕсли;	
КонецФункции

Функция ПолучитьСсылку(ОбъектСтруктура, КоллекцияТипа, ТипОбъекта, МетаданныеОбъекта, ТолькоСсылка)
	МенеджерОбъекта   = МенеджерОбъета(КоллекцияТипа, МетаданныеОбъекта);
	Если МенеджерОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Объект1с = Неопределено;
	Если ОбъектСтруктура.Свойство("ПоляПоиска") Тогда // todo
		
	ИначеЕсли ОбъектСтруктура.Свойство("Ссылка") Тогда
		// другие методы поиска данных через структуру ПоляПоиска
		ИД = Новый УникальныйИдентификатор(ОбъектСтруктура.Ссылка);
		Ссылка = МенеджерОбъекта.ПолучитьСсылку(ИД);
		Если ЗначениеЗаполнено(Ссылка.ВерсияДанных) Тогда
			Объект1с = Ссылка;
		КонецЕсли;
	ИначеЕсли ОбъектСтруктура.Свойство("СтандартныеРеквизиты") Тогда // обратная совместимость
		
	ИначеЕсли ОбъектСтруктура.Свойство("Значение") Тогда // Перечисление?
		 Возврат МенеджерОбъекта[ОбъектСтруктура.Значение];
	КонецЕсли;
	
	Если ТолькоСсылка Тогда
		Возврат Объект1с;
	КонецЕсли;
	
	Если Объект1с = Неопределено Тогда
		
	КонецЕсли;
	
	Возврат Неопределено;
	
	// заполнение реквизитов объекта
КонецФункции

Функция ПолучитьТипОбъктаПоСтроке(ТипСтрокой)
	Попытка
		Тип = Тип(ТипСтрокой);
	Исключение
		// такого типа в метаданных нет
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Тип;
КонецФункции

Функция ПолучитьМетаданныеПоТипу(Тип)
	Попытка
		Возврат Метаданные.НайтиПоТипу(Тип);
	Исключение
		// такого типа в метаданных нет
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Метаданные.НайтиПоТипу(Тип);
КонецФункции

Функция МенеджерОбъета(КоллекцияТипа, МетаданныеОбъекта)
	Возврат Менеджеры.Получить(КоллекцияТипа)[МетаданныеОбъекта.Имя];
КонецФункции

Функция ЗаполнитьМенеджеры()
	Менеджеры = Новый Соответствие;
	
	Менеджеры.Вставить("Константа",                     Константы);
	Менеджеры.Вставить("СправочникСсылка",              Справочники);
	Менеджеры.Вставить("ДокументСсылка",                Документы);
	Менеджеры.Вставить("ПеречислениеСсылка",            Перечисления);
	Менеджеры.Вставить("ПланВидовХарактеристикСсылка",  ПланыВидовХарактеристик);
	Менеджеры.Вставить("ПланСчетовСсылка",              ПланыСчетов);
	Менеджеры.Вставить("ПланВидовРасчетаСсылка",        ПланыВидовРасчета);
	Менеджеры.Вставить("РегистрСведенийНаборЗаписей",   РегистрыСведений);
	Менеджеры.Вставить("РегистрНакопленияНаборЗаписей", РегистрыНакопления);
	Менеджеры.Вставить("РегистрБухгалтерииСписок",      РегистрыБухгалтерии);
	Менеджеры.Вставить("РегистрРасчетаСписок",          РегистрыРасчета);
КонецФункции

Функция ЭтоДанныеСсылочногоТипа(КоллекцияТипа)
	МассивСтрок = Новый Массив;
	
	МассивСтрок.Добавить("Константа");
	МассивСтрок.Добавить("СправочникСсылка");
	МассивСтрок.Добавить("ДокументСсылка");
	МассивСтрок.Добавить("ПеречислениеСсылка");
	МассивСтрок.Добавить("ПланВидовХарактеристикСсылка");
	МассивСтрок.Добавить("ПланСчетовСсылка");
	МассивСтрок.Добавить("ПланВидовРасчетаСсылка");
	
	Возврат НЕ МассивСтрок.Найти(КоллекцияТипа) = Неопределено;
КонецФункции

Функция ЭтоРегистр(КоллекцияТипа)
	МассивСтрок = Новый Массив;
	
	МассивСтрок.Добавить("РегистрСведенийНаборЗаписей");
	МассивСтрок.Добавить("РегистрНакопленияНаборЗаписей");
	МассивСтрок.Добавить("РегистрБухгалтерииСписок");
	МассивСтрок.Добавить("РегистрРасчетаСписок");
	
	Возврат НЕ МассивСтрок.Найти(КоллекцияТипа) = Неопределено;
КонецФункции

Функция ЭтоРегистрСведений(КоллекцияТипа)
	Возврат Найти(КоллекцияТипа, "РегистрСведений") > 0;	
КонецФункции

Функция ЗаполнитьСсылки(Реквизиты)
	Для Каждого Элемент Из Реквизиты Цикл
		Если СтрДлина(Элемент.Значение) = 19 и Сред(Элемент.Значение,11,1) = "T" Тогда
			Значение = ДатаИзJSON(Элемент.Значение);
			Реквизиты.Вставить(Элемент.Ключ, Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Значение = ВосстановитьОбъект1сИзСтруктуры(Элемент.Значение, Истина);
		    Реквизиты.Вставить(Элемент.Ключ, Значение);
		Иначе
			Реквизиты.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция НайтиПоРеквизитамИзСтруктуры(ВходящиеДанные, ИмяТипа)
	Если ТипЗнч(ВходящиеДанные) = Тип("Строка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = Неопределено;
	
	СсылкаНайдена = Ложь;
	Если Найти(ВходящиеДанные.Тип, "СправочникСсылка") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"Выбрать Ссылка Из Справочник."+ИмяТипа+" Где Истина И &ОтборКод И &ОтборНаименование И &ОтборЭтоГруппа";
		
		Если ВходящиеДанные.Свойство("Код") и ЗначениеЗаполнено(ВходящиеДанные.Код) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборКод", "Код = &Код");
			Запрос.УстановитьПараметр("Код", ВходящиеДанные.Код);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборКод", "Истина");
		КонецЕсли;
		Если Не СсылкаНайдена и ВходящиеДанные.Свойство("Наименование") И ЗначениеЗаполнено(ВходящиеДанные.Наименование) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборНаименование", "Наименование = &Наименование");
			Запрос.УстановитьПараметр("Наименование", ВходящиеДанные.Наименование);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборНаименование", "Истина");
		КонецЕсли;
		Если ВходящиеДанные.Свойство("ЭтоГруппа") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЭтоГруппа", "ЭтоГруппа = &ЭтоГруппа");
			Запрос.УстановитьПараметр("ЭтоГруппа", ВходящиеДанные.ЭтоГруппа);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЭтоГруппа", "Истина");
		КонецЕсли;
		Рез = Запрос.Выполнить().Выбрать();
		Если Рез.Следующий() Тогда
			Возврат Рез.Ссылка;
		КонецЕсли;
		//Если Не СсылкаНайдена Тогда	
		//	Значение = Справочники[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ВходящиеДанные.Ссылка));	
		//КонецЕсли;
	ИначеЕсли Найти(ВходящиеДанные.Тип, "ДокументСсылка") Тогда
		Если ВходящиеДанные.Свойство("Номер") И ЗначениеЗаполнено(ВходящиеДанные.Номер) Тогда
			Попытка
				Значение = Документы[ИмяТипа].НайтиПоНомеру(ВходящиеДанные.Номер, ДатаИзJSON(ВходящиеДанные.Дата));
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
		//Если НЕ СсылкаНайдена Тогда
		//	Значение = Документы[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ВходящиеДанные.Ссылка));	
		//КонецЕсли;	
	ИначеЕсли Найти(ВходящиеДанные.Тип, "ПеречислениеСсылка") Тогда
		ЗначенияПеречисления = СтрРазделить(ВходящиеДанные.Ссылка, ".");
		Если Метаданные.Перечисления.Найти(ЗначенияПеречисления[1]) = Неопределено Тогда
			Значение = Неопределено;
		Иначе	
			Если ЗначенияПеречисления[2] = "ПустаяСсылка" Тогда
				Значение = Перечисления[ЗначенияПеречисления[1]].ПустаяСсылка();
			Иначе
				Значение = Перечисления[ЗначенияПеречисления[1]][ЗначенияПеречисления[2]];
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(ВходящиеДанные.Тип, "ПланСчетовСсылка") Тогда
		Если ВходящиеДанные.Свойство("Код") и ЗначениеЗаполнено(ВходящиеДанные.Код) Тогда
			Значение = ПланыСчетов[ИмяТипа].НайтиПоКоду(ВходящиеДанные.Код);
		ИначеЕсли ВходящиеДанные.Свойство("Представление") и ЗначениеЗаполнено(ВходящиеДанные.Представление) Тогда
			Значение = ПланыСчетов[ИмяТипа].НайтиПоКоду(ВходящиеДанные.Представление);
		Иначе	
			//Значение = ПланыСчетов[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ВходящиеДанные.Ссылка));				
		КонецЕсли;
	ИначеЕсли Найти(ВходящиеДанные.Тип, "ПланВидовХарактеристикСсылка") Тогда
		Если ВходящиеДанные.Свойство("Наименование") и ЗначениеЗаполнено(ВходящиеДанные.Наименование) Тогда
			Значение = ПланыВидовХарактеристик[ИмяТипа].НайтиПоНаименованию(ВходящиеДанные.Наименование);
		Иначе
			//Значение = ПланыВидовХарактеристик[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ВходящиеДанные.Ссылка));
		КонецЕсли;
	ИначеЕсли Найти(ВходящиеДанные.Тип, "ПланВидовРасчетаСсылка") Тогда
		Если ВходящиеДанные.Свойство("Наименование") и ЗначениеЗаполнено(ВходящиеДанные.Наименование) Тогда
			Значение = ПланыВидовРасчета[ИмяТипа].НайтиПоНаименованию(ВходящиеДанные.Наименование);
		Иначе
			//Значение = ПланыВидовХарактеристик[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ВходящиеДанные.Ссылка));
		КонецЕсли;
	КонецЕсли;
	Возврат Значение;
КонецФункции

Функция ДатаИзJSON(СтрокаJSON, ФорматДаты = "") Экспорт

	ФорматДаты = ?(ФорматДаты = "",ФорматДатыJSON.ISO,ФорматДаты);
	Дата1С = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку("{
	|""date"": """+СтрокаJSON+"""
	|}");
	Попытка
		Дата1С = ПрочитатьJSON(ЧтениеJSON, Ложь, "date", ФорматДаты).date;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат Дата1С;
	
КонецФункции // СтруктураВJSON()

ЗаполнитьМенеджеры();