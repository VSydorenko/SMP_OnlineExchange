
#Область ПеременныеМодуля
Перем КодОтвета;
Перем ЗаголовкиОтвета;
Перем ТелоОтвета;
Перем ФорматТелаОтвета;

Перем ВозвращаемыеДанные Экспорт;
Перем ОбработкаВыполненаУспешно Экспорт;

Перем ВходящиеДанные Экспорт;
Перем ПараметрыЗапроса Экспорт;
Перем ЗаголовкиЗапроса Экспорт;
Перем ПараметрыУРЛ Экспорт;

Перем ИмяСобытияЖР;
#КонецОбласти

Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "liteExchange задание очередь обработки данных");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.0");                      
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");	
	РегистрационныеДанные.Вставить("Информация", "Шаблон внешнего регламентного задания");
	
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор");
	тзКоманд.Колонки.Добавить("Представление");
	тзКоманд.Колонки.Добавить("Модификатор");
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение");
	тзКоманд.Колонки.Добавить("Использование");
	
	строкаКоманды = тзКоманд.Добавить();
	строкаКоманды.Идентификатор = "НастройкаПараметровРегламентногоЗадания";
	строкаКоманды.Представление = "Настройка параметров выполнения регл. задания";
	строкаКоманды.Использование = "ОткрытиеФормы";
		
	строкаКоманды = тзКоманд.Добавить();
	строкаКоманды.Идентификатор = "ВыполнениеРегламентногоЗадания";
	строкаКоманды.Представление = "Выполнение регл. задания";
	строкаКоманды.Использование = "ВызовСерверногоМетода";
		
	РегистрационныеДанные.Вставить("Команды", тзКоманд);
		
	Возврат РегистрационныеДанные;
	
КонецФункции

///////////////////// ПОЛУЧЕНИЕ НАСТРОЕК ВЫПОЛНЕНИЯ РЕГЛ. ЗАДАНИЯ /////////////////////////

Функция ПолучитьПараметрыВыполненияРегламентногоЗадания(ИнтерактивноеПолучение = Ложь) Экспорт

	ОписаниеОшибки = "";	
	ОбработкаРеглЗадания = ПолучитьОбработкуРегламентногоЗадания(ИнтерактивноеПолучение, ОписаниеОшибки);
		
	Если НЕ ОбработкаРеглЗадания.Пустая() Тогда
		
		НастройкиРеглЗадания = ОбработкаРеглЗадания.ХранилищеНастроек.Получить();		
		
		Если НастройкиРеглЗадания <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиРеглЗадания);
		ИначеЕсли НЕ ИнтерактивноеПолучение Тогда	
			ОписаниеОшибки = "Настройки выполнения не заданы";
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки, ОбработкаРеглЗадания, ОписаниеОшибки); 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Функция ПолучитьОбработкуРегламентногоЗадания(ИнтерактивноеПолучение = Ложь, ОписаниеОшибки = "") Экспорт
	
	ОбработкаРеглЗадания = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяОбъекта", Метаданные().Имя);		
	
	Если ОбработкаРеглЗадания.Пустая() Тогда
		ОписаниеОшибки = "В справочнике ""Дополнительные отчеты и обработки"" не обнаружена обработка с именем """ + Метаданные().Имя + """";
		Если НЕ ИнтерактивноеПолучение Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ОписаниеОшибки); 
		КонецЕсли;
	КонецЕсли;

	Возврат ОбработкаРеглЗадания;
	
КонецФункции

///////////////////// ПРОЦЕДУРЫ ВЫПОЛНЕНИЯ РЕГЛ. ЗАДАНИЯ //////////////////////////////////

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт	
	ОбработкаОчереди();
КонецПроцедуры

Функция ОбработкаОчереди()	
	Запрос = Новый Запрос;
	Отборы = Новый Массив;	

	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Запрос.Текст = ТекстЗапросаОтладка();
		Отборы.Добавить("УникальныйИдентификатор = &УникальныйИдентификатор");
	Иначе
		Запрос.Текст = ТекстЗапросаОбработкаОчереди();
		Отборы.Добавить("НЕ Статус = &Статус");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отборы", СтрСоединить(Отборы, " И "));
	
	Запрос.УстановитьПараметр("Статус", Перечисления.леСтатусыОбработкиСообщений.Обработано);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Данные = СМП_ОнлайнОбменУправлениеОчередями.ПолучитьДанныеПоИдентификатору(Выборка.УникальныйИдентификатор);		
		Ответ = леСобытия.ОтправитьДанные(Данные);
		Если Ответ = Неопределено Тогда
			СМП_ОнлайнОбменУправлениеОчередями.УстановитьСтатусОбработано(Выборка.УникальныйИдентификатор);
		Иначе
			СМП_ОнлайнОбменУправлениеОчередями.УстановитьСтатусОшибкаОбработки(Выборка.УникальныйИдентификатор, , Ответ);
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция ТекстЗапросаОбработкаОчереди()
	Возврат
	
	"Выбрать УникальныйИдентификатор, Данные Из РегистрСведений.леОчередьОбработкиДанных Где &Отборы УПОРЯДОЧИТЬ ПО ДатаДобавления Возр, ТаймШтамп Возр";
	
	Возврат
	"Выбрать 
	|	Выразить(Данные КАК Строка(300)) КАК Данные,
	|	ДатаДобавления  КАК ДатаДобавления,
	|	УникальныйИдентификатор
	|Поместить Обработанные 
	|Из 
	|	РегистрСведений.леОчередьОбработкиДанных 
	|Где 
	|	Статус = &Статус
	|;
	|
	|Выбрать 
	|	Выразить(Данные КАК Строка(300)) КАК Данные, 
	|	Максимум(ДатаДобавления) КАК ДатаДобавления
	|Поместить ПоследниеЗаписи 
	|Из 
	|	РегистрСведений.леОчередьОбработкиДанных 
	|Где 
	|	НЕ Статус = &Статус
	|Сгруппировать По 
	|	Выразить(Данные КАК Строка(300))
	|;
    |
	|Выбрать 
	|	Т2.УникальныйИдентификатор,
	|	Т2.ДатаДобавления,
	|	Т2.Статус,
	|	Т3.ДатаДобавления
	|Из 
	|	ПоследниеЗаписи КАК Т1
	|		Левое Соединение 
	|			РегистрСведений.леОчередьОбработкиДанных  КАК Т2
	|				По Т1.ДатаДобавления = Т2.ДатаДобавления
	|					И Т1.Данные = Выразить(Т2.Данные КАК Строка(300))
	|		Левое Соединение 
	|			Обработанные КАК Т3
	|				По Т1.Данные = Т3.Данные
	|	Где 
	|		Т3.ДатаДобавления ЕСТЬ NULL
	|			ИЛИ Т1.ДатаДобавления > Т3.ДатаДобавления
	|Упорядочить По 
	|	Т1.ДатаДобавления";	
КонецФункции

Функция ТекстЗапросаОтладка()
	Возврат
	"Выбрать УникальныйИдентификатор, Данные Из РегистрСведений.леОчередьОбработкиДанных Где &Отборы УПОРЯДОЧИТЬ ПО ДатаДобавления Возр, ТаймШтамп Возр";
КонецФункции

Функция ВыполнитьОбработку_Номенклатура(Данные)
	масДанные = Новый Массив;
	масДанные.Добавить(Данные);
	
	Данные = масДанные;
КонецФункции           

Функция ПолучитьНастройки() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	леНастройкиТранспортаОбменаДанными.УзелОбмена КАК УзелОбмена,
		|	леНастройкиТранспортаОбменаДанными.СтрокаПодключения КАК СтрокаПодключения,
		|	леНастройкиТранспортаОбменаДанными.КаталогОбмена КАК КаталогОбмена
		|ИЗ
		|	РегистрСведений.леНастройкиТранспортаОбменаДанными КАК леНастройкиТранспортаОбменаДанными";	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();

	Возврат Выборка;
КонецФункции

#Область ПользовательскиеФункции

#КонецОбласти

#Область Инициализация
КодОтвета = 200;
ЗаголовкиОтвета = Новый Соответствие;
ЗаголовкиОтвета.Вставить("Charset", "utf-8");
ЗаголовкиОтвета.Вставить("Content-type", "application/JSON");

ТекстОноРаботает = "Что-то уже работает!";
ТелоОтвета = "{""data"":"+ТекстОноРаботает+"}";

ФорматТелаОтвета = "JSON";

ВозвращаемыеДанные = ТекстОноРаботает;

ПараметрыУРЛ = Новый Структура;
ПараметрыЗапроса = Новый Структура;

ОбработкаВыполненаУспешно = Истина;
ИмяСобытияЖР = "Exchange API";
#КонецОбласти