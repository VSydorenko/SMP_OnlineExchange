#Область ЭкспортируемыеПеременные
Перем Ошибка Экспорт;
Перем ВходящиеДанные Экспорт;

Перем ТипОбъекта;
Перем ОбъектНайден;
Перем СсылкаНаОбъект;
Перем ПерезаписатьОбъект;
Перем Отказ;

Перем СсылкиСтруктурой;
Перем ОбъектыСтруктурой;
Перем ПравилаКонвертации Экспорт;

Перем Платформа1с;
#КонецОбласти

#Область ПереопределяемыеПроцедуры
Функция леРаботаСJSON()
	
	Возврат ЭтотОбъект;
	//Возврат леРаботаСJSON4;
	
КонецФункции

Функция СсылкиСтруктурой()
	
	Возврат СсылкиСтруктурой;
	
КонецФункции

Функция ОбъектыСтруктурой()

	Возврат ОбъектыСтруктурой;
	
КонецФункции
#КонецОбласти

#Область ЗаписатьJSON_Расширенная
Функция ЗаписатьJSON_Расширенная(Данные, ТолькоСсылки = Истина, ПравилаКонвертации = Неопределено) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб,,ЭкранированиеСимволовJSON.СимволыВнеBMP,Истина,Истина,Истина,Истина,Истина);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	//ЗаполнитьЗначенияСвойств(ЗаписьJSON.Параметры, ПараметрыЗаписиJSON());
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
		
	ДопПараметры = Новый Структура("Значение, ТолькоСсылки", Данные, ТолькоСсылки);
	
	ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализацииJSON, "КонвертацияСложныхТиповДляJSON", леРаботаСJSON(), ДопПараметры);
	
	ТекстСообщения = ЗаписьJSON.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ЗаписатьJSON_Стандартная(Данные) Экспорт

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб,,ЭкранированиеСимволовJSON.СимволыВнеBMP,Истина,Истина,Истина,Истина,Истина);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	//ЗаполнитьЗначенияСвойств(ЗаписьJSON.Параметры, ПараметрыЗаписиJSON());
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализацииJSON);
	
	ТекстСообщения = ЗаписьJSON.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция КонвертацияСложныхТиповДляJSON(Свойство, Значение, ДопПараметры, Отказ) Экспорт	
	
	Если НЕ ЗначениеЗаполнено(Свойство) И ДопПараметры.Значение = Значение Тогда // т.е. это выгрузка объекта
		ТолькоСсылки = Ложь;
	Иначе // а это свойства объекта
		ТолькоСсылки = ДопПараметры.ТолькоСсылки;
	КонецЕсли;
	
	Возврат СериализоватьВПростыеТипы(Значение, ТолькоСсылки);
	
КонецФункции // СтруктураВJSON()

Функция ПараметрыЗаписиJSON()
	
	ПараметрыЗаписиJSON = Новый Структура;
	
	ПараметрыЗаписиJSON = Новый Структура;
	ПараметрыЗаписиJSON.Вставить("ПереносСтрок", ПереносСтрокJSON.Авто);
	ПараметрыЗаписиJSON.Вставить("СимволыОтступа", " ");
	ПараметрыЗаписиJSON.Вставить("ИспользоватьДвойныеКавычки", Истина);
	ПараметрыЗаписиJSON.Вставить("ЭкранированиеСимволов", ЭкранированиеСимволовJSON.СимволыВнеASCII);
	ПараметрыЗаписиJSON.Вставить("ЭкранироватьУгловыеСкобки", Истина);
	ПараметрыЗаписиJSON.Вставить("ЭкранироватьРазделителиСтрок", Истина);
	ПараметрыЗаписиJSON.Вставить("ЭкранироватьАмперсанд", Истина);
	ПараметрыЗаписиJSON.Вставить("ЭкранироватьОдинарныеКавычки", Истина);
	ПараметрыЗаписиJSON.Вставить("ЭкранироватьСлеш", Истина);
	
	Возврат ПараметрыЗаписиJSON;
	
КонецФункции

#Область ОбработчикиНеСложныхТипов
Функция ОбработчикиТипов()
	
	ОбработчикиТипов = Новый Соответствие;
	ОбработчикиТипов.Вставить(Тип("null"),                    "обработчик_ЗначениеВСтрокуВнутр(Значение)");
	ОбработчикиТипов.Вставить(Тип("ДвоичныеДанные"),          "обработчик_ЗначениеВСтрокуВнутр(Значение)");
	ОбработчикиТипов.Вставить(Тип("ХранилищеЗначения"),       "обработчик_ЗначениеВСтрокуВнутр(Значение)");
	ОбработчикиТипов.Вставить(Тип("ТабличныйДокумент"),       "обработчик_ЗначениеВСтрокуВнутр(Значение)");	
	ОбработчикиТипов.Вставить(Тип("УникальныйИдентификатор"), "обработчик_УникальныйИдентификатор(Значение)");	
	ОбработчикиТипов.Вставить(Тип("ТаблицаЗначений"),         "обработчик_ТаблицаЗначений(Значение)");
	ОбработчикиТипов.Вставить(Тип("ДеревоЗначений"),          "обработчик_ДеревоЗначений(Значение)");
	ОбработчикиТипов.Вставить(Тип("ОписаниеТипов"),           "обработчик_ЗначениеВСтрокуВнутр(Значение)");
	ОбработчикиТипов.Вставить(Тип("Тип"),                     "обработчик_ЗначениеВСтрокуВнутр(Значение)");
	ОбработчикиТипов.Вставить(Тип("ВидДвиженияНакопления"),   "обработчик_ЗначениеВСтрокуВнутр(Значение)");
	ОбработчикиТипов.Вставить(Тип("МоментВремени"),           "обработчик_ЗначениеВСтрокуВнутр(Значение)");
	
	ОбработчикиТипов.Вставить("Ссылка",       "обработчик_Ссылка(Значение)");
	ОбработчикиТипов.Вставить("Перечисление", "обработчик_Перечисление(Значение)");
	
	Возврат ОбработчикиТипов;
	
КонецФункции

Функция обработчик_ЗначениеВСтрокуВнутр(Значение)
	
	Возврат Новый Структура("Тип, Значение", "ЗначениеПлатформыСтрокой", ЗначениеВСтрокуВнутр(Значение));	
	
КонецФункции

Функция обработчик_УникальныйИдентификатор(Значение)
	
	Возврат Новый Структура("Тип, Значение", "УникальныйИдентификатор", Строка(Значение));
	
КонецФункции
	
Функция обработчик_ТаблицаЗначений(Значение)
	
	НовоеЗначение = Новый Массив;
	СтруктураСтроки = ИменаКолонок(Значение);
	Для Каждого Элемент Из Значение Цикл
		СтрокаСтруктурой = Новый Структура(СтруктураСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаСтруктурой, Элемент);
		//todo 
		//Вложенные сложные типы будут обработаны рекурсино или это задача программиста?
		//Строка = ЭлементВПростыеТипы(СтрокаСтруктурой, ТолькоСсылки);
		//Строка.Вставить("Строки", ДанныеВПростыеТипыРекурсивно(Элемент, ТолькоСсылки, СтруктураСтроки));
		НовоеЗначение.Добавить(СтрокаСтруктурой);
	КонецЦикла;
	Возврат НовоеЗначение;	
	
КонецФункции

Функция обработчик_ДеревоЗначений(Значение)
	
	НовоеЗначение = Новый Массив;
	СтруктураСтроки = ИменаКолонок(Значение);
	Для Каждого Элемент Из Значение.Строки Цикл
		СтрокаСтруктурой = Новый Структура(СтруктураСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаСтруктурой, Элемент);
		//todo 
		//Вложенные сложные типы будут обработаны рекурсино или это задача программиста?
		//Строка = ЭлементВПростыеТипы(СтрокаСтруктурой, ТолькоСсылки);
		//Строка.Вставить("Строки", ДанныеВПростыеТипыРекурсивно(Элемент, ТолькоСсылки, СтруктураСтроки));
		НовоеЗначение.Добавить(СтрокаСтруктурой);
	КонецЦикла;
	Возврат НовоеЗначение;
	
КонецФункции

Функция ИменаКолонок(Данные)
	
	СтруктураСтроки = Новый Массив;
	Для Каждого Колонка Из Данные.Колонки Цикл
		СтруктураСтроки.Добавить(Колонка.Имя);
	КонецЦикла;
	Возврат СтрСоединить(СтруктураСтроки, ",");
	
КонецФункции
#КонецОбласти

#Область ОбработчикиСсылочныхИАналогичныхТипов
Функция СериализоватьВПростыеТипы(Значение, Знач ТолькоСсылка = Истина) Экспорт
	
	// Проверим, что значение еще не обрабатывалось
	Если ТолькоСсылка Тогда
		НовоеЗначение = СсылкиСтруктурой().Получить(Значение);
	Иначе
		НовоеЗначение = ОбъектыСтруктурой().Получить(Значение);
	КонецЕсли;
	
	Если Не НовоеЗначение = Неопределено Тогда
		Возврат НовоеЗначение;
	КонецЕсли;
	
	// обработка не ссылочных типов
	ТипЗначения = ТипЗнч(Значение);	
	Обработчик = ОбработчикиТипов().Получить(ТипЗначения);
	
	Если Не Обработчик = Неопределено Тогда // это для не ссылочных типов данных
		Выполнить("НовоеЗначение = " + Обработчик);	
		Возврат НовоеЗначение;
	КонецЕсли;
	
	// todo надо ли проверять дополнительно, если следующий блок кода вернет это простое значение сам?
	Если ЭтоПростойТип(Значение) Тогда
		Возврат Значение;
	КонецЕсли;
	
	МетаданныеЗначения=Метаданные.НайтиПоТипу(ТипЗначения);
	Если МетаданныеЗначения=Неопределено Тогда       
		Выполнить("обработчик_ЗначениеВСтрокуВнутр(Значение)");
        Возврат НовоеЗначение;
	КонецЕсли;
	
	//МетаданныеЗначения = Значение.Метаданные();
		
	Если Метаданные.Справочники.Содержит(МетаданныеЗначения) Тогда			
		НовоеЗначение = СериализоватьВСтруктуру(Значение,"СправочникСсылка", ТолькоСсылка, МетаданныеЗначения);
			
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеЗначения) Тогда			
		НовоеЗначение = СериализоватьВСтруктуру(Значение,"ДокументСсылка", ТолькоСсылка, МетаданныеЗначения);
		
	ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеЗначения) Тогда
		НовоеЗначение = СериализоватьВСтруктуру(Значение,"ПеречислениеСсылка", ТолькоСсылка, МетаданныеЗначения);
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеЗначения) Тогда		
		НовоеЗначение = СериализоватьВСтруктуру(Значение,"ПланВидовХарактеристикСсылка", ТолькоСсылка, МетаданныеЗначения);
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеЗначения) Тогда		
		НовоеЗначение = СериализоватьВСтруктуру(Значение,"ПланСчетовСсылка", ТолькоСсылка, МетаданныеЗначения);
		                       
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеЗначения) Тогда		
		НовоеЗначение = СериализоватьВСтруктуру(Значение,"ПланВидовРасчетаСсылка", ТолькоСсылка, МетаданныеЗначения);
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеЗначения) Тогда		
		НовоеЗначение = СериализоватьВСтруктуру(Значение,"БизнесПроцессСсылка", ТолькоСсылка, МетаданныеЗначения);
		
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеЗначения) Тогда		
		НовоеЗначение = СериализоватьВСтруктуру(Значение,"ЗадачаСсылка", ТолькоСсылка, МетаданныеЗначения);
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеЗначения) Тогда
		НовоеЗначение = ВыгрузитьНаборЗаписей(Значение, "РегистрСведенийНаборЗаписей", МетаданныеЗначения);
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеЗначения) Тогда
		НовоеЗначение = ВыгрузитьНаборЗаписей(Значение, "РегистрНакопленияНаборЗаписей", МетаданныеЗначения);
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеЗначения) Тогда
		НовоеЗначение = ВыгрузитьНаборЗаписей(Значение, "РегистрБухгалтерииНаборЗаписей", МетаданныеЗначения);
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(МетаданныеЗначения) Тогда
		НовоеЗначение = ВыгрузитьНаборЗаписей(Значение, "РегистрРасчетаНаборЗаписей", МетаданныеЗначения);
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеЗначения) Тогда
		НовоеЗначение = Неопределено;
	Иначе
		ВызватьИсключение "Ошика сериализации. Встретился неподдерживаемый тип данных: " + ТипЗначения + " (" + Значение + ")";
	КонецЕсли;
	
	Если ТолькоСсылка Тогда
		СсылкиСтруктурой().Вставить(Значение, НовоеЗначение);
	Иначе
		ОбъектыСтруктурой().Вставить(Значение, НовоеЗначение);
	КонецЕсли;
	
	Возврат НовоеЗначение;
КонецФункции

Функция СериализоватьВСтруктуру(Знач ЗначениеСсылка, КоллекцияТипа, ТолькоСсылка = Ложь, МетаданныеЗначения)		
	Если Не ЗначениеЗаполнено(ЗначениеСсылка) Тогда
		Возврат Неопределено;
	ИначеЕсли ТолькоСсылка Тогда                                                 
		ЗначениеСтруктура = Новый Структура(РеквизитыТолькоСсылка()[КоллекцияТипа]);
		Если ТипЗнч(ЗначениеСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
			ЗначениеСтруктура.Вставить("ИНН");
			ЗначениеСтруктура.Вставить("КПП");
		ИначеЕсли ТипЗнч(ЗначениеСсылка) = Тип("СправочникСсылка.Номенклатура") Тогда
			ЗначениеСтруктура.Вставить("Артикул");
		ИначеЕсли ТипЗнч(ЗначениеСсылка) = Тип("СправочникСсылка.Организации") Тогда
			ЗначениеСтруктура.Вставить("ИНН");
			ЗначениеСтруктура.Вставить("КПП");
		КонецЕсли;
	Иначе
		ЗначениеСтруктура = Новый Структура(СтандартныеРеквизиты()[КоллекцияТипа]);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗначениеСтруктура, ЗначениеСсылка);
	
	ЗначениеСтруктура.Вставить("Тип", КоллекцияТипа + "." + МетаданныеЗначения.Имя);
	
	Если Найти(КоллекцияТипа, "ПеречислениеСсылка") Тогда
		ЗначениеСсылка = ПолучитьПолноеИмяПредопределенногоЗначения(ЗначениеСсылка);
		ЗначениеСсылка = СтрРазделить(ЗначениеСсылка, ".");
		ЗначениеСтруктура.Вставить("Значение", ЗначениеСсылка[ЗначениеСсылка.ВГраница()]);	
	ИначеЕсли Найти(КоллекцияТипа, "ДокументСсылка") Тогда
		ЗначениеСтруктура.Вставить("Ссылка", Строка(ЗначениеСсылка.УникальныйИдентификатор()));
	Иначе
		ЗначениеСтруктура.Вставить("Ссылка", Строка(ЗначениеСсылка.УникальныйИдентификатор()));		
	КонецЕсли;
	
	Если ТолькоСсылка Тогда
		Возврат ЗначениеСтруктура;		
	КонецЕсли;	
	
	Если Найти(КоллекцияТипа, "ПеречислениеСсылка") Тогда		
	ИначеЕсли Найти(КоллекцияТипа, "ДокументСсылка") Тогда		
	Иначе
		СериализоватьРодителя(ЗначениеСсылка, МетаданныеЗначения, ЗначениеСтруктура, КоллекцияТипа);
		СериализоватьВладельца(ЗначениеСсылка, МетаданныеЗначения, ЗначениеСтруктура, КоллекцияТипа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСсылка) и Найти(КоллекцияТипа, "ПеречислениеСсылка") = 0 Тогда
		//ВыгрузитьСтандартныеРеквизиты(МетаданныеЗначения, ЗначениеСсылка, ЗначениеСтруктура, КоллекцияТипа);		
		ВыгрузитьРеквизиты(МетаданныеЗначения,            ЗначениеСсылка, ЗначениеСтруктура, КоллекцияТипа);
		ВыгрузитьТабличныеЧасти(МетаданныеЗначения,       ЗначениеСсылка, ЗначениеСтруктура, КоллекцияТипа);		
	КонецЕсли;	
	
	Возврат ЗначениеСтруктура;
КонецФункции // СериализоватьВСтруктуру()

Функция СериализоватьРодителя(ЗначениеСсылка, МетаданныеЗначения, ЗначениеСтруктура, КоллекцияТипа)
	
	ЗначениеСтруктура.Вставить("Родитель", Неопределено);
	ЗначениеСтруктура.Вставить("ЭтоГруппа", Ложь);
	
	Если Найти(КоллекцияТипа, "ПланСчетовСсылка") Тогда
		ЗначениеСтруктура.Вставить("Родитель", ЗначениеСсылка.Родитель);		
		Возврат ЗначениеСтруктура;
	КонецЕсли;
	
	Если Найти(КоллекцияТипа, "ПланВидовРасчетаСсылка") Тогда		
		Возврат ЗначениеСтруктура;
	КонецЕсли;	
			
	Попытка
		Если МетаданныеЗначения.Иерархический Тогда
			Если МетаданныеЗначения.ВидИерархии = Платформа1с.ВидыИерархии.ИерархияГруппИэлементов 
				И ЗначениеЗаполнено(ЗначениеСсылка.Родитель) Тогда
				ЗначениеСтруктура.Вставить("Родитель", ЗначениеСсылка.Родитель);
				ЗначениеСтруктура.Вставить("ЭтоГруппа", ЗначениеСсылка.ЭтоГруппа);
			ИначеЕсли МетаданныеЗначения.ВидИерархии = Платформа1с.ВидыИерархии.ИерархияЭлементов Тогда
				ЗначениеСтруктура.Вставить("Родитель", ПустаяСсылка());
				ЗначениеСтруктура.Вставить("ЭтоГруппа", ЗначениеСсылка.ЭтоГруппа);
			Иначе
				ЗначениеСтруктура.Вставить("Родитель", Неопределено);
				ЗначениеСтруктура.Вставить("ЭтоГруппа", ЗначениеСсылка.ЭтоГруппа);
			КонецЕсли;
		КонецЕсли;                                                                
	Исключение		
	КонецПопытки;
	
	Возврат ЗначениеСтруктура;
	
КонецФункции

Функция СериализоватьВладельца(ЗначениеСсылка, МетаданныеЗначения, ЗначениеСтруктура, КоллекцияТипа)
	Если Найти(КоллекцияТипа, "ПланСчетовСсылка") Тогда		
		ЗначениеСтруктура.Вставить("Владелец", Неопределено);
		Возврат ЗначениеСтруктура;
	КонецЕсли;
	
	Если Найти(КоллекцияТипа, "ПланВидовРасчетаСсылка") Тогда		
		ЗначениеСтруктура.Вставить("Владелец", Неопределено);
		Возврат ЗначениеСтруктура;
	КонецЕсли;
	
	Если Найти(КоллекцияТипа, "ПланВидовХарактеристикСсылка") Тогда		
		ЗначениеСтруктура.Вставить("Владелец", Неопределено);
		Возврат ЗначениеСтруктура;
	КонецЕсли;
		
	Если МетаданныеЗначения.Владельцы.Количество() и ЗначениеЗаполнено(ЗначениеСсылка.Владелец) Тогда
		ЗначениеСтруктура.Вставить("Владелец", ЗначениеСсылка.Владелец);
	ИначеЕсли МетаданныеЗначения.Владельцы.Количество() Тогда
		ЗначениеСтруктура.Вставить("Владелец", ПустаяСсылка());
	Иначе
		ЗначениеСтруктура.Вставить("Владелец", Неопределено);
	КонецЕсли;
	
	Возврат ЗначениеСтруктура;
КонецФункции

Функция СтандартныеРеквизиты()
	
	// Владелец, ЭтоГруппа, Родитель, - вычисляются отдельно
	
	СтандартныеРеквизиты = Новый Структура;
	СтандартныеРеквизиты.Вставить("СправочникСсылка", "Код, Наименование, ПометкаУдаления, Предопределенный, ИмяПредопределенныхДанных");
	СтандартныеРеквизиты.Вставить("ДокументСсылка", "Номер, Дата, Проведен, ПометкаУдаления");
	СтандартныеРеквизиты.Вставить("ПланСчетовСсылка", "Код, Наименование, Порядок, Вид, Забаллансовый, ПометкаУдаления, Предопределенный, ИмяПредопределенныхДанных");
	СтандартныеРеквизиты.Вставить("ПланВидовХарактеристикСсылка", "Код, Наименование, ТипЗначения, ПометкаУдаления, Предопределенный, ИмяПредопределенныхДанных");
	СтандартныеРеквизиты.Вставить("ПланВидовРасчетаСсылка", "Код, Наименование, ПометкаУдаления, Предопределенный, ИмяПредопределенныхДанных"); // todo еще периоддействия базовый надо вычислять
	СтандартныеРеквизиты.Вставить("ПеречислениеСсылка", "Подрядок");
	СтандартныеРеквизиты.Вставить("БизнесПроцессСсылка", "Код, Наименование, ПометкаУдаления, Предопределенный, ИмяПредопределенныхДанных");
	
	Возврат СтандартныеРеквизиты;
КонецФункции

Функция РеквизитыТолькоСсылка()
	РеквизитыТолькоСсылка = Новый Структура;
	РеквизитыТолькоСсылка.Вставить("СправочникСсылка", "Код, Наименование, Предопределенный, ИмяПредопределенныхДанных");
	РеквизитыТолькоСсылка.Вставить("ДокументСсылка", "Дата, Номер");
	РеквизитыТолькоСсылка.Вставить("ПланСчетовСсылка", "Код, Наименование, Предопределенный, ИмяПредопределенныхДанных");
	РеквизитыТолькоСсылка.Вставить("ПланВидовХарактеристикСсылка", "Код, Наименование, Предопределенный, ИмяПредопределенныхДанных");
	РеквизитыТолькоСсылка.Вставить("ПланВидовРасчетаСсылка", "Код, Наименование, Предопределенный, ИмяПредопределенныхДанных");
	РеквизитыТолькоСсылка.Вставить("ПеречислениеСсылка", "");
	РеквизитыТолькоСсылка.Вставить("БизнесПроцессСсылка", "Код, Наименование, Предопределенный, ИмяПредопределенныхДанных");
	
	Возврат РеквизитыТолькоСсылка;
КонецФункции

Функция ВыгрузитьРеквизиты(Мета, ЗначениеСсылка, Данные, КоллекцияТипа);
	
	Для Каждого Реквизит Из Мета.Реквизиты Цикл
		Если Найти(КоллекцияТипа, "СправочникСсылка") Тогда
			Использование = Строка(Реквизит.Использование);
			Если ЗначениеСсылка.ЭтоГруппа Тогда
				Если Использование = "ДляГруппы" или Использование = "ДляГруппыИЭлемента" Тогда
					ЗначениеРеквизита = ЗначениеСсылка[Реквизит.Имя];		
					Данные.Вставить(Реквизит.Имя, СериализоватьВПростыеТипы(ЗначениеРеквизита));
				КонецЕсли;
			Иначе
				ЗначениеРеквизита = ЗначениеСсылка[Реквизит.Имя];						
				Данные.Вставить(Реквизит.Имя, СериализоватьВПростыеТипы(ЗначениеРеквизита));
			КонецЕсли;
		Иначе
			ЗначениеРеквизита = ЗначениеСсылка[Реквизит.Имя];
			Данные.Вставить(Реквизит.Имя, СериализоватьВПростыеТипы(ЗначениеРеквизита));			
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ВыгрузитьТабличныеЧасти(Мета, ЗначениеСсылка, Данные, КоллекцияТипа)
	
	стрТЧ = Новый Структура;
	Для Каждого МетаТЧ Из Мета.ТабличныеЧасти Цикл
		ДанныеТЧ = Новый Массив;
		Реквизиты = Мета.ТабличныеЧасти[МетаТЧ.Имя].Реквизиты;
		
		ТЧ = ЗначениеСсылка[МетаТЧ.Имя];
		Если ТЧ.Количество() Тогда
			Для Каждого Строка Из Тч Цикл
				НоваяСтрока = Новый Структура;
				Для Каждого Реквизит Из Реквизиты Цикл
					ЗначениеРеквизита = Строка[Реквизит.Имя];
					НоваяСтрока.Вставить(Реквизит.Имя, ЗначениеРеквизита);
					НоваяСтрока.Вставить(Реквизит.Имя, СериализоватьВПростыеТипы(Строка[Реквизит.Имя]));
				КонецЦикла;	
				ДанныеТЧ.Добавить(НоваяСтрока);
			КонецЦикла;
		КонецЕсли;
		стрТЧ.Вставить(МетаТЧ.Имя, ДанныеТЧ);
	КонецЦикла;
	Данные.Вставить("ТЧ", стрТЧ);
	
КонецФункции

Функция ВыгрузитьНаборЗаписей(Источник, КоллекцияТипа, МетаданныеЗначения)	
	
	Данные = Источник.Выгрузить();
	
	ДанныеНабора = Новый Структура("Тип, Отбор, НаборЗаписей");
	ДанныеНабора.Вставить("Тип", КоллекцияТипа + "." + МетаданныеЗначения.Имя);
	ДанныеНабора.Вставить("НаборЗаписей", Данные);
	
	Отбор = Новый Массив;
	Для Каждого ЭлементОтбора Из Источник.Отбор Цикл
		СтруктураОтбора = Новый Структура("Имя, ВидСравнения, Значение");
		СтруктураОтбора.Вставить("Имя",          ЭлементОтбора.Имя);
		СтруктураОтбора.Вставить("ВидСравнения", ЗначениеВСтрокуВнутр(ЭлементОтбора.ВидСравнения));
		СтруктураОтбора.Вставить("Значение",     ЭлементОтбора.Значение);
		СтруктураОтбора.Вставить("Использование",ЭлементОтбора.Использование);
		
		Отбор.Добавить(СтруктураОтбора);
	КонецЦикла;
	ДанныеНабора.Вставить("Отбор", Отбор);
	Возврат ДанныеНабора;
	
КонецФункции

Функция ПустаяСсылка()
	
	Возврат Неопределено;
	
КонецФункции

Функция ЭтоПростойТип(Значение)
	
	Возврат НЕ ПростыеТипы().Получить(ТипЗнч(Значение)) = Неопределено;
	
КонецФункции

Функция ПростыеТипы()
	
	ПростыеТипы = Новый Соответствие;
	ПростыеТипы.Вставить(Тип("Строка"), "");
	ПростыеТипы.Вставить(Тип("Число"), "");
	ПростыеТипы.Вставить(Тип("Булево"), "");
	ПростыеТипы.Вставить(Тип("Дата"), "");
	ПростыеТипы.Вставить(Тип("Неопределено"), "");
	ПростыеТипы.Вставить(Тип("Null"), "");
	ПростыеТипы.Вставить(Тип("УникальныйИдентификатор"), "");
	
	Возврат ПростыеТипы;
	
КонецФункции
#КонецОбласти

#КонецОбласти

#Область ПрочитатьJSON_Расширенная
Функция ПрочитатьJSON_Расширенная(СтрокаJSON, ИменаПолейСДатами = "date") Экспорт

	СтруктураJSON = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Попытка
		СтруктураJSON = ПрочитатьJSON(ЧтениеJSON, Ложь, ИменаПолейСДатами, ФорматДатыJSON.ISO);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	// todo восстановить даты рекурсивно
	
	Возврат СтруктураJSON;
	
КонецФункции // СтруктураВJSON()

Функция ПрочитатьJSON_Стандартная(СтрокаJSON, ИменаПолейСДатами = "date") Экспорт

	СтруктураJSON = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Попытка
		СтруктураJSON = ПрочитатьJSON(ЧтениеJSON, Ложь, ИменаПолейСДатами, ФорматДатыJSON.ISO);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат СтруктураJSON;
	
КонецФункции // СтруктураВJSON()

#КонецОбласти

#Область ПарсингВходящихДанных 
Функция ЗаписатьДанные() Экспорт
	
	Если Не ЗначениеЗаполнено(ВходящиеДанные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ТипЗнч(ВходящиеДанные) = Тип("Структура") Тогда
		ВызватьИсключение "Не верный тип входящих данных. Получено: " + ТипЗнч(ВходящиеДанные) + ". Ожидается - структура";		
	КонецЕсли;
	
	Если ВходящиеДанные.Свойство("Тип") Тогда
		Если Найти(ВходящиеДанные.Тип, "СправочникСсылка") Тогда
			ВыполнитьОбработку_Справочник();
		ИначеЕсли Найти(ВходящиеДанные.Тип, "ДокументСсылка") Тогда
			ВыполнитьОбработку_Документ();
		ИначеЕсли Найти(ВходящиеДанные.Тип, "ПланВидовХарактеристикСсылка") Тогда
			ВыполнитьОбработку_ПланВидовХарактеристик();
		ИначеЕсли Найти(ВходящиеДанные.Тип, "ПланВидовРасчета") Тогда
			ВыполнитьОбработку_ПланВидовРасчета();
		ИначеЕсли Найти(ВходящиеДанные.Тип, "РегистрСведений") Тогда
			ВыполнитьОбработку_РегистрСведений();
		ИначеЕсли Найти(ВходящиеДанные.Тип, "РегистрНакопления") Тогда
			ВыполнитьОбработку_РегистрНакопления();
		ИначеЕсли Найти(ВходящиеДанные.Тип, "РегистрРасчета") Тогда
			ВыполнитьОбработку_РегистрРасчета();
		КонецЕсли;
	Иначе
		Если НЕ ПравилаКонвертации = Неопределено Тогда
			ФункцияПравил = Неопределено;
			ПравилаКонвертации.Манифест.Свойство("ОбработчикПроизвольныеДанные", ФункцияПравил);
			Если Не ФункцияПравил = Неопределено Тогда
				ТекстВызоваФункции = СтрШаблон("ПравилаКонвертации.%1(ВходящиеДанные)", ФункцияПравил);
				Выполнить(ТекстВызоваФункции);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции
#КонецОбласти

#Область ПравилаКонвертацииИсточник
Функция СтруктураДокумента()
	Структура = "Дата, Номер, Ссылка, СуммаВключаетНДС, Контрагент, Склад, ДоговорКонтрагента, ДокументРеализации, ДокументПоступления";
	
	Структура = Новый Структура(Структура);	
	
	Возврат Структура;
КонецФункции

Функция СтруктураСправочника()
	Структура = "Код, Наименование, Ссылка";
	
	Структура = Новый Структура(Структура);	
	
	Возврат Структура;
КонецФункции

Функция СтруктураКонтрагента()
	Структура = СтруктураСправочника();
	
	Возврат Структура;
КонецФункции

Функция СтруктураДоговора()
	Структура = СтруктураСправочника();
	
	Возврат Структура;
КонецФункции

Функция СтруктураНоменклатуры()
	Структура = СтруктураСправочника();
	Структура.Вставить("Артикул");
	
	Возврат Структура;
КонецФункции

Функция ТЧМассивом(ТЧ)
	ТЧМассивом = Новый Массив;
	Для Каждого Строка Из ТЧ Цикл
		НоваяСтрока = СтруктураСтрокаТЧ();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Номенклатура = СправочникСтруктурой(НоваяСтрока.Номенклатура);
		ТЧМассивом.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Возврат ТЧМассивом;
КонецФункции

Функция СтруктураСтрокаТЧ()
	СтруктураСтрокаТЧ = "Номенклатура, Количество, Цена, Сумма, СуммаНДС, СтавкаНДС";
	СтруктураСтрокаТЧ = Новый Структура(СтруктураСтрокаТЧ );
	
	Возврат СтруктураСтрокаТЧ;
КонецФункции

Функция ДокументСтруктурой(Значение)
	Данные = СтруктураДокумента();
	ЗаполнитьЗначенияСвойств(Данные, Значение);
	Данные.Вставить("Организация", СправочникСтруктурой(Значение.Организация));
	Данные.Вставить("Контрагент", СправочникСтруктурой(Значение.Контрагент));
	Данные.Вставить("ДоговорКонтрагента", СправочникСтруктурой(Значение.ДоговорКонтрагента));
	Данные.Вставить("Товары", ТЧМассивом(Значение.Товары));
	Данные.Вставить("Услуги", ТЧМассивом(Значение.Услуги));
	
	Данные.Вставить("Ссылка", Строка(Значение.УникальныйИдентификатор()));
	Данные.Вставить("Тип", Строка(ТипЗнч(Значение)));
	
	Возврат Данные;
КонецФункции

Функция СправочникСтруктурой(Значение)
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
		Данные = СтруктураНоменклатуры();
	Иначе
		Данные = СтруктураСправочника();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Данные, Значение);
	
	Данные.Вставить("Ссылка", Строка(Значение.УникальныйИдентификатор()));	
	Данные.Вставить("Тип", Строка(ТипЗнч(Значение)));
	Возврат Данные;
КонецФункции
#КонецОбласти

#Область ПравилаКонвертацииПриемник

Функция ВыполнитьОбработку_Документ();
	
	ТипОбъекта = СтрРазделить(ВходящиеДанные.Тип, ".")[1];
	
	Ссылка = ПолучитьСсылку_НаДокументПоИдентификатору(ВходящиеДанные);
	Объект1с = Ссылка.ПолучитьОбъект();	
	
	Если Объект1с = Неопределено Тогда		
		Объект1с = Документы[ТипОбъекта].СоздатьДокумент();
		Объект1с.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;	
	
	ЗаполнитьСсылки(ВходящиеДанные);	
	ЗаполнитьЗначенияСвойств(Объект1с, ВходящиеДанные);	

	Если ВходящиеДанные.Свойство("ТЧ") Тогда
		Для Каждого ТЧ Из ВходящиеДанные.ТЧ Цикл
			Попытка
				Объект1с[ТЧ.Ключ].Очистить();
				Для Каждого Строка Из ТЧ.Значение Цикл
					ЗаполнитьСсылки(Строка);	
					НоваяСтрока = Объект1с[ТЧ.Ключ].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);					
				КонецЦикла;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	//Если ТипОбъекта = "ПроизводствоБезЗаказа" Тогда
	//	ВыполнитьОбработку_ПроизводствоБезЗаказа(Объект1с);	
	//КонецЕсли;
	
	ВыполнитьАлгоритм("ПередЗаписью", Объект1с, Отказ);
	
	ЗаписатьДокумент(Объект1с);	
	
	ВыполнитьАлгоритм("ПриЗаписи", Объект1с, Отказ);
	
	Возврат Объект1с.Ссылка;
	
КонецФункции

Функция ВыполнитьОбработку_Справочник()
		
	ТипОбъекта = СтрРазделить(ВходящиеДанные.Тип, ".")[1];
	
	ВыполнитьАлгоритм("ПередОбработкой", Неопределено, Отказ);	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// todo Обработчик поиска
	ПолучитьСсылкуНаСправочник();
	
	// todo Обработчик получение объекта
	Если Не СсылкаНаОбъект = Неопределено Тогда
		Попытка
			Объект1с = СсылкаНаОбъект.ПолучитьОбъект();
		Исключение
		КонецПопытки;
	Иначе
		Объект1с = Неопределено;
	КонецЕсли;
	
	Если НЕ Объект1с = Неопределено Тогда
		Возврат СсылкаНаОбъект;
	КонецЕсли;
		
	// todo Обработчик создание объекта
	Если Объект1с = Неопределено Тогда
		Если ВходящиеДанные.Свойство("ЭтоГруппа") И ВходящиеДанные.ЭтоГруппа Тогда
			Объект1с = Справочники[ТипОбъекта].СоздатьГруппу();
		Иначе
			Объект1с = Справочники[ТипОбъекта].СоздатьЭлемент();
		КонецЕсли;
		Если Не СсылкаНаОбъект = Неопределено Тогда
			Объект1с.УстановитьСсылкуНового(СсылкаНаОбъект);
		КонецЕсли;
	КонецЕсли;
	
	// todo Обработчик заполнение реквизитов
	ЗаполнитьСсылки(ВходящиеДанные);	
	ЗаполнитьЗначенияСвойств(Объект1с, ВходящиеДанные, , ИсключаяСвойстваСправочник(ТипОбъекта));
	
	// todo Обработчик заполнение табличных частей
	Если ВходящиеДанные.Свойство("ТЧ") Тогда
		Для Каждого ТЧ Из ВходящиеДанные.ТЧ Цикл
			Попытка
				Объект1с[ТЧ.Ключ].Очистить();
				Для Каждого Строка Из ТЧ.Значение Цикл
					ЗаполнитьСсылки(Строка);	
					НоваяСтрока = Объект1с[ТЧ.Ключ].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);					
				КонецЦикла;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
		
	ВыполнитьАлгоритм("ПередЗаписью", Объект1с, Отказ);
		
	Объект1с.ОбменДанными.Загрузка = Истина;
	Объект1с.Записать();
	
	ВыполнитьАлгоритм("ПриЗаписи", Объект1с, Отказ);
	
	Возврат Объект1с.Ссылка;
	
КонецФункции

Функция ВыполнитьОбработку_ПланВидовХарактеристик()
	
	ТипОбъекта = СтрРазделить(ВходящиеДанные.Тип, ".")[1];
	// todo Обработчик перед обработкой
	Если ТипОбъекта = "РесурсныеСпецификации" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// todo Обработчик поиска
	Ссылка = ПолучитьСсылкуНаПланВидовХарактеристик(ВходящиеДанные);
	
	// todo Обработчик получение объекта
	Если Не Ссылка = Неопределено Тогда
		Попытка
			Объект1с = Ссылка.ПолучитьОбъект();
		Исключение
		КонецПопытки;
	Иначе
		Объект1с = Неопределено;
	КонецЕсли;
	
	// todo Обработчик создание объекта
	Если Объект1с = Неопределено Тогда
		Если ВходящиеДанные.Свойство("ЭтоГруппа") И ВходящиеДанные.ЭтоГруппа Тогда
			Объект1с = ПланыВидовХарактеристик[ТипОбъекта].СоздатьГруппу();
		Иначе
			Объект1с = ПланыВидовХарактеристик[ТипОбъекта].СоздатьЭлемент();
		КонецЕсли;
		Если Не Ссылка = Неопределено Тогда
			Объект1с.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// todo Обработчик заполнение реквизитов
	ЗаполнитьСсылки(ВходящиеДанные);	
	ЗаполнитьЗначенияСвойств(Объект1с, ВходящиеДанные, , ИсключаяСвойстваПланВидовХарактеристик(ТипОбъекта));
	
	// todo Обработчик заполнение табличных частей
	Если ВходящиеДанные.Свойство("ТЧ") Тогда
		Для Каждого ТЧ Из ВходящиеДанные.ТЧ Цикл
			Попытка
				Объект1с[ТЧ.Ключ].Очистить();
				Для Каждого Строка Из ТЧ.Значение Цикл
					ЗаполнитьСсылки(Строка);	
					НоваяСтрока = Объект1с[ТЧ.Ключ].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);					
				КонецЦикла;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
		
	ФункцияПравил = Неопределено;
	Если НЕ ПравилаКонвертации = Неопределено Тогда
		Обработчики = Неопределено;
		ПравилаКонвертации.Манифест.Свойство(ТипОбъекта, Обработчики);
		Если Не Обработчики = Неопределено Тогда
			Обработчики.Свойство("ПередЗаписью", ФункцияПравил);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ФункцияПравил = Неопределено Тогда
		ТекстВызоваФункции = СтрШаблон("ПравилаКонвертации.%1(Объект1с, ВходящиеДанные)", ФункцияПравил);
		Выполнить(ТекстВызоваФункции);
	КонецЕсли;
		
	Объект1с.ОбменДанными.Загрузка = Истина;
	Объект1с.ДополнительныеСвойства.Вставить("леОбменДанными", Истина);
	Объект1с.Записать();
	
	// todo Обработчик обработчик при записи
	
	Возврат Объект1с.Ссылка;
	
КонецФункции

Функция ВыполнитьОбработку_ПланВидовРасчета()
	
	ТипОбъекта = СтрРазделить(ВходящиеДанные.Тип, ".")[1];
	// todo Обработчик перед обработкой
	Если ТипОбъекта = "РесурсныеСпецификации" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// todo Обработчик поиска
	Ссылка = ПолучитьСсылкуНаПланВидовРасчета(ВходящиеДанные);
	
	// todo Обработчик получение объекта
	Если Не Ссылка = Неопределено Тогда
		Попытка
			Объект1с = Ссылка.ПолучитьОбъект();
		Исключение
		КонецПопытки;
	Иначе
		Объект1с = Неопределено;
	КонецЕсли;
	
	// todo Обработчик создание объекта
	Если Объект1с = Неопределено Тогда
		Объект1с = ПланыВидовРасчета[ТипОбъекта].СоздатьВидРасчета();
		Если Не Ссылка = Неопределено Тогда
			Объект1с.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// todo Обработчик заполнение реквизитов
	ЗаполнитьСсылки(ВходящиеДанные);	
	ЗаполнитьЗначенияСвойств(Объект1с, ВходящиеДанные);//, , ИсключаяСвойстваПланВидовРасчета(ТипОбъекта));
	
	// todo Обработчик заполнение табличных частей
	Если ВходящиеДанные.Свойство("ТЧ") Тогда
		Для Каждого ТЧ Из ВходящиеДанные.ТЧ Цикл
			Попытка
				Объект1с[ТЧ.Ключ].Очистить();
				Для Каждого Строка Из ТЧ.Значение Цикл
					ЗаполнитьСсылки(Строка);	
					НоваяСтрока = Объект1с[ТЧ.Ключ].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);					
				КонецЦикла;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
		
	ФункцияПравил = Неопределено;
	Если НЕ ПравилаКонвертации = Неопределено Тогда
		Обработчики = Неопределено;
		ПравилаКонвертации.Манифест.Свойство(ТипОбъекта, Обработчики);
		Если Не Обработчики = Неопределено Тогда
			Обработчики.Свойство("ПередЗаписью", ФункцияПравил);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ФункцияПравил = Неопределено Тогда
		ТекстВызоваФункции = СтрШаблон("ПравилаКонвертации.%1(Объект1с, ВходящиеДанные)", ФункцияПравил);
		Выполнить(ТекстВызоваФункции);
	КонецЕсли;
		
	Объект1с.ОбменДанными.Загрузка = Истина;
	Объект1с.ДополнительныеСвойства.Вставить("леОбменДанными", Истина);
	Объект1с.Записать();
	
	// todo Обработчик обработчик при записи
	
	Возврат Объект1с.Ссылка;
КонецФункции

Функция ВыполнитьОбработку_РегистрСведений()	
	
	// todo очистка набора записей так не сработает
	Если ВходящиеДанные.НаборЗаписей.Количество() = 0 Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ТипОбъекта = СтрРазделить(ВходящиеДанные.Тип, ".")[1];
	
	Мета = Метаданные.РегистрыСведений.Найти(ТипОбъекта);
	Если Мета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Мета.РежимЗаписи = Платформа1с.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда // запись с отборами
		НаборЗаписей = РегистрыСведений[ТипОбъекта].СоздатьНаборЗаписей();
		
		Для Каждого ЭлементОтбора Из ВходящиеДанные.Отбор Цикл
			Если ЭлементОтбора.Использование Тогда
				ЗаполнитьСсылки(ЭлементОтбора);		
				НаборЗаписей.Отбор[ЭлементОтбора.Имя].Установить(ЭлементОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из ВходящиеДанные.НаборЗаписей Цикл
			ЗаполнитьСсылки(Строка);	
			
			НоваяСтрока = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);		
		КонецЦикла;
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ДополнительныеСвойства.Вставить("леОбменДанными", Истина);	
		
		ВыполнитьАлгоритм("ПередЗаписью", НаборЗаписей, Отказ);	
					
		НаборЗаписей.Записать();
		
		ВыполнитьАлгоритм("ПриЗаписи", НаборЗаписей, Отказ);		
	Иначе // запись через менеджер		
		Для Каждого Строка Из ВходящиеДанные.НаборЗаписей Цикл
			НаборЗаписей = РегистрыСведений[ТипОбъекта].СоздатьНаборЗаписей();
			ЗаполнитьСсылки(Строка);
					
			Для Каждого ЭлементОтбора Из ВходящиеДанные.Отбор Цикл
				НаборЗаписей.Отбор[ЭлементОтбора.Имя].Установить(Строка[ЭлементОтбора.Имя]);				
			КонецЦикла;
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("леОбменДанными", Истина);	
			
			ВыполнитьАлгоритм("ПередЗаписью", НаборЗаписей, Отказ);	
						
			НаборЗаписей.Записать();
			
			ВыполнитьАлгоритм("ПриЗаписи", НаборЗаписей, Отказ);		
		КонецЦикла;
	КонецЕсли;	
КонецФункции

Функция ВыполнитьОбработку_РегистрНакопления()	
	
	Если ВходящиеДанные.НаборЗаписей.Количество() = 0 Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ТипОбъекта = СтрРазделить(ВходящиеДанные.Тип, ".")[1];
	
	НаборЗаписей = РегистрыНакопления[ТипОбъекта].СоздатьНаборЗаписей();
	
	Для Каждого ЭлементОтбора Из ВходящиеДанные.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			ЗаполнитьСсылки(ЭлементОтбора);		
			НаборЗаписей.Отбор[ЭлементОтбора.Имя].Установить(ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ВходящиеДанные.НаборЗаписей Цикл	
		ЗаполнитьСсылки(Строка);
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Строка);		
	КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ДополнительныеСвойства.Вставить("леОбменДанными", Истина);	
	НаборЗаписей.Записать();
	
	//Если ТипОбъекта = "ШтрихкодыНоменклатуры" Тогда
	//	ВыполнитьОбработку_ШтрихкодыНоменклатуры(НаборЗаписей);	
	//КонецЕсли;	
КонецФункции

Функция ВыполнитьОбработку_РегистрРасчета()	
	
	Если ВходящиеДанные.НаборЗаписей.Количество() = 0 Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ТипОбъекта = СтрРазделить(ВходящиеДанные.Тип, ".")[1];
	
	НаборЗаписей = РегистрыРасчета[ТипОбъекта].СоздатьНаборЗаписей();
	
	Для Каждого ЭлементОтбора Из ВходящиеДанные.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			ЗаполнитьСсылки(ЭлементОтбора);		
			НаборЗаписей.Отбор[ЭлементОтбора.Имя].Установить(ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ВходящиеДанные.НаборЗаписей Цикл		
		ЗаполнитьСсылки(Строка);
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Строка);		
	КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ДополнительныеСвойства.Вставить("леОбменДанными", Истина);	
	НаборЗаписей.Записать();
	
	//Если ТипОбъекта = "ШтрихкодыНоменклатуры" Тогда
	//	ВыполнитьОбработку_ШтрихкодыНоменклатуры(НаборЗаписей);	
	//КонецЕсли;	
КонецФункции

Функция ПолучитьСсылкуНаСправочник()		
	
	СсылкаНаОбъект = Неопределено;
	Если НЕ ВыполнитьАлгоритмПоиска(ТипОбъекта, ВходящиеДанные, СсылкаНаОбъект) Тогда
		Если ЗначениеЗаполнено(ВходящиеДанные.ИмяПредопределенныхДанных) Тогда
			Попытка
				СсылкаНаОбъект = Справочники[ТипОбъекта][ВходящиеДанные.ИмяПредопределенныхДанных]
			Исключение
			КонецПопытки;
		Иначе
			ИД = Новый УникальныйИдентификатор(ВходящиеДанные.Ссылка);		
			СсылкаНаОбъект = Справочники[ТипОбъекта].ПолучитьСсылку(ИД);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ОбъектНайден = Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСсылкуНаПланВидовХарактеристик(Данные)		
	
	Если ЗначениеЗаполнено(Данные.ИмяПредопределенныхДанных) Тогда
		Попытка
			Ссылка = ПланыВидовХарактеристик[ТипОбъекта][Данные.ИмяПредопределенныхДанных]
		Исключение
		КонецПопытки;
	Иначе
		ИД = Новый УникальныйИдентификатор(Данные.Ссылка);	
		Ссылка = ПланыВидовХарактеристик[ТипОбъекта].ПолучитьСсылку(ИД);
	КонецЕсли;	
	
	Возврат Ссылка;
	
КонецФункции

Функция ПолучитьСсылкуНаПланВидовРасчета(Данные)		
	
	Если ЗначениеЗаполнено(Данные.ИмяПредопределенныхДанных) Тогда
		Попытка
			Ссылка = ПланыВидовРасчета[ТипОбъекта][Данные.ИмяПредопределенныхДанных]
		Исключение
		КонецПопытки;
	Иначе
		ИД = Новый УникальныйИдентификатор(Данные.Ссылка);		
		Ссылка = ПланыВидовРасчета[ТипОбъекта].ПолучитьСсылку(ИД);
	КонецЕсли;	
	
	Возврат Ссылка;
	
КонецФункции

Функция ПолучитьСсылку_НаСправочникПоИдентификатору(Данные)
	ИД = Новый УникальныйИдентификатор(Данные.Ссылка);
	
	Возврат Справочники[ТипОбъекта].ПолучитьСсылку(ИД);
КонецФункции

Функция ПолучитьСсылку_НаДокументПоИдентификатору(Данные)
	ИД = Новый УникальныйИдентификатор(Данные.Ссылка);
		
	Ссылка = Документы[ТипОбъекта].ПолучитьСсылку(ИД);
	
	Если НЕ ЗначениеЗаполнено(Ссылка.ВерсияДанных) Тогда // объект точно ранее не записывался
		Возврат Ссылка;
	Иначе
		Возврат Ссылка;// todo или исключение, т.к. ссылка на существующий объект
	КонецЕсли;
КонецФункции

Функция ИсключаяСвойстваСправочник(Тип)
	// todo кеширование типов надо
	Мета = Метаданные.Справочники.Найти(Тип);
	ИсключаяСвойства = Новый Массив;
	
	Если Мета.Владельцы.Количество() = 0 и ВходящиеДанные.Свойство("Владелец") Тогда
		ИсключаяСвойства.Добавить("Владелец");
	КонецЕсли;
	
	Если НЕ Мета.Иерархический и ВходящиеДанные.Свойство("Родитель") Тогда
		ИсключаяСвойства.Добавить("Родитель");
	КонецЕсли;
	
	Возврат СтрСоединить(ИсключаяСвойства, ",");
КонецФункции

Функция ИсключаяСвойстваПланВидовХарактеристик(Тип)
	// todo кеширование типов надо
	Мета = Метаданные.ПланыВидовХарактеристик.Найти(Тип);
	ИсключаяСвойства = Новый Массив;
	
	Если НЕ Мета.Иерархический и ВходящиеДанные.Свойство("Родитель") Тогда
		ИсключаяСвойства.Добавить("Родитель");
	КонецЕсли;
	
	Возврат СтрСоединить(ИсключаяСвойства, ",");
КонецФункции

Функция ИсключаяСвойстваПланВидовРасчета(Тип)
	// todo кеширование типов надо
	Мета = Метаданные.ПланыВидовРасчета.Найти(Тип);
	ИсключаяСвойства = Новый Массив;
	
	Если НЕ Мета.Иерархический и ВходящиеДанные.Свойство("Родитель") Тогда
		ИсключаяСвойства.Добавить("Родитель");
	КонецЕсли;
	
	Возврат СтрСоединить(ИсключаяСвойства, ",");
КонецФункции

Функция ЗаписатьДокумент(обС)
	обС.ДополнительныеСвойства.Вставить("леОбменДанными", Истина);
	
	Попытка
		обС.ОбменДанными.Загрузка = Истина;
		обС.Записать();
	Исключение				
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
			
	//Проводить = ВходящиеДанные.Проведен ИЛИ обС.Проведен;
	//
	//Ошибки = Новый Массив;
	//
	//Если Проводить Тогда
	//	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	//ИначеЕсли Не обС.Ссылка.Пустая() И обС.Ссылка.Проведен Тогда
	//	РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	//Иначе
	//	РежимЗаписи = РежимЗаписиДокумента.Запись;
	//КонецЕсли;	
	//	
	//Попытка
	//	обС.Записать(РежимЗаписи);
	//Исключение
	//	Ошибки.Добавить(ОписаниеОшибки());
	//	Попытка				
	//		обС.ОбменДанными.Загрузка = Истина;
	//		обС.Записать(РежимЗаписиДокумента.Запись);
	//	Исключение				
	//		Ошибки.Добавить(ОписаниеОшибки());
	//	КонецПопытки;			
	//КонецПопытки;

	//Если Ошибки.Количество() Тогда
	//	ВызватьИсключение СтрСоединить(Ошибки, Символы.ПС);
	//КонецЕсли;
КонецФункции

Функция ЗаписатьСправочник(обС)
	обС.ДополнительныеСвойства.Вставить("леОбменДанными", Истина);
	Попытка
		обС.ОбменДанными.Загрузка = Истина;
		обС.Записать();
	Исключение				
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	
КонецФункции

#КонецОбласти

#Область ПравилаКонвертацииСлужебные

Функция ВыполнитьАлгоритм(ГруппаАлгоритмов, Объект1с, Отказ)
	
	ФункцияПравил = Неопределено;
	Если НЕ ПравилаКонвертации = Неопределено Тогда
		Обработчики = Неопределено;
		ПравилаКонвертации.Манифест.Свойство(ТипОбъекта, Обработчики);
		Если Не Обработчики = Неопределено Тогда
			Обработчики.Свойство(ГруппаАлгоритмов, ФункцияПравил);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ФункцияПравил = Неопределено Тогда
		ТекстВызоваФункции = СтрШаблон("ПравилаКонвертации.%1(Объект1с, ВходящиеДанные, Отказ)", ФункцияПравил);
		Выполнить(ТекстВызоваФункции);
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьАлгоритмПоиска(ТипОбъектаПоиска, ДанныеДляПоиска, Значение)
	
	ФункцияПравил = Неопределено;
	Если НЕ ПравилаКонвертации = Неопределено Тогда
		Обработчики = Неопределено;
		ПравилаКонвертации.Манифест.Свойство(ТипОбъектаПоиска, Обработчики);
		Если Не Обработчики = Неопределено Тогда
			Обработчики.Свойство("НайтиСсылку", ФункцияПравил);
			
			Если НЕ ФункцияПравил = Неопределено Тогда
				ТекстВызоваФункции = СтрШаблон("Значение = ПравилаКонвертации.%1(ТипОбъектаПоиска, ДанныеДляПоиска, Отказ)", ФункцияПравил);
				Выполнить(ТекстВызоваФункции);
				Возврат Истина;
			КонецЕсли;			
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Служебные
Функция ВидыИерархии()
	ВидыИерархии = Новый Структура;
	ВидыИерархии.Вставить("ИерархияГруппИэлементов",
	ЗначениеИзСтрокиВнутр("{""#"",82285566-14fa-48ab-84ec-5bb38e9d9fa7,
	                      |{82285566-14fa-48ab-84ec-5bb38e9d9fa7,0}
	                      |}"));
	ВидыИерархии.Вставить("ИерархияЭлементов",
	ЗначениеИзСтрокиВнутр("{""#"",82285566-14fa-48ab-84ec-5bb38e9d9fa7,
                          |{82285566-14fa-48ab-84ec-5bb38e9d9fa7,1}
                          |}"));
	ВидыИерархии.Вставить("Нет",
	ЗначениеИзСтрокиВнутр("{""#"",82285566-14fa-48ab-84ec-5bb38e9d9fa7,
	                      |{82285566-14fa-48ab-84ec-5bb38e9d9fa7,2}
	                      |}"));
	
	Возврат ВидыИерархии;
КонецФункции

Функция РежимЗаписиРегистраПодчинениеРегистратору()
	
	РежимЗаписиРегистра = Новый Структура;
	РежимЗаписиРегистра.Вставить("ПодчинениеРегистратору",
	ЗначениеИзСтрокиВнутр("{""#"",6e8e3740-0f2c-11d6-a3c7-0050bae0a776,
             |{6e8e3740-0f2c-11d6-a3c7-0050bae0a776,1}
             |}"));

	Возврат РежимЗаписиРегистра;
	
КонецФункции
#КонецОбласти

#Область Десериализация
Функция ЗаполнитьСсылки(ДанныеСтруктурой) Экспорт
	
	ТипДанных = ТипЗнч(ДанныеСтруктурой);
	Если Не ТипДанных = Тип("Структура") Тогда
		ВызватьИсключение СтрШаблон("Ошибка десериализации. Получены данные типа %1, а ожидается ""Структура""", ТипДанных);
	КонецЕсли;
	
	Для Каждого ЭлементДанных Из ДанныеСтруктурой Цикл
		Если ТипЗнч(ЭлементДанных.Значение) = Тип("Структура") Тогда
			
			Если ЭлементДанных.Значение.Свойство("Тип") Тогда
				Тип = ЭлементДанных.Значение.Тип;
				Если Найти(Тип, ".") Тогда
					ИмяТипа = СтрРазделить(ЭлементДанных.Значение.Тип, ".");
					Если ИмяТипа.Количество() > 1 Тогда
						ИмяТипа = ИмяТипа[1];
					Иначе
						Продолжить; // Todo
					КонецЕсли;
				Иначе
					ИмяТипа = Тип;
				КонецЕсли;
				
				Если ИмяТипа = "ЗначениеПлатформыСтрокой" Тогда
					Если ТипЗнч(ЭлементДанных.Значение.Значение) = Тип("Строка") Тогда
						Значение = ЗначениеИзСтрокиВнутр(ЭлементДанных.Значение.Значение);
					Иначе
						Значение = ЭлементДанных.Значение.Значение;
					КонецЕсли;
				ИначеЕсли ИмяТипа = "УникальныйИдентификатор" Тогда
					Значение = Новый УникальныйИдентификатор(ЭлементДанных.Значение.Значение);					
				Иначе					
					Значение = НайтиПоРеквизитамИзСтруктуры(ЭлементДанных.Значение, ИмяТипа);
				КонецЕсли;
				
		        ДанныеСтруктурой.Вставить(ЭлементДанных.Ключ, Значение);
				ДанныеСтруктурой.Вставить(ЭлементДанных.Ключ + "_До", ЭлементДанных.Значение);
			Иначе
				ДанныеСтруктурой.Вставить(ЭлементДанных.Ключ, ЭлементДанных.Значение);
				ДанныеСтруктурой.Вставить(ЭлементДанных.Ключ + "_До", ЭлементДанных.Значение);
			КонецЕсли;
			
		ИначеЕсли СтрДлина(ЭлементДанных.Значение) = 19 и Сред(ЭлементДанных.Значение,11,1) = "T" Тогда
			
			Значение = ДатаИзJSON(ЭлементДанных.Значение);
			ДанныеСтруктурой.Вставить(ЭлементДанных.Ключ, Значение);
			ДанныеСтруктурой.Вставить(ЭлементДанных.Ключ + "_До", ЭлементДанных.Значение);
			
		ИначеЕсли СтрДлина(ЭлементДанных.Значение) = 36 и СтрРазделить(ЭлементДанных.Значение, "-").Количество() = 5 Тогда // уникальный идентификатор?
			
			Попытка
				Значение = Новый УникальныйИдентификатор(ЭлементДанных.Значение);
			Исключение
				Значение = Строка(ЭлементДанных.Значение);
			КонецПопытки;
			ДанныеСтруктурой.Вставить(ЭлементДанных.Ключ, Значение);
			ДанныеСтруктурой.Вставить(ЭлементДанных.Ключ + "_До", ЭлементДанных.Значение);
			
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция НайтиПоРеквизитамИзСтруктуры(ДанныеСтруктурой, ИмяТипа) Экспорт
	
	Если ТипЗнч(ДанныеСтруктурой) = Тип("Строка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = Неопределено;
	
	СсылкаНайдена = Ложь;
	Если Найти(ДанныеСтруктурой.Тип, "СправочникСсылка") Тогда
		Значение = Неопределено;
		Если НЕ ВыполнитьАлгоритмПоиска(ИмяТипа, ДанныеСтруктурой, Значение) Тогда
			Если Метаданные.Справочники.Найти(ИмяТипа) = Неопределено Тогда
				Значение = Неопределено;		
			Иначе
				Если ДанныеСтруктурой.Свойство("ИмяПредопределенныхДанных") И ЗначениеЗаполнено(ДанныеСтруктурой.ИмяПредопределенныхДанных) Тогда
					Попытка
						Значение = Справочники[ИмяТипа][ДанныеСтруктурой.ИмяПредопределенныхДанных];
					Исключение
						Значение = Справочники[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеСтруктурой.Ссылка));	
					КонецПопытки;
				Иначе
					Значение = Справочники[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеСтруктурой.Ссылка));	
				КонецЕсли;								
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(ДанныеСтруктурой.Тип, "ДокументСсылка") Тогда		
		Если НЕ СсылкаНайдена Тогда
			Если Метаданные.Документы.Найти(ИмяТипа) = Неопределено Тогда
				Значение = Неопределено;
			Иначе
				Значение = Документы[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеСтруктурой.Ссылка));
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли Найти(ДанныеСтруктурой.Тип, "ПеречислениеСсылка") Тогда
		ЗначениеПеречисления = ДанныеСтруктурой.Значение;		
		Мета = Метаданные.Перечисления.Найти(ИмяТипа);
		Если Мета = Неопределено Тогда
			Значение = Неопределено;
		Иначе	
			Если ЗначениеПеречисления = "ПустаяСсылка" Тогда
				Значение = Перечисления[ИмяТипа].ПустаяСсылка();
			Иначе
				Если НЕ Метаданные.Перечисления.Найти(ИмяТипа).ЗначенияПеречисления.Найти(ЗначениеПеречисления) = Неопределено Тогда
					Значение = Перечисления[ИмяТипа][ЗначениеПеречисления];
				Иначе
					Значение = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(ДанныеСтруктурой.Тип, "ПланСчетовСсылка") Тогда
		Мета = Метаданные.ПланыСчетов.Найти(ИмяТипа);
		Если Мета = Неопределено Тогда
			Значение = Неопределено;
		Иначе	
			Значение = ПланыСчетов[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеСтруктурой.Ссылка));
		КонецЕсли;
	ИначеЕсли Найти(ДанныеСтруктурой.Тип, "ПланВидовХарактеристикСсылка") Тогда
		Мета = Метаданные.ПланыВидовХарактеристик.Найти(ИмяТипа);
		Если Мета = Неопределено Тогда
			Значение = Неопределено;
		Иначе
			Значение = ПланыВидовХарактеристик[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеСтруктурой.Ссылка));
		КонецЕсли;
	ИначеЕсли Найти(ДанныеСтруктурой.Тип, "ПланВидовРасчетаСсылка") Тогда		
		Значение = Неопределено;
		Если НЕ ВыполнитьАлгоритмПоиска(ИмяТипа, ДанныеСтруктурой, Значение) Тогда
			Мета = Метаданные.ПланыВидовРасчета.Найти(ИмяТипа);
			Если Мета = Неопределено Тогда
				Значение = Неопределено;
			Иначе
				Значение = ПланыВидовРасчета[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеСтруктурой.Ссылка));		
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(ДанныеСтруктурой.Тип, "БизнесПроцессСсылка") Тогда
		Мета = Метаданные.БизнесПроцессы.Найти(ИмяТипа);
		Если Мета = Неопределено Тогда
			Значение = Неопределено;
		Иначе
			Значение = БизнесПроцессы[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеСтруктурой.Ссылка));		
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ДатаИзJSON(СтрокаJSON, ФорматДаты = "") Экспорт

	ФорматДаты = ?(ФорматДаты = "",ФорматДатыJSON.ISO,ФорматДаты);
	Дата1С = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку("{
	|""date"": """+СтрокаJSON+"""
	|}");
	Попытка
		Дата1С = ПрочитатьJSON(ЧтениеJSON, Ложь, "date", ФорматДаты).date;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат Дата1С;
	
КонецФункции // СтруктураВJSON()
#КонецОбласти

Функция ОбработчикПроизвольныеДанные(ВходящиеДанные) Экспорт
		
	Если ВходящиеДанные.Свойство("Данные") И ВходящиеДанные.Данные.Свойство("Тип") Тогда
		Если Найти(ВходящиеДанные.Данные.Тип, "Остатки") Тогда
			//ВыполнитьОбработкуОстатки(ВходящиеДанные.Данные)
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

СсылкиСтруктурой  = Новый Соответствие;
ОбъектыСтруктурой = Новый Соответствие;

Платформа1с = Новый Структура;
Платформа1с.Вставить("ВидыИерархии", ВидыИерархии());
Платформа1с.Вставить("РежимЗаписиРегистра", РежимЗаписиРегистраПодчинениеРегистратору());

ОбъектНайден       = Ложь;
ПерезаписатьОбъект = Истина;
Отказ              = Ложь;
