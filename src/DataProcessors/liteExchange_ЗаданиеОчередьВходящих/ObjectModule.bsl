
#Область ПеременныеМодуля
Перем КодОтвета;
Перем ЗаголовкиОтвета;
Перем ТелоОтвета;
Перем ФорматТелаОтвета;

Перем ВозвращаемыеДанные Экспорт;
Перем ОбработкаВыполненаУспешно Экспорт;

Перем ВходящиеДанные Экспорт;
Перем ПараметрыЗапроса Экспорт;
Перем ЗаголовкиЗапроса Экспорт;
Перем ПараметрыУРЛ Экспорт;

Перем ИмяСобытияЖР;
#КонецОбласти

Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "liteExchange задание очередь входящих");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Истина);
	РегистрационныеДанные.Вставить("Версия", "1.0");                      
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");	
	РегистрационныеДанные.Вставить("Информация", "Шаблон внешнего регламентного задания");
	
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор");
	тзКоманд.Колонки.Добавить("Представление");
	тзКоманд.Колонки.Добавить("Модификатор");
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение");
	тзКоманд.Колонки.Добавить("Использование");
	
	строкаКоманды = тзКоманд.Добавить();
	строкаКоманды.Идентификатор = "НастройкаПараметровРегламентногоЗадания";
	строкаКоманды.Представление = "Настройка параметров выполнения регл. задания";
	строкаКоманды.Использование = "ОткрытиеФормы";
		
	строкаКоманды = тзКоманд.Добавить();
	строкаКоманды.Идентификатор = "ВыполнениеРегламентногоЗадания";
	строкаКоманды.Представление = "Выполнение регл. задания";
	строкаКоманды.Использование = "ВызовСерверногоМетода";
		
	РегистрационныеДанные.Вставить("Команды", тзКоманд);
		
	Возврат РегистрационныеДанные;
	
КонецФункции

///////////////////// ПОЛУЧЕНИЕ НАСТРОЕК ВЫПОЛНЕНИЯ РЕГЛ. ЗАДАНИЯ /////////////////////////

Функция ПолучитьПараметрыВыполненияРегламентногоЗадания(ИнтерактивноеПолучение = Ложь) Экспорт

	ОписаниеОшибки = "";	
	ОбработкаРеглЗадания = ПолучитьОбработкуРегламентногоЗадания(ИнтерактивноеПолучение, ОписаниеОшибки);
		
	Если НЕ ОбработкаРеглЗадания.Пустая() Тогда
		
		НастройкиРеглЗадания = ОбработкаРеглЗадания.ХранилищеНастроек.Получить();		
		
		Если НастройкиРеглЗадания <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиРеглЗадания);
		ИначеЕсли НЕ ИнтерактивноеПолучение Тогда	
			ОписаниеОшибки = "Настройки выполнения не заданы";
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки, ОбработкаРеглЗадания, ОписаниеОшибки); 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Функция ПолучитьОбработкуРегламентногоЗадания(ИнтерактивноеПолучение = Ложь, ОписаниеОшибки = "") Экспорт
	
	ОбработкаРеглЗадания = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяОбъекта", Метаданные().Имя);		
	
	Если ОбработкаРеглЗадания.Пустая() Тогда
		ОписаниеОшибки = "В справочнике ""Дополнительные отчеты и обработки"" не обнаружена обработка с именем """ + Метаданные().Имя + """";
		Если НЕ ИнтерактивноеПолучение Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ОписаниеОшибки); 
		КонецЕсли;
	КонецЕсли;

	Возврат ОбработкаРеглЗадания;
	
КонецФункции

///////////////////// ПРОЦЕДУРЫ ВЫПОЛНЕНИЯ РЕГЛ. ЗАДАНИЯ //////////////////////////////////

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт	
	ОбработкаОчереди();
КонецПроцедуры

Функция ОбработкаОчереди()
	леJSONКонвертер4 = Обработки.леJSONКонвертер4.Создать();
	ПравилаКонвертации = ВнешниеОбработки.Создать("\\srv3\Exchange\liteExchange_правилаКонвертации.epf");
	леJSONКонвертер4.ПравилаКонвертации = ПравилаКонвертации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"Выбрать Первые 1000 УникальныйИдентификатор, Данные Из РегистрСведений.леОчередьВходящихСообщений Где &Отборы УПОРЯДОЧИТЬ ПО ТаймШтамп Возр, ДатаДобавления Возр";
	
	Отборы = Новый Массив;	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Отборы.Добавить("УникальныйИдентификатор = &УникальныйИдентификатор");
	Иначе
		Отборы.Добавить("НЕ Статус = &Статус");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отборы", СтрСоединить(Отборы, " И "));
	
	Запрос.УстановитьПараметр("Статус", Перечисления.леСтатусыОбработкиСообщений.Обработано);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		леУправлениеОчередями.УстановитьСтатусВОбработке(Выборка.УникальныйИдентификатор, "леОчередьВходящихСообщений");
		Попытка
			Данные = леJSONКонвертер4.ПрочитатьJSON_Расширенная(Выборка.Данные);
		Исключение
			леУправлениеОчередями.УстановитьСтатусОшибкаОбработки(Выборка.УникальныйИдентификатор, "леОчередьВходящихСообщений", ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		Сч = 1;
		Попытка
			Если ТипЗнч(Данные) = Тип("Массив") Тогда
				Для Каждого ВходящиеДанные Из Данные Цикл
					Если ЗначениеЗаполнено(Количество) И Количество = Сч Тогда
						Прервать;
					КонецЕсли;					
					
					леJSONКонвертер4.ВходящиеДанные = ВходящиеДанные;					
					леJSONКонвертер4.ЗаписатьДанные();
					Сч = Сч + 1;
				КонецЦикла;
			Иначе
				леJSONКонвертер4.ВходящиеДанные = Данные;
				леJSONКонвертер4.ЗаписатьДанные();
			КонецЕсли;
			леУправлениеОчередями.УстановитьСтатусОбработано(Выборка.УникальныйИдентификатор, "леОчередьВходящихСообщений");
		Исключение
			леУправлениеОчередями.УстановитьСтатусОшибкаОбработки(Выборка.УникальныйИдентификатор, "леОчередьВходящихСообщений", ОписаниеОшибки());
		КонецПопытки;		
	КонецЦикла;
КонецФункции

Функция ПолучитьНастройки() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	леНастройкиТранспортаОбменаДанными.УзелОбмена КАК УзелОбмена,
		|	леНастройкиТранспортаОбменаДанными.СтрокаПодключения КАК СтрокаПодключения,
		|	леНастройкиТранспортаОбменаДанными.КаталогОбмена КАК КаталогОбмена
		|ИЗ
		|	РегистрСведений.леНастройкиТранспортаОбменаДанными КАК леНастройкиТранспортаОбменаДанными";	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();

	Возврат Выборка;
КонецФункции

#Область Инициализация
КодОтвета = 200;
ЗаголовкиОтвета = Новый Соответствие;
ЗаголовкиОтвета.Вставить("Charset", "utf-8");
ЗаголовкиОтвета.Вставить("Content-type", "application/JSON");

ТекстОноРаботает = "Что-то уже работает!";
ТелоОтвета = "{""data"":"+ТекстОноРаботает+"}";

ФорматТелаОтвета = "JSON";

ВозвращаемыеДанные = ТекстОноРаботает;

ПараметрыУРЛ = Новый Структура;
ПараметрыЗапроса = Новый Структура;

ОбработкаВыполненаУспешно = Истина;
ИмяСобытияЖР = "Exchange API";
#КонецОбласти