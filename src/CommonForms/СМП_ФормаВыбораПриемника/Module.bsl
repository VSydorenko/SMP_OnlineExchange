#Область ОбъявлениеПеременных

&НаСервере
Перем мТипСтрока;
Перем мТипЧисло;
Перем мТипДата;
Перем мТипБулево;
Перем мТипХранилищеЗначения;
Перем мТипУникальныйИдентификатор;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ВидОбъектаОбмена", ВидОбъектаОбмена);
	Параметры.Свойство("ИмяРодительскогоОбъекта", ИмяРодительскогоОбъекта);
	ЗаполнитьДеревоПоВидуОбъекта();
	НастроитьФормуПоВидуОбъектаОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВидОбъектаОбмена = ПредопределенноеЗначение("Перечисление.СМП_ВидыОбъектовОбмена.ОбъектМетаданных") Тогда
		
	ИначеЕсли ВидОбъектаОбмена = ПредопределенноеЗначение("Перечисление.СМП_ВидыОбъектовОбмена.ГруппаСвойствОбъекта") Тогда
		
	ИначеЕсли ВидОбъектаОбмена = ПредопределенноеЗначение("Перечисление.СМП_ВидыОбъектовОбмена.СвойствоОбъекта") Тогда
		
		Строки1ур = ДеревоОбъектов.ПолучитьЭлементы();
		СтрокаИд = Строки1ур[0].ПолучитьИдентификатор();
		Элементы.ДеревоОбъектов.Развернуть(СтрокаИд);
		
	ИначеЕсли ВидОбъектаОбмена = ПредопределенноеЗначение("Перечисление.СМП_ВидыОбъектовОбмена.ПредопределенноеЗначение") Тогда
		
		Строки1ур = ДеревоОбъектов.ПолучитьЭлементы();
		СтрокаИд = Строки1ур[0].ПолучитьИдентификатор();
		Элементы.ДеревоОбъектов.Развернуть(СтрокаИд);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДеревоОбъектов

&НаКлиенте
Процедура ДеревоОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.Уровень = 2 Тогда
		Закрыть(Элемент.ТекущиеДанные.Имя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// заполняет дерево на форме по виду объекта метаданных.
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьДеревоПоВидуОбъекта() 
	
	Если ВидОбъектаОбмена = ПредопределенноеЗначение("Перечисление.СМП_ВидыОбъектовОбмена.ОбъектМетаданных") Тогда
		мДерево = ЗаполнитьДеревоОбъектовМетаданных();
	ИначеЕсли ВидОбъектаОбмена = ПредопределенноеЗначение("Перечисление.СМП_ВидыОбъектовОбмена.СвойствоОбъекта") Тогда
		мДерево = ЗаполнитьДеревоСвойствамиОбъектаМд();
	ИначеЕсли ВидОбъектаОбмена = ПредопределенноеЗначение("Перечисление.СМП_ВидыОбъектовОбмена.ПредопределенноеЗначение") Тогда
		мДерево = ЗаполнитьДеревоЗначениямиОбъектаМд();
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(мДерево, "ДеревоОбъектов");
	
КонецПроцедуры //ЗаполнитьДеревоПоВидуОбъекта

// Возвращает заполненное дерево объектов.
//
// Возвращаемое значение:
//   ДеревоЗначений - дерево объектов метаданных конфигурации.
//
&НаСервере
Функция ЗаполнитьДеревоОбъектовМетаданных() 
	
	мДерево = ИнициализироватьДерево();
	
	ГруппыОбъектовМД = ПолучитьИменаГруппОбъектовМетаданных();
	
	Для Каждого ГруппаМд Из ГруппыОбъектовМД Цикл
		
		ТекКоллекцияМд = Метаданные[ГруппаМд.Имя];
		Если ТекКоллекцияМд.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаГруппа = мДерево.Строки.Добавить();
		СтрокаГруппа.Имя = ГруппаМд.Синоним;
		СтрокаГруппа.Синоним = ГруппаМд.Имя;
		СтрокаГруппа.Уровень = 1;
		СтрокаГруппа.ИндексКартинки = ГруппаМд.ИндексКартинки;
		
		Для Каждого ОбъектМд Из ТекКоллекцияМд Цикл
			СтрокаМд = СтрокаГруппа.Строки.Добавить();
			СтрокаМд.Имя = ГруппаМд.Приставка + "." + ОбъектМд.Имя;
			СтрокаМд.Синоним = ОбъектМд.Синоним;
			СтрокаМд.Уровень = 2;
			СтрокаМд.ИндексКартинки = ГруппаМд.ИндексКартинки;
		КонецЦикла;
		
	КонецЦикла;
	
	мДерево.Строки.Сортировать("Имя", Ложь);
	
	СтрокаБулево = мДерево.Строки.Добавить();
	СтрокаБулево.Имя = "Булево";
	СтрокаБулево.Синоним = "Булево";
	СтрокаБулево.Уровень = 2;
	СтрокаБулево.ИндексКартинки = 16;
	
	СтрокаДата = мДерево.Строки.Добавить();
	СтрокаДата.Имя = "Дата";
	СтрокаДата.Синоним = "Дата";
	СтрокаДата.Уровень = 2;
	СтрокаДата.ИндексКартинки = 16;
	
	СтрокаКонстанты = мДерево.Строки.Добавить();
	СтрокаКонстанты.Имя = "КонстантыНабор";
	СтрокаКонстанты.Синоним = "Набор констант";
	СтрокаКонстанты.Уровень = 2;
	СтрокаКонстанты.ИндексКартинки = 1;
	
	СтрокаСтрока = мДерево.Строки.Добавить();
	СтрокаСтрока.Имя = "Строка";
	СтрокаСтрока.Синоним = "Строка";
	СтрокаСтрока.Уровень = 2;
	СтрокаСтрока.ИндексКартинки = 16;
	
	СтрокаУИД = мДерево.Строки.Добавить();
	СтрокаУИД.Имя = "УникальныйИдентификатор";
	СтрокаУИД.Синоним = "Уникальный идентификатор";
	СтрокаУИД.Уровень = 2;
	СтрокаУИД.ИндексКартинки = 16;
	
	СтрокаХЗ = мДерево.Строки.Добавить();
	СтрокаХЗ.Имя = "ХранилищеЗначения";
	СтрокаХЗ.Синоним = "Хранилище значения";
	СтрокаХЗ.Уровень = 2;
	СтрокаХЗ.ИндексКартинки = 16;
	
	СтрокаЧисло = мДерево.Строки.Добавить();
	СтрокаЧисло.Имя = "Число";
	СтрокаЧисло.Синоним = "Число";
	СтрокаЧисло.Уровень = 2;
	СтрокаЧисло.ИндексКартинки = 16;
	
	Возврат мДерево;
	
КонецФункции // ЗаполнитьДеревоОбъектовМетаданных

// Возвращает пустое дерево.
//
// Возвращаемое значение:
//   ДеревоЗначений 
//
&НаСервере
Функция ИнициализироватьДерево() 
	
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	мДерево = Новый ДеревоЗначений;
	мДерево.Колонки.Добавить("Имя", ТипСтрока);
	мДерево.Колонки.Добавить("Синоним", ТипСтрока);
	мДерево.Колонки.Добавить("Уровень", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	мДерево.Колонки.Добавить("ИндексКартинки", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	мДерево.Колонки.Добавить("Тип", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	мДерево.Колонки.Добавить("Вид", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыСвойств"));
	
	Возврат мДерево;
	
КонецФункции // ИнициализироватьДерево

// Возвращает имена групп объектов метаданных.
//
// Возвращаемое значение:
//   Соответствие:
//		* Ключ - Строка - имя группы объектов метаданных
//		* Значение - Строка - Синоним группы объектов метаданных
//
&НаСервере
Функция ПолучитьИменаГруппОбъектовМетаданных() 
	
	МассивГрупп = Новый Массив;
	СвойстваГруппы = "Имя, Синоним, Приставка, ИндексКартинки";
	
	ГруппаСправочник = Новый Структура(СвойстваГруппы, "Справочники", "Справочники", "СправочникСсылка", 2);
	МассивГрупп.Добавить(ГруппаСправочник);
	ГруппаДокумент = Новый Структура(СвойстваГруппы, "Документы", "Документы", "ДокументСсылка", 4);
	МассивГрупп.Добавить(ГруппаДокумент);
	ГруппаПеречисление = Новый Структура(СвойстваГруппы, "Перечисления", "Перечисления", "ПеречислениеСсылка", 14);
	МассивГрупп.Добавить(ГруппаПеречисление);
	ГруппаПВХ = Новый Структура(СвойстваГруппы, "ПланыВидовХарактеристик", "Планы видов характеристик", "ПланВидовХарактеристикСсылка", 5);
	МассивГрупп.Добавить(ГруппаПВХ);
	ГруппаПС = Новый Структура(СвойстваГруппы, "ПланыСчетов", "Планы счетов", "ПланСчетовСсылка", 6);
	МассивГрупп.Добавить(ГруппаПС);
	ГруппаПВД = Новый Структура(СвойстваГруппы, "ПланыВидовРасчета", "Планы видов расчета", "ПланВидовРасчетаСсылка", 7);
	МассивГрупп.Добавить(ГруппаПВД);
	ГруппаРС = Новый Структура(СвойстваГруппы, "РегистрыСведений", "Регистры сведений", "РегистрСведенийЗапись", 8);
	МассивГрупп.Добавить(ГруппаРС);
	ГруппаРН = Новый Структура(СвойстваГруппы, "РегистрыНакопления", "Регистры накопления", "РегистрНакопленияЗапись", 9);
	МассивГрупп.Добавить(ГруппаРН);
	ГруппаРБ = Новый Структура(СвойстваГруппы, "РегистрыБухгалтерии", "Регистры бухгалтерии", "РегистрБухгалтерииЗапись", 10);
	МассивГрупп.Добавить(ГруппаРБ);
	ГруппаРР = Новый Структура(СвойстваГруппы, "РегистрыРасчета", "Регистры расчета", "РегистрРасчетаЗапись", 11);
	МассивГрупп.Добавить(ГруппаРР);
	ГруппаБП = Новый Структура(СвойстваГруппы, "БизнесПроцессы", "Бизнес-процессы", "БизнесПроцессСсылка", 12);
	МассивГрупп.Добавить(ГруппаБП);
	ГруппаЗадачи = Новый Структура(СвойстваГруппы, "Задачи", "Задачи", "ЗадачаСсылка", 13);
	МассивГрупп.Добавить(ГруппаЗадачи);
	
	Возврат МассивГрупп;
	
КонецФункции // ПолучитьИменаГруппОбъектовМетаданных

// Возвращает дерево со свойствами конкретного объекта метаданных.
//
// Возвращаемое значение:
//   ДеревоЗначений - см. ИнициализироватьДерево()
//
&НаСервере
Функция ЗаполнитьДеревоСвойствамиОбъектаМд() 
	
	мДерево = ИнициализироватьДерево();
	СтрокаОбъектМд = мДерево.Строки.Добавить();
	СтрокаОбъектМд.Имя = ИмяРодительскогоОбъекта;
	СтрокаОбъектМд.Уровень = 1;
	
	ТипРодителя = Тип(ИмяРодительскогоОбъекта);
	ОбъектМд = Метаданные.НайтиПоТипу(ТипРодителя);
	
	// Стандартные реквизиты
	Для Каждого СтандартныйРеквизит Из ОбъектМд.СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя = "Ссылка" Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРеквизит = СтрокаОбъектМд.Строки.Добавить();
		СтрокаРеквизит.Имя = СтандартныйРеквизит.Имя;
		СтрокаРеквизит.Синоним = СтандартныйРеквизит.Синоним;
		СтрокаРеквизит.Уровень = 2;
		СтрокаРеквизит.Вид = Перечисления.ВидыСвойств.Свойство;
		СтрокаРеквизит.Тип = ПолучитьТипыСвойстваСтрокой(СтандартныйРеквизит.Тип);
		СтрокаРеквизит.ИндексКартинки = 17;
	КонецЦикла;
	
	сКоллекции = Новый Соответствие;
	
	Если СтрНачинаетсяС(ИмяРодительскогоОбъекта, "Регистр") Тогда
		сКоллекции.Вставить("Измерения", Перечисления.ВидыСвойств.Измерение);
		сКоллекции.Вставить("Ресурсы", Перечисления.ВидыСвойств.Ресурс);
		сКоллекции.Вставить("Реквизиты", Перечисления.ВидыСвойств.Реквизит);
	ИначеЕсли СтрНачинаетсяС(ИмяРодительскогоОбъекта, "ПланСчетов") Тогда
		сКоллекции.Вставить("Реквизиты", Перечисления.ВидыСвойств.Реквизит);
		сКоллекции.Вставить("ПризнакиУчета", Перечисления.ВидыСвойств.Реквизит);
	Иначе
		сКоллекции.Вставить("Реквизиты", Перечисления.ВидыСвойств.Реквизит);
	КонецЕсли;
	
	Для Каждого кЭлемент Из сКоллекции Цикл
		КоллекцияМд = ОбъектМд[кЭлемент.Ключ];
		Для Каждого мдЭлемент Из КоллекцияМд Цикл
			СтрокаРеквизит = СтрокаОбъектМд.Строки.Добавить();
			СтрокаРеквизит.Имя = мдЭлемент.Имя;
			СтрокаРеквизит.Синоним = мдЭлемент.Синоним;
			СтрокаРеквизит.Уровень = 2;
			СтрокаРеквизит.Вид = кЭлемент.Значение;
			СтрокаРеквизит.Тип = ПолучитьТипыСвойстваСтрокой(мдЭлемент.Тип);
			СтрокаРеквизит.ИндексКартинки = 16;
		КонецЦикла;
	КонецЦикла;
		
	Возврат мДерево;
	
КонецФункции // ЗаполнитьДеревоСвойствамиОбъектаМд

// Возвращает дерево со значениями конкретного объекта метаданных.
//
// Возвращаемое значение:
//   ДеревоЗначений - см. ИнициализироватьДерево
//
&НаСервере
Функция ЗаполнитьДеревоЗначениямиОбъектаМд() 
	
	мДерево = ИнициализироватьДерево();
	СтрокаОбъект = мДерево.Строки.Добавить();
	СтрокаОбъект.Имя = ИмяРодительскогоОбъекта;
	СтрокаОбъект.Уровень = 1;
	
	ТипОбъекта = Тип(ИмяРодительскогоОбъекта);
	ОбъектМд = Метаданные.НайтиПоТипу(ТипОбъекта);
	
	~ЗначенияПеречисления:
	Попытка
		пЗначения = ОбъектМд.ЗначенияПеречисления;
		Для Каждого пЗнач Из пЗначения Цикл
			дСтрока = СтрокаОбъект.Строки.Добавить();
			дСтрока.Имя = пЗнач.Имя;
			дСтрока.Синоним = пЗнач.Синоним;
			дСтрока.Уровень = 2;
			дСтрока.ИндексКартинки = 16;
		КонецЦикла;
	Исключение
		Перейти ~Предопределенные;
	КонецПопытки;
	
	Возврат мДерево;
	
	~Предопределенные:
	Попытка
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	_.Ссылка,";
		
		Если ОбъектМд.ДлинаКода > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	_.Код,";
		КонецЕсли;
		
		Если ОбъектМд.ДлинаНаименования > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	_.Наименование,";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|	_.Представление
		|ИЗ
		|	" + ОбъектМд.ПолноеИмя() + " КАК _
		|
		|ГДЕ
		|	(_.Предопределенный = ИСТИНА)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат мДерево;
		КонецЕсли;
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ПолноеИмя = ПолучитьПолноеИмяПредопределенногоЗначения(Выборка.Ссылка);
			ИмяМассив = СтрРазделить(ПолноеИмя, ".");
			
			дСтрока = СтрокаОбъект.Строки.Добавить();
			дСтрока.Имя = ИмяМассив[2];
			дСтрока.Синоним = Выборка.Представление;
			дСтрока.Уровень = 2;
			дСтрока.ИндексКартинки = 16;
		КонецЦикла;
		
		СтрокаОбъект.Строки.Сортировать("Имя", Ложь);
		
	Исключение
		Возврат мДерево;
	КонецПопытки;
	
	Возврат мДерево;
	
КонецФункции // ЗаполнитьДеревоЗначениямиОбъектаМд


// Выполняет настройку формы по виду объекта обмена.
//
// Параметры:
//   <Параметр1> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//   <Параметр2> - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура НастроитьФормуПоВидуОбъектаОбмена() 
	
	Если ВидОбъектаОбмена = ПредопределенноеЗначение("Перечисление.СМП_ВидыОбъектовОбмена.ОбъектМетаданных") Тогда
		ЭтотОбъект.Заголовок = "Объекты метаданных текущей конфигурации";
	ИначеЕсли ВидОбъектаОбмена = ПредопределенноеЗначение("Перечисление.СМП_ВидыОбъектовОбмена.ГруппаСвойствОбъекта") Тогда
		ЭтотОбъект.Заголовок = "Группы свойств объекта метаданных";
	ИначеЕсли ВидОбъектаОбмена = ПредопределенноеЗначение("Перечисление.СМП_ВидыОбъектовОбмена.СвойствоОбъекта") Тогда
		ЭтотОбъект.Заголовок = "Свойства объекта метаданных";
		Элементы.ДеревоОбъектовВид.Видимость = Истина;
		Элементы.ДеревоОбъектовТип.Видимость = Истина;
		
	ИначеЕсли ВидОбъектаОбмена = ПредопределенноеЗначение("Перечисление.СМП_ВидыОбъектовОбмена.ПредопределенноеЗначение") Тогда
		ЭтотОбъект.Заголовок = "Значения объекта метаданных";
	КонецЕсли;
	
КонецПроцедуры //НастроитьФормуПоВидуОбъектаОбмена

// Возвращает строку с типами реквизита.
//
// Параметры:
//   ОписаниеТиповСвойства - ОписаниеТипов - описание типов свойства объекта метаданных.
//
// Возвращаемое значение:
//   Строка - типы данных свойства
//
&НаСервере
Функция ПолучитьТипыСвойстваСтрокой(ОписаниеТиповСвойства) 
	
	ТипыСтрокой = "";
	МассивТипов = ОписаниеТиповСвойства.Типы();
	
	Для Каждого ТипСвойства Из МассивТипов Цикл
		
		Результат = ПолучитьПростойТип(ТипСвойства);
		Если ПустаяСтрока(Результат) Тогда
			
			Результат = XMLТип(ТипСвойства).ИмяТипа;
			Результат = СтрЗаменить(Результат, "CatalogRef", "СправочникСсылка");
			Результат = СтрЗаменить(Результат, "DocumentRef", "ДокументСсылка");
			Результат = СтрЗаменить(Результат, "EnumRef", "ПеречислениеСсылка");
			Результат = СтрЗаменить(Результат, "ChartOfAccountsRef", "ПланСчетовСсылка");
			Результат = СтрЗаменить(Результат, "ChartOfCharacteristicTypesRef", "ПланВидовХарактеристикСсылка");
			Результат = СтрЗаменить(Результат, "ChartOfCalculationTypesRef", "ПланВидовРасчетаСсылка");
			Результат = СтрЗаменить(Результат, "ExchangePlanRef", "ПланОбменаСсылка");
			Результат = СтрЗаменить(Результат, "BusinessProcessRef", "БизнесПроцессСсылка");
			Результат = СтрЗаменить(Результат, "BusinessProcessRoutePointRef", "ТочкаМаршрутаБизнесПроцессаСсылка");
			Результат = СтрЗаменить(Результат, "TaskRef", "ЗадачаСсылка");
		КонецЕсли;
		
		ТипыСтрокой = ТипыСтрокой + ?(ПустаяСтрока(ТипыСтрокой), "", ", ")
		+ Строка(Результат);
	КонецЦикла;
	
	Возврат ТипыСтрокой;
	
КонецФункции // ПолучитьТипыСвойстваСтрокой

// Возвращает простой тип строкой.
//
// Параметры:
//   Тип - <Тип.Вид> - <описание параметра>
//
// Возвращаемое значение:
//   Строка
//
&НаСервере
Функция ПолучитьПростойТип(Тип) 
	
	Если Тип = мТипЧисло Тогда
		Возврат "Число";
    ИначеЕсли Тип = мТипБулево Тогда
		Возврат "Булево";
	ИначеЕсли Тип = мТипДата Тогда
		Возврат "Дата";	
	ИначеЕсли Тип = мТипСтрока Тогда
		Возврат "Строка";	
	ИначеЕсли Тип = мТипХранилищеЗначения Тогда
		Возврат "ХранилищеЗначения";
	ИначеЕсли Тип = мТипУникальныйИдентификатор Тогда
		Возврат "УникальныйИдентификатор";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьПростойТип


#КонецОбласти

#Область ИнициализацияФормы

мТипСтрока = Тип("Строка");
мТипЧисло = Тип("Число");
мТипДата = Тип("Дата");
мТипБулево = Тип("Булево");
мТипХранилищеЗначения = Тип("ХранилищеЗначения");
мТипУникальныйИдентификатор = Тип("УникальныйИдентификатор");

#КонецОбласти