
#Область ПрограммныйИнтерфейс

// Помещает СКД для выбранных документов в ТЧ объекта.
//
// Параметры:
//   КоллекцияСКД - Структура - содержит адреса временных хранилищ СКД для выбранных документов.
//
Процедура ПоместитьСКДВТабЧасть(КоллекцияСКД) Экспорт
	
	Для Каждого СтрокаТЧ Из ОбъектыКВыгрузке Цикл
		
		АдресСхемыКД = Неопределено;
		КоллекцияСКД.Свойство(СтрокаТЧ.ИмяОбъекта, АдресСхемыКД);
		Если ЭтоАдресВременногоХранилища(АдресСхемыКД) Тогда
			
			СКД = ПолучитьИзВременногоХранилища(АдресСхемыКД);
			Если СКД <> Неопределено Тогда
				
				ХранилищеСхемы = Новый ХранилищеЗначения(СКД);
				СтрокаТЧ.СКДДляотборов = ХранилищеСхемы;
				
			Иначе
				
				СтрокаТЧ.СКДДляОтборов = Неопределено;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ПоместитьСКДВТабЧасть

// Получает СКД из таб. части и помещает их во временные хранилища.
//
// Параметры:
//   КоллекцияОбъектовНаФорме - ТаблицаЗначений - реквизит формы "ОбъектыКВыгрузкеНаФорме".
//   КоллекцияСКД - Структура - предназначена для хранения аресов временных хранилищ схем КД выбранных документов.
//   ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы для привязки временных хранилищ.
//
Процедура ПолучитьСКДИзТабЧасти(КоллекцияОбъектовНаФорме, КоллекцияСКД, ИдентификаторФормы) Экспорт
	
	Для Каждого СтрокаТЧ Из ОбъектыКВыгрузке Цикл
		ИскомаяСтр = КоллекцияОбъектовНаФорме.Найти(СтрокаТЧ.ПолноеИмяОбъекта, "ПолноеИмяОбъекта");
		Если ИскомаяСтр <> Неопределено Тогда
			ИскомаяСтр.Пометка = Истина;
			
			СКД = СтрокаТЧ.СкдДляОтборов.Получить();
			Если ТипЗнч(СКД) = Тип("СхемаКомпоновкиДанных") Тогда
				АдресСхемыКД = ПоместитьВоВременноеХранилище(СКД, ИдентификаторФормы);
				КоллекцияСКД.Вставить(СтрокаТЧ.ИмяОбъекта, АдресСхемыКД);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ПолучитьСКДИзТабЧасти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НастройкаОбмена = Перечисления.СМП_НастройкиОбменов.ДляОтправки Тогда
		индИсточник = ПроверяемыеРеквизиты.Найти("Источник");
		ПроверяемыеРеквизиты.Удалить(индИсточник);
	КонецЕсли;
	
	ПроверитьИдентификаторОбмена(Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Временно:
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет проверку корректности идентификатора обмена.
//
// Параметры:
//   Отказ - Булево 
//
Процедура ПроверитьИдентификаторОбмена(Отказ) 
	
	СтрокаЦифр = "1234567890";
	СтрокаБукв = "abcdefghijklmnopqrstuvwxyz";
	
	идДлина = СтрДлина(ИдентификаторОбмена);
	нн = 1;
	Пока нн <= идДлина Цикл
		нБуква = Сред(ИдентификаторОбмена, нн, 1);
		Если СтрНайти(СтрокаЦифр, нБуква) = 0 И СтрНайти(СтрокаБукв, НРег(нБуква)) = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю("Допускаются только цифры и буквы латинского алфавита!",, "ИдентификаторОбмена", "Объект", Отказ);
			Прервать;
		КонецЕсли;
		нн = нн + 1;
	КонецЦикла;
	
КонецПроцедуры //ПроверитьИдентификаторОбмена

#КонецОбласти
