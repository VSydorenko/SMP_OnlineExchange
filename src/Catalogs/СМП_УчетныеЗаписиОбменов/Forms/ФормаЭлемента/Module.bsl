
#Область ОписаниеПеременных

&НаКлиенте
Перем ТекДанныеОбъектыКВыгрузке;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьВидимость();
	ЗаполнитьОбъектыКВыгрузкеНаФорме();
	
	КоличествоВыгружаемых = Объект.ОбъектыКВыгрузке.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьОбъектыКВыгрузке(ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособПодключенияПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВыбранныеПриИзменении(Элемент)
	
	Если ТолькоВыбранные Тогда
		Элементы.ОбъектыКВыгрузкеНаФорме.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Пометка", Истина));
	Иначе
		Элементы.ОбъектыКВыгрузкеНаФорме.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ФайлКаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Заголовок = "Выберите каталог для обмена данными";
	ДиалогВыбора.Каталог = ?(ПустаяСтрока(Объект.ФайлКаталогОбмена), КаталогДокументов(), Объект.ФайлКаталогОбмена);
	Обещание = Ждать ДиалогВыбора.ВыбратьАсинх();
	
	Если Обещание <> Неопределено Тогда
		Объект.ФайлКаталогОбмена = Обещание[0];
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ОбъектыКВыгрузкеНаФорме

&НаКлиенте
Процедура ОбъектыКВыгрузкеНаФормеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ОбъектыКВыгрузкеНаФорме.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено И Поле.Имя = "ОбъектыКВыгрузкеНаФормеСиноним" Тогда
		ОткрытьФорму(ТекДанные.ИмяОбъекта + ".ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКВыгрузкеНаФормеПриАктивизацииСтроки(Элемент)
	
	ТекДанныеОбъектыКВыгрузке = Элементы.ОбъектыКВыгрузкеНаФорме.ТекущиеДанные;
	
	АдресСхемы = Неопределено;
	Если ТекДанныеОбъектыКВыгрузке.Пометка И КоллекцияСКД.Свойство(ТекДанныеОбъектыКВыгрузке.Имяобъекта, АдресСхемы) Тогда
		ИнициализироватьКомпоновщик(АдресСхемы);
	Иначе
		КомпоновщикОтборов.Настройки.Отбор.Элементы.Очистить();
	КонецЕсли;
	
	УстановитьДоступностьКомпоновщикаНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКВыгрузкеНаФормеПометкаПриИзменении(Элемент)
	
	Если ТекДанныеОбъектыКВыгрузке.Пометка Тогда
		
		// Инициализация новой схемы СКД и компоновщика настроек
		СоздатьСКДНаКлиенте();
		АдресСхемы = Неопределено;
		КоллекцияСКД.Свойство(ТекДанныеОбъектыКВыгрузке.ИмяОбъекта, АдресСхемы);
		Если ЭтоАдресВременногоХранилища(АдресСхемы) Тогда
			ИнициализироватьКомпоновщик(АдресСхемы);
		КонецЕсли;
		
		КоличествоВыгружаемых = КоличествоВыгружаемых + 1;
		
	Иначе
		
		КомпоновщикОтборов.Настройки.Отбор.Элементы.Очистить();
		КоллекцияСКД.Удалить(ТекДанныеОбъектыКВыгрузке.ИмяОбъекта);
		
		КоличествоВыгружаемых = КоличествоВыгружаемых - 1;
		
	КонецЕсли;

	УстановитьДоступностьКомпоновщикаНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_КомпоновщикОтборовНастройкиОтбор

&НаКлиенте
Процедура КомпоновщикОтборовНастройкиОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьОтборыСКД(ТекДанныеОбъектыКВыгрузке.ИмяОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтборовНастройкиОтборПослеУдаления(Элемент)
	
	ОбновитьОтборыСКД(ТекДанныеОбъектыКВыгрузке.ИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	Если Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.СМП_ВидыТранспортовОбмена.Файл") Тогда
		
		Если НЕ ПустаяСтрока(Объект.ФайлКаталогОбмена) Тогда
			
			Попытка
				АдресКаталога = Объект.ФайлКаталогОбмена + "\" + Строка(Новый УникальныйИдентификатор);
				СоздатьКаталог(АдресКаталога);
				УдалитьФайлы(АдресКаталога);
				Сообщить("Каталог доступен для записи");
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			
		Иначе
			
			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет установку видимости элементов формы.
//
&НаСервере
Процедура УстановитьВидимость()
	
	ЭтоФайл 	  = (Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.СМП_ВидыТранспортовОбмена.Файл"));
	ЭтоХттпСервис = (Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.СМП_ВидыТранспортовОбмена.ХттпСервис"));
	ЭтоКом 		  = (Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.СМП_ВидыТранспортовОбмена.Ком"));
	
	Элементы.ГруппаФайл.Видимость = ЭтоФайл;
	Элементы.ГруппаХттпСервис.Видимость = ЭтоХттпСервис;
	Элементы.ГруппаКом.Видимость = ЭтоКом;
	
КонецПроцедуры //УстановитьВидимость

// Устанавливает доступность таблицы компоновщика настроек КД на форме.
//
&НаКлиенте
Процедура УстановитьДоступностьКомпоновщикаНастроек()
	
	Элементы.КомпоновщикОтборовНастройкиОтбор.ТолькоПросмотр = НЕ ТекДанныеОбъектыКВыгрузке.Пометка;
	
КонецПроцедуры //УстановитьДоступностьКомпоновщикаНастроек

// Заполняет таблицу объектов к выгрузке на форме при создании на сервере.
//
&НаСервере
Процедура ЗаполнитьОбъектыКВыгрузкеНаФорме() 
	
	Картинка = БиблиотекаКартинок.ДокументОбъект;
	тзДок = ОбъектыКВыгрузкеНаФорме.Выгрузить();
	тзДок.Очистить();
	мдДокументы = Метаданные.Документы;
	
	Для Каждого мдДок Из мдДокументы Цикл
		НоваяСтрока = тзДок.Добавить();
		НоваяСтрока.Картинка = Картинка;
		НоваяСтрока.ПолноеИмяОбъекта = мдДок.ПолноеИмя();
		НоваяСтрока.Синоним = мдДок.Представление();
		НоваяСтрока.ИмяОбъекта = СтрЗаменить(НоваяСтрока.ПолноеИмяОбъекта, ".", "");
	КонецЦикла;
	
	Если Объект.ОбъектыКВыгрузке.Количество() > 0 Тогда
		
		СпрОбъект = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.СМП_УчетныеЗаписиОбменов"));
		СпрОбъект.ПолучитьСКДИзТабЧасти(тзДок, КоллекцияСКД, ЭтотОбъект.УникальныйИдентификатор);
		
	КонецЕсли;
	
	тзДок.Сортировать("Синоним");
	ОбъектыКВыгрузкеНаФорме.Загрузить(тзДок);
	
КонецПроцедуры //ЗаполнитьОбъектыКВыгрузкеНаФорме

// Заполняет таблицу объектов к выгрузке перед записью элемента спр..
//
// Параметры:
//   ТекущийОбъект - СправочникОбъект.СМП_УчетныеЗаписиОбменов - элемент в котором обновляется список объектов к выгрузке.
//
&НаСервере
Процедура ОбновитьОбъектыКВыгрузке(ТекущийОбъект) 
	
	тзОбъекты = ОбъектыКВыгрузкеНаФорме.Выгрузить(Новый Структура("Пометка", Истина));
	Если тзОбъекты.Количество() > 0 Тогда
		ТекущийОбъект.ОбъектыКВыгрузке.Загрузить(тзОбъекты);
		ТекущийОбъект.ПоместитьСКДВТабЧасть(КоллекцияСКД);
	Иначе
		ТекущийОбъект.ОбъектыКВыгрузке.Очистить();
	КонецЕсли;
	
КонецПроцедуры //ОбновитьОбъектыКВыгрузке

#Область РАБОТА_С_ОТБОРАМИ_СКД

// Запускает создание СКД для документа.
//
// Параметры:
//   ИмяДокумента - Строка - имя документа, как оно задано в конфигураторе.
//
&НаКлиенте
Асинх Процедура СоздатьСКДНаКлиенте() 
	
	Если ТекДанныеОбъектыКВыгрузке <> Неопределено Тогда
		РезультатСоздания = Ждать СоздатьСКД();
		Сообщить(РезультатСоздания);
	КонецЕсли;
	
КонецПроцедуры //СоздатьСКДНаКлиенте

// Возвращает имя документа для которого создана СКД.
//
// Параметры:
//   ИмяДокумента - Строка - имя документа, как оно задано в конфигураторе.
//
// Возвращаемое значение:
//   Строка - Имя документа для которого создана СКД
//
&НаКлиенте
Асинх Функция СоздатьСКД() 
	
	СоздатьСКДДляВыгрузкиДокумента(ТекДанныеОбъектыКВыгрузке.ПолноеИмяОбъекта, ТекДанныеОбъектыКВыгрузке.ИмяОбъекта);
	ТекстСообщения = СтрШаблон("Созданы настройки для документа ""%1""", ТекДанныеОбъектыКВыгрузке.Синоним);
	Возврат ТекстСообщения;
	
КонецФункции // СоздатьСКДАсинх

// Создает СКД для отбора документов при выгрузке.
//
// Параметры:
//   ИмяДокумента - Строка - имя документа, как оно задано в конфигураторе.
//
&НаСервере
Процедура СоздатьСКДДляВыгрузкиДокумента(ПолноеИмяОбъекта, ИмяСКД) 
	
	СКД = Справочники.СМП_УчетныеЗаписиОбменов.ПолучитьСКД(ПолноеИмяОбъекта);
	//ИнициализироватьКомпоновщик(СКД);
	АдресСхемы = ПоместитьВоВременноеХранилище(СКД, ЭтотОбъект.УникальныйИдентификатор);
	КоллекцияСКД.Вставить(ИмяСКД, АдресСхемы);
	
КонецПроцедуры //СоздатьСКДДляВыгрузкиДокумента

// Выполняет инициализацию компоновщика настроек компоновки данных для выбранного или выделенного документа.
//
// Параметры:
//   ИсточникНастроек - СхемаКомпоновкиДанных, АдресВременногоХранилища - источник настроек для компоновщика.
//
&НаСервере
Процедура ИнициализироватьКомпоновщик(ИсточникНастроек)
	
	Если ТипЗнч(ИсточникНастроек) = Тип("СхемаКомпоновкиДанных") Тогда
		НастройкиКомпоновкиДанных = ИсточникНастроек.НастройкиПоУмолчанию;
	ИначеЕсли ЭтоАдресВременногоХранилища(ИсточникНастроек) Тогда
		НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(ИсточникНастроек).НастройкиПоУмолчанию;
	КонецЕсли;
	
	КомпоновщикОтборов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ИсточникНастроек));
	КомпоновщикОтборов.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	КомпоновщикОтборов.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры //ИнициализироватьКомпоновщик

// Обновляет список отборов в СКД для выбранного документа.
//
// Параметры:
//   ИмяДокумента - Строка - имя документа вида "ДокументАвансовыйОтчет", используется как ключ в структуре "КоллекцияСКД".
//
&НаКлиенте
Процедура ОбновитьОтборыСКД(ИмяДокумента) 
	
	АдресСхемыКД = Неопределено;
	Если КоллекцияСКД.Свойство(ИмяДокумента, АдресСхемыКД) Тогда
		
		Если ЭтоАдресВременногоХранилища(АдресСхемыКД) Тогда
			ПерезаполнитьОтборыСКДНаСервере(ИмяДокумента, АдресСхемыКД);
		Иначе
			Сообщить("Неверный адрес временного хранилища схемы КД");
		КонецЕсли;
	Иначе
		
		Сообщить("В коллекции отсутствует СКД для документа " + ИмяДокумента);
		
	КонецЕсли;
	
КонецПроцедуры //ОбновитьОтборыСКД

// Перезаполняет отборы СКД для конкретного документа.
//
// Параметры:
//   ИмяДокумента - Строка - имя документа вида "ДокументАвансовыйОтчет", используется как ключ в структуре "КоллекцияСКД".
//   АдресСхемыКД - Строка - адрес временного хранилища СКД.
//
&НаСервере
Процедура ПерезаполнитьОтборыСКДНаСервере(ИмяДокумента, АдресСхемыКД) 
	
	СКД = ПолучитьИзВременногоХранилища(АдресСхемыКД);
	Если СКД = Неопределено Тогда
		Сообщить("Не удалось обновить значения отборов: для документа " + ИмяДокумента + " отсутствует СКД во временном хранилище");
		Возврат;
	КонецЕсли;
	
	ОтборыКД = СКД.НастройкиПоУмолчанию.Отбор.Элементы;
	ОтборыКД.Очистить();
	
	ОтборыКомпоновщик = КомпоновщикОтборов.Настройки.Отбор.Элементы;
	
	Если ОтборыКомпоновщик.Количество() > 0 Тогда
		ЗаполнитьКоллекциюОтборов(ОтборыКД, ОтборыКомпоновщик);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СКД, АдресСхемыКД);
	
КонецПроцедуры //ПерезаполнитьОтборыСКДНаСервере

// Заполняет коллекцию отборов КД.
//
// Параметры:
//   КоллекцияПриемник - КоллекцияЭлементовОтбораКомпоновкиДанных - 
//   КоллекцияИсточник - КоллекцияЭлементовОтбораКомпоновкиДанных -  
//
&НаСервере
Процедура ЗаполнитьКоллекциюОтборов(КоллекцияПриемник, КоллекцияИсточник) 
	
	ТипЭлемент = Тип("ЭлементОтбораКомпоновкиДанных");
	ТипГруппа = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
	
	Для Каждого ЭлементИсточник Из КоллекцияИсточник Цикл
		
		Если ТипЗнч(ЭлементИсточник) = ТипГруппа Тогда
			ЭлементПриемник = КоллекцияПриемник.Добавить(ТипГруппа);
			ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
			ЗаполнитьКоллекциюОтборов(ЭлементПриемник.Элементы, ЭлементИсточник.Элементы);
		Иначе
			ЭлементПриемник = КоллекцияПриемник.Добавить(ТипЭлемент);
			ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьКоллекциюОтборов

#КонецОбласти

#КонецОбласти

#Область ИнициализацияФормы

Если КоллекцияСКД = Неопределено Тогда
	КоллекцияСКД = Новый Структура;
КонецЕсли;

#КонецОбласти