
#Область ОписаниеПеременных

&НаКлиенте
Перем ТекДанныеОбъектыКВыгрузке;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьВидимость();
	ЗаполнитьОбъектыКВыгрузкеНаФорме();
	
	КоличествоВыгружаемых = Объект.ОбъектыКВыгрузке.Количество();
	
	УстановитьОтборСписокПКО();
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Редактор кода
	НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ЗагрузитьРедакторКода", ЭтотОбъект));
	ОбновитьНаличиеОбработчиковАлгоритмов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Редактор кода
	Если Объект.НастройкаОбмена = ПредопределенноеЗначение("Перечисление.СМП_НастройкиОбменов.ДляПолучения") Тогда
		Объект.АлгоритмПередПолучениемИзмененныхОбъектов = Элементы.АлгоритмПередПолучениемИзмененныхОбъектовРедактор.Документ.defaultView.editor.getValue();
		Объект.АлгоритмПередКонвертациейОбъекта = Элементы.АлгоритмПередКонвертациейОбъектаРедактор.Документ.defaultView.editor.getValue();
		Объект.АлгоритмПередЗагрузкойДанных = Элементы.АлгоритмПередЗагрузкойДанныхРедактор.Документ.defaultView.editor.getValue();
		Объект.АлгоритмПослеЗагрузкиПараметров = Элементы.АлгоритмПослеЗагрузкиПараметровРедактор.Документ.defaultView.editor.getValue();
		Объект.АлгоритмПередЗагрузкойОбъекта = Элементы.АлгоритмПередЗагрузкойОбъектавРедактор.Документ.defaultView.editor.getValue();
		Объект.АлгоритмПриПолученииИнформацииОбУдалении = Элементы.АлгоритмПриПолученииИнформацииОбУдаленииРедактор.Документ.defaultView.editor.getValue();
		Объект.АлгоритмПослеЗагрузкиОбъекта = Элементы.АлгоритмПослеЗагрузкиОбъектаРедактор.Документ.defaultView.editor.getValue();
		Объект.АлгоритмПослеЗагрузкиДанных = Элементы.АлгоритмПослеЗагрузкиДанныхРедактор.Документ.defaultView.editor.getValue();
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьОбъектыКВыгрузке(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьОтборСписокПКО();
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьНаличиеОбработчиковАлгоритмов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособПодключенияПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВыбранныеПриИзменении(Элемент)
	
	Если ТолькоВыбранные Тогда
		Элементы.ОбъектыКВыгрузкеНаФорме.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Пометка", Истина));
	Иначе
		Элементы.ОбъектыКВыгрузкеНаФорме.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ФайлКаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Заголовок = "Выберите каталог для обмена данными";
	ДиалогВыбора.Каталог = ?(ПустаяСтрока(Объект.ФайлКаталогОбмена), КаталогДокументов(), Объект.ФайлКаталогОбмена);
	Обещание = Ждать ДиалогВыбора.ВыбратьАсинх();
	
	Если Обещание <> Неопределено Тогда
		Объект.ФайлКаталогОбмена = Обещание[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОбменаПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ОбъектыКВыгрузкеНаФорме

&НаКлиенте
Процедура ОбъектыКВыгрузкеНаФормеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ОбъектыКВыгрузкеНаФорме.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено И Поле.Имя = "ОбъектыКВыгрузкеНаФормеСиноним" Тогда
		ОткрытьФорму(ТекДанные.ИмяОбъекта + ".ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКВыгрузкеНаФормеПриАктивизацииСтроки(Элемент)
	
	ТекДанныеОбъектыКВыгрузке = Элементы.ОбъектыКВыгрузкеНаФорме.ТекущиеДанные;
	
	АдресСхемы = Неопределено;
	Если ТекДанныеОбъектыКВыгрузке.Пометка И КоллекцияСКД.Свойство(ТекДанныеОбъектыКВыгрузке.Имяобъекта, АдресСхемы) Тогда
		ИнициализироватьКомпоновщик(АдресСхемы);
	Иначе
		КомпоновщикОтборов.Настройки.Отбор.Элементы.Очистить();
	КонецЕсли;
	
	УстановитьДоступностьКомпоновщикаНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКВыгрузкеНаФормеПометкаПриИзменении(Элемент)
	
	Если ТекДанныеОбъектыКВыгрузке.Пометка Тогда
		
		// Инициализация новой схемы СКД и компоновщика настроек
		СоздатьСКДНаКлиенте();
		АдресСхемы = Неопределено;
		КоллекцияСКД.Свойство(ТекДанныеОбъектыКВыгрузке.ИмяОбъекта, АдресСхемы);
		Если ЭтоАдресВременногоХранилища(АдресСхемы) Тогда
			ИнициализироватьКомпоновщик(АдресСхемы);
		КонецЕсли;
		
		КоличествоВыгружаемых = КоличествоВыгружаемых + 1;
		
	Иначе
		
		КомпоновщикОтборов.Настройки.Отбор.Элементы.Очистить();
		КоллекцияСКД.Удалить(ТекДанныеОбъектыКВыгрузке.ИмяОбъекта);
		
		КоличествоВыгружаемых = КоличествоВыгружаемых - 1;
		
	КонецЕсли;

	УстановитьДоступностьКомпоновщикаНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_КомпоновщикОтборовНастройкиОтбор

&НаКлиенте
Процедура КомпоновщикОтборовНастройкиОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьОтборыСКД(ТекДанныеОбъектыКВыгрузке.ИмяОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтборовНастройкиОтборПослеУдаления(Элемент)
	
	ОбновитьОтборыСКД(ТекДанныеОбъектыКВыгрузке.ИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокПКО

&НаКлиенте
Процедура СписокПКОПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СписокПКО.ТекущиеДанные <> Неопределено Тогда
		ТекущееПКО = Элементы.СписокПКО.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	УстановитьОтборыЗависимыхПравил();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПКОПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Отказ = Истина;
		ТекстВопроса = "Перед началом добавления правил конвертации объектов учетную запись обмена данными нужно записать. Продолжить?";
		РежимВопроса = РежимДиалогаВопрос.ДаНет;
		ОписаниеОповещения = Новый ОписаниеОповещения("СписокПКОПередНачаломДобавленияЗавершение", 
		ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимВопроса);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения вопроса.
//
&НаКлиенте
Процедура СписокПКОПередНачаломДобавленияЗавершение(РезультатВпроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВпроса = КодВозвратаДиалога.Да Тогда
		Если ЭтотОбъект.Записать() Тогда
			мПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец", Объект.Ссылка));
			ОткрытьФорму("Справочник.ПравилаКонвертацииОбъектов.Форма.ФормаЭлемента", 
			мПараметрыФормы, 
			Элементы.СписокПКО,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //СписокПКОПередНачаломДобавленияЗавершение

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокПКС

 &НаКлиенте
Процедура СписокПКСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ТекущееПКО.Пустая() Тогда
		Отказ = Истина;
		ПредупреждениеАсинх("Отсутствуют правила конвертации объектов!");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокПКЗ

&НаКлиенте
Процедура СписокПКЗПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ТекущееПКО.Пустая() Тогда
		Отказ = Истина;
		ПредупреждениеАсинх("Отсутствуют правила конвертации объектов!");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	Если Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.СМП_ВидыТранспортовОбмена.Файл") Тогда
		
		Если НЕ ПустаяСтрока(Объект.ФайлКаталогОбмена) Тогда
			
			Попытка
				АдресКаталога = Объект.ФайлКаталогОбмена + "\" + Строка(Новый УникальныйИдентификатор);
				СоздатьКаталог(АдресКаталога);
				УдалитьФайлы(АдресКаталога);
				Сообщить("Каталог доступен для записи");
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			
		Иначе
			
			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОписаниеКонфигурации(Команда)
	
	СтруктураПараметров = Новый Структура("парКонфигурация", Объект.Источник);
	ОткрытьФорму("Обработка.ЗагрузкаСтруктурыКонфигурации.Форма", СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеКонфигурации(Команда)
	Сообщить("Этот функционал в процессе разработки");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры

// Выполняет установку видимости элементов формы.
//
&НаСервере
Процедура УстановитьВидимость()
	
	ЭтоОтправка   = (Объект.НастройкаОбмена = ПредопределенноеЗначение("Перечисление.СМП_НастройкиОбменов.ДляОтправки"));
	ЭтоПолучение  = (Объект.НастройкаОбмена = ПредопределенноеЗначение("Перечисление.СМП_НастройкиОбменов.ДляПолучения"));
	ЭтоФайл 	  = (Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.СМП_ВидыТранспортовОбмена.Файл"));
	ЭтоХттпСервис = (Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.СМП_ВидыТранспортовОбмена.ХттпСервис"));
	ЭтоКом 		  = (Объект.СпособПодключения = ПредопределенноеЗначение("Перечисление.СМП_ВидыТранспортовОбмена.Ком"));
	
	// Отправка
	Элементы.ДатаНачалаВыгрузкиДокументов.Видимость = ЭтоОтправка;
	Элементы.ГруппаНастройкиДляОтправки.Видимость = ЭтоОтправка;
	Элементы.ПроверитьПодключение.Видимость = ЭтоОтправка;
	Элементы.СтраницаОбъектыКВыгрузке.Видимость = ЭтоОтправка;
	
	Элементы.ФайлКаталогОбмена.Видимость = ЭтоФайл;
	Элементы.ХттпСервисАдресПодключения.Видимость = ЭтоХттпСервис;
	Элементы.КомИмяСервера1СПредприятия.Видимость = ЭтоКом;
	Элементы.КомИмяИнформационнойБазыНаСервере1СПредприятия.Видимость = ЭтоКом;
	Элементы.ИмяПользователя.Видимость = ЭтоХттпСервис Или ЭтоКом;
	Элементы.ПарольПользователя.Видимость = ЭтоХттпСервис Или ЭтоКом;
	
	// Получение
	Элементы.ГруппаНастройкиДляПолучения.Видимость = ЭтоПолучение;
	Элементы.СтраницаНастройкиЗагрузки.Видимость = ЭтоПолучение;
	Элементы.СтраницаОбработчикиСобытий.Видимость = ЭтоПолучение;
	
КонецПроцедуры //УстановитьВидимость

// Устанавливает доступность таблицы компоновщика настроек КД на форме.
//
&НаКлиенте
Процедура УстановитьДоступностьКомпоновщикаНастроек()
	
	Элементы.КомпоновщикОтборовНастройкиОтбор.ТолькоПросмотр = НЕ ТекДанныеОбъектыКВыгрузке.Пометка;
	
КонецПроцедуры //УстановитьДоступностьКомпоновщикаНастроек

// Заполняет таблицу объектов к выгрузке на форме при создании на сервере.
//
&НаСервере
Процедура ЗаполнитьОбъектыКВыгрузкеНаФорме() 
	
	Картинка = БиблиотекаКартинок.ДокументОбъект;
	тзДок = ОбъектыКВыгрузкеНаФорме.Выгрузить();
	тзДок.Очистить();
	мдДокументы = Метаданные.Документы;
	
	Для Каждого мдДок Из мдДокументы Цикл
		НоваяСтрока = тзДок.Добавить();
		НоваяСтрока.Картинка = Картинка;
		НоваяСтрока.ПолноеИмяОбъекта = мдДок.ПолноеИмя();
		НоваяСтрока.Синоним = мдДок.Представление();
		НоваяСтрока.ИмяОбъекта = СтрЗаменить(НоваяСтрока.ПолноеИмяОбъекта, ".", "");
	КонецЦикла;
	
	Если Объект.ОбъектыКВыгрузке.Количество() > 0 Тогда
		
		СпрОбъект = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.СМП_УчетныеЗаписиОбменов"));
		СпрОбъект.ПолучитьСКДИзТабЧасти(тзДок, КоллекцияСКД, ЭтотОбъект.УникальныйИдентификатор);
		
	КонецЕсли;
	
	тзДок.Сортировать("Синоним");
	ОбъектыКВыгрузкеНаФорме.Загрузить(тзДок);
	
КонецПроцедуры //ЗаполнитьОбъектыКВыгрузкеНаФорме

// Заполняет таблицу объектов к выгрузке перед записью элемента спр..
//
// Параметры:
//   ТекущийОбъект - СправочникОбъект.СМП_УчетныеЗаписиОбменов - элемент в котором обновляется список объектов к выгрузке.
//
&НаСервере
Процедура ОбновитьОбъектыКВыгрузке(ТекущийОбъект) 
	
	тзОбъекты = ОбъектыКВыгрузкеНаФорме.Выгрузить(Новый Структура("Пометка", Истина));
	Если тзОбъекты.Количество() > 0 Тогда
		ТекущийОбъект.ОбъектыКВыгрузке.Загрузить(тзОбъекты);
		ТекущийОбъект.ПоместитьСКДВТабЧасть(КоллекцияСКД);
	Иначе
		ТекущийОбъект.ОбъектыКВыгрузке.Очистить();
	КонецЕсли;
	
КонецПроцедуры //ОбновитьОбъектыКВыгрузке

// Выполняет установку отбора для ПКО.
//
&НаСервере
Процедура УстановитьОтборСписокПКО() 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	СписокПКО, 
	"Владелец", 
	Объект.Ссылка, 
	ВидСравненияКомпоновкиДанных.Равно,
	, 
	Истина, 
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры //УстановитьОтборПКО

// Выполняет установку отборов ПКС, ПКЗ.
//
&НаКлиенте
Процедура УстановитьОтборыЗависимыхПравил() 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	СписокПКС, 
	"Владелец", 
	ТекущееПКО, 
	ВидСравненияКомпоновкиДанных.Равно,
	, 
	Истина, 
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	СписокПКЗ, 
	"Владелец", 
	ТекущееПКО, 
	ВидСравненияКомпоновкиДанных.Равно,
	, 
	Истина, 
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры //УстановитьОтборыЗависимыхПравил



#Область РАБОТА_С_ОТБОРАМИ_СКД

// Запускает создание СКД для документа.
//
// Параметры:
//   ИмяДокумента - Строка - имя документа, как оно задано в конфигураторе.
//
&НаКлиенте
Асинх Процедура СоздатьСКДНаКлиенте() 
	
	Если ТекДанныеОбъектыКВыгрузке <> Неопределено Тогда
		РезультатСоздания = Ждать СоздатьСКД();
		Сообщить(РезультатСоздания);
	КонецЕсли;
	
КонецПроцедуры //СоздатьСКДНаКлиенте

// Возвращает имя документа для которого создана СКД.
//
// Параметры:
//   ИмяДокумента - Строка - имя документа, как оно задано в конфигураторе.
//
// Возвращаемое значение:
//   Строка - Имя документа для которого создана СКД
//
&НаКлиенте
Асинх Функция СоздатьСКД() 
	
	СоздатьСКДДляВыгрузкиДокумента(ТекДанныеОбъектыКВыгрузке.ПолноеИмяОбъекта, ТекДанныеОбъектыКВыгрузке.ИмяОбъекта);
	ТекстСообщения = СтрШаблон("Созданы настройки для документа ""%1""", ТекДанныеОбъектыКВыгрузке.Синоним);
	Возврат ТекстСообщения;
	
КонецФункции // СоздатьСКДАсинх

// Создает СКД для отбора документов при выгрузке.
//
// Параметры:
//   ИмяДокумента - Строка - имя документа, как оно задано в конфигураторе.
//
&НаСервере
Процедура СоздатьСКДДляВыгрузкиДокумента(ПолноеИмяОбъекта, ИмяСКД) 
	
	СКД = Справочники.СМП_УчетныеЗаписиОбменов.ПолучитьСКД(ПолноеИмяОбъекта);
	//ИнициализироватьКомпоновщик(СКД);
	АдресСхемы = ПоместитьВоВременноеХранилище(СКД, ЭтотОбъект.УникальныйИдентификатор);
	КоллекцияСКД.Вставить(ИмяСКД, АдресСхемы);
	
КонецПроцедуры //СоздатьСКДДляВыгрузкиДокумента

// Выполняет инициализацию компоновщика настроек компоновки данных для выбранного или выделенного документа.
//
// Параметры:
//   ИсточникНастроек - СхемаКомпоновкиДанных, АдресВременногоХранилища - источник настроек для компоновщика.
//
&НаСервере
Процедура ИнициализироватьКомпоновщик(ИсточникНастроек)
	
	Если ТипЗнч(ИсточникНастроек) = Тип("СхемаКомпоновкиДанных") Тогда
		НастройкиКомпоновкиДанных = ИсточникНастроек.НастройкиПоУмолчанию;
	ИначеЕсли ЭтоАдресВременногоХранилища(ИсточникНастроек) Тогда
		НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(ИсточникНастроек).НастройкиПоУмолчанию;
	КонецЕсли;
	
	КомпоновщикОтборов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ИсточникНастроек));
	КомпоновщикОтборов.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	КомпоновщикОтборов.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры //ИнициализироватьКомпоновщик

// Обновляет список отборов в СКД для выбранного документа.
//
// Параметры:
//   ИмяДокумента - Строка - имя документа вида "ДокументАвансовыйОтчет", используется как ключ в структуре "КоллекцияСКД".
//
&НаКлиенте
Процедура ОбновитьОтборыСКД(ИмяДокумента) 
	
	АдресСхемыКД = Неопределено;
	Если КоллекцияСКД.Свойство(ИмяДокумента, АдресСхемыКД) Тогда
		
		Если ЭтоАдресВременногоХранилища(АдресСхемыКД) Тогда
			ПерезаполнитьОтборыСКДНаСервере(ИмяДокумента, АдресСхемыКД);
		Иначе
			Сообщить("Неверный адрес временного хранилища схемы КД");
		КонецЕсли;
	Иначе
		
		Сообщить("В коллекции отсутствует СКД для документа " + ИмяДокумента);
		
	КонецЕсли;
	
КонецПроцедуры //ОбновитьОтборыСКД

// Перезаполняет отборы СКД для конкретного документа.
//
// Параметры:
//   ИмяДокумента - Строка - имя документа вида "ДокументАвансовыйОтчет", используется как ключ в структуре "КоллекцияСКД".
//   АдресСхемыКД - Строка - адрес временного хранилища СКД.
//
&НаСервере
Процедура ПерезаполнитьОтборыСКДНаСервере(ИмяДокумента, АдресСхемыКД) 
	
	СКД = ПолучитьИзВременногоХранилища(АдресСхемыКД);
	Если СКД = Неопределено Тогда
		Сообщить("Не удалось обновить значения отборов: для документа " + ИмяДокумента + " отсутствует СКД во временном хранилище");
		Возврат;
	КонецЕсли;
	
	ОтборыКД = СКД.НастройкиПоУмолчанию.Отбор.Элементы;
	ОтборыКД.Очистить();
	
	ОтборыКомпоновщик = КомпоновщикОтборов.Настройки.Отбор.Элементы;
	
	Если ОтборыКомпоновщик.Количество() > 0 Тогда
		ЗаполнитьКоллекциюОтборов(ОтборыКД, ОтборыКомпоновщик);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СКД, АдресСхемыКД);
	
КонецПроцедуры //ПерезаполнитьОтборыСКДНаСервере

// Заполняет коллекцию отборов КД.
//
// Параметры:
//   КоллекцияПриемник - КоллекцияЭлементовОтбораКомпоновкиДанных - 
//   КоллекцияИсточник - КоллекцияЭлементовОтбораКомпоновкиДанных -  
//
&НаСервере
Процедура ЗаполнитьКоллекциюОтборов(КоллекцияПриемник, КоллекцияИсточник) 
	
	ТипЭлемент = Тип("ЭлементОтбораКомпоновкиДанных");
	ТипГруппа = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
	
	Для Каждого ЭлементИсточник Из КоллекцияИсточник Цикл
		
		Если ТипЗнч(ЭлементИсточник) = ТипГруппа Тогда
			ЭлементПриемник = КоллекцияПриемник.Добавить(ТипГруппа);
			ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
			ЗаполнитьКоллекциюОтборов(ЭлементПриемник.Элементы, ЭлементИсточник.Элементы);
		Иначе
			ЭлементПриемник = КоллекцияПриемник.Добавить(ТипЭлемент);
			ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьКоллекциюОтборов

#КонецОбласти

#Область РЕДАКТОР_КОДА

&НаКлиенте
Процедура ЗагрузитьРедакторКода(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	
	СМП_РедакторКодаКлиент.ЗагрузитьРедактор(ЭтаФорма, "АлгоритмПередПолучениемИзмененныхОбъектовРедактор", Объект.АлгоритмПередПолучениемИзмененныхОбъектов, ИмяКаталогаВременныхФайлов);
	СМП_РедакторКодаКлиент.ЗагрузитьРедактор(ЭтаФорма, "АлгоритмПередКонвертациейОбъектаРедактор", Объект.АлгоритмПередКонвертациейОбъекта, ИмяКаталогаВременныхФайлов);
	СМП_РедакторКодаКлиент.ЗагрузитьРедактор(ЭтаФорма, "АлгоритмПередЗагрузкойДанныхРедактор", Объект.АлгоритмПередЗагрузкойДанных, ИмяКаталогаВременныхФайлов);
	СМП_РедакторКодаКлиент.ЗагрузитьРедактор(ЭтаФорма, "АлгоритмПослеЗагрузкиПараметровРедактор", Объект.АлгоритмПослеЗагрузкиПараметров, ИмяКаталогаВременныхФайлов);
	СМП_РедакторКодаКлиент.ЗагрузитьРедактор(ЭтаФорма, "АлгоритмПередЗагрузкойОбъектавРедактор", Объект.АлгоритмПередЗагрузкойОбъекта, ИмяКаталогаВременныхФайлов);
	СМП_РедакторКодаКлиент.ЗагрузитьРедактор(ЭтаФорма, "АлгоритмПриПолученииИнформацииОбУдаленииРедактор", Объект.АлгоритмПриПолученииИнформацииОбУдалении, ИмяКаталогаВременныхФайлов);
	СМП_РедакторКодаКлиент.ЗагрузитьРедактор(ЭтаФорма, "АлгоритмПослеЗагрузкиОбъектаРедактор", Объект.АлгоритмПослеЗагрузкиОбъекта, ИмяКаталогаВременныхФайлов);
	СМП_РедакторКодаКлиент.ЗагрузитьРедактор(ЭтаФорма, "АлгоритмПослеЗагрузкиДанныхРедактор", Объект.АлгоритмПослеЗагрузкиДанных, ИмяКаталогаВременныхФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаличиеОбработчиковАлгоритмов()
	
	//Если ЗначениеЗаполнено("Объект.АлгоритмПередПолучениемИзмененныхОбъектов")
	//		Или ЗначениеЗаполнено("Объект.АлгоритмПередКонвертациейОбъекта")
	//		Или ЗначениеЗаполнено("Объект.АлгоритмПередЗагрузкойДанных")
	//		Или ЗначениеЗаполнено("Объект.АлгоритмПослеЗагрузкиПараметров")
	//		Или ЗначениеЗаполнено("Объект.АлгоритмПередЗагрузкойОбъекта")
	//		Или ЗначениеЗаполнено("Объект.АлгоритмПриПолученииИнформацииОбУдалении")
	//		Или ЗначениеЗаполнено("Объект.АлгоритмПослеЗагрузкиОбъекта")
	//		Или ЗначениеЗаполнено("Объект.АлгоритмПослеЗагрузкиДанных")
	//	Тогда
	//	Элементы.ГруппаОбработчикиСобытий.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено("Объект.АлгоритмПередПолучениемИзмененныхОбъектов") Тогда
	//	Элементы.СтраницаАлгоритмПередПолучениемИзмененныхОбъектов.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено("Объект.АлгоритмПередКонвертациейОбъекта") Тогда
	//	Элементы.СтраницаАлгоритмПередКонвертациейОбъекта.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено("Объект.АлгоритмПередЗагрузкойДанных") Тогда
	//	Элементы.СтраницаАлгоритмПередЗагрузкойДанных.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено("Объект.АлгоритмПослеЗагрузкиПараметров") Тогда
	//	Элементы.СтраницаАлгоритмПослеЗагрузкиПараметров.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено("Объект.АлгоритмПередЗагрузкойОбъекта") Тогда
	//	Элементы.СтраницаАлгоритмПередЗагрузкойОбъекта.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено("Объект.АлгоритмПриПолученииИнформацииОбУдалении") Тогда
	//	Элементы.СтраницаАлгоритмПриПолученииИнформацииОбУдалении.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено("Объект.АлгоритмПослеЗагрузкиОбъекта") Тогда
	//	Элементы.СтраницаАлгоритмПослеЗагрузкиОбъекта.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено("Объект.АлгоритмПослеЗагрузкиДанных") Тогда
	//	Элементы.СтраницаАлгоритмПослеЗагрузкиДанных.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПередПолучениемИзмененныхОбъектовРедакторДокументСформирован(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПередПолучениемИзмененныхОбъектовРедакторПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область ИнициализацияФормы

Если КоллекцияСКД = Неопределено Тогда
	КоллекцияСКД = Новый Структура;
КонецЕсли;

#КонецОбласти